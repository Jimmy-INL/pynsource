--- Research/config techniques/testConfigObj.py	(original)
+++ Research/config techniques/testConfigObj.py	(refactored)
@@ -12,7 +12,7 @@
     except OSError:
         pass        
     user_config_file = os.path.join(config_dir, PYNSOURCE_CONFIG_FILE)
-    print "Pynsource config file", user_config_file
+    print("Pynsource config file", user_config_file)
     
     #shelf = shelve.open(user_config_file)
     #shelf["users"] = ["David", "Abraham"]
@@ -20,14 +20,14 @@
     
     from configobj import ConfigObj # easy_install configobj 
     config = ConfigObj(user_config_file) # doco at http://www.voidspace.org.uk/python/configobj.html
-    print config
+    print(config)
     config['keyword1'] = 100
     config['keyword2'] = "hi there"
     value1 = config['keyword1']
     value2 = config['keyword2']
     #config['section1']['keyword3'] = "hi there"
-    print config
+    print(config)
     config.write()
 
-print "hi"
+print("hi")
 InitConfig()
--- Research/hexmvc/architecture2/architecture1.py	(original)
+++ Research/hexmvc/architecture2/architecture1.py	(refactored)
@@ -6,8 +6,7 @@
 from architecture_support import *
 import abc
 
-class HexAdapter(object):
-    __metaclass__ = abc.ABCMeta
+class HexAdapter(object, metaclass=abc.ABCMeta):
     @abc.abstractmethod
     def SetApp(self, app): pass
 
@@ -62,8 +61,7 @@
     def AddInfo(self, msg):
         self.info += " " + msg
 
-class IModelDependencies(object):
-    __metaclass__ = abc.ABCMeta
+class IModelDependencies(object, metaclass=abc.ABCMeta):
     @abc.abstractmethod
     def notifyOfModelChange(self, thing, modelsize): pass
     
@@ -71,7 +69,7 @@
 # SERVER
 
 from bottle import route, run, template, request
-import thread
+import _thread
 
 
 class IServer(HexAdapter):
@@ -100,8 +98,7 @@
         #return template('ajax1')
         return 'The model length is %d' % self.app.GetModelSize()
 
-class IServerDependencies(object):
-    __metaclass__ = abc.ABCMeta
+class IServerDependencies(object, metaclass=abc.ABCMeta):
     @abc.abstractmethod
     def GetModelSize(self): pass
 
@@ -110,7 +107,7 @@
 import wx
 import wx.lib.mixins.inspection  # Ctrl-Alt-I 
 from hexmvcgui_gen import HexMvcGuiFrame1
-import thread, time
+import _thread, time
 import random
 
 class IGui(HexAdapter):
@@ -124,13 +121,13 @@
 
     def SetApp(self, app):
         self.app = app
-        print "app has been set"
+        print("app has been set")
         #self._InitHyperlinks()
 
     # IModelDependencies
     
     def notifyOfModelChange(self, thing, modelsize):
-        print "Gui observer got notified"
+        print("Gui observer got notified")
         self.m_listBox1.Append(str(thing), thing)
 
     # Gui Generated Events, override the handler here
@@ -148,8 +145,7 @@
         self.myframe = frame
         return True
 
-class IGuiDependencies(object):
-    __metaclass__ = abc.ABCMeta
+class IGuiDependencies(object, metaclass=abc.ABCMeta):
     @abc.abstractmethod
     def AddThing(self, info): pass
 
@@ -162,8 +158,7 @@
 assert issubclass(Server, IServer)
 assert issubclass(MyFrame, IGui)
 
-class IApp(object):
-    __metaclass__ = abc.ABCMeta
+class IApp(object, metaclass=abc.ABCMeta):
     @abc.abstractmethod
     def Boot(self): pass
     
@@ -193,7 +188,7 @@
         return 100
     
     def notifyOfModelChange(self, thing, modelsize):
-        print "App observer got notified, added value %(thing)s - modelsize now %(modelsize)4d" % vars()
+        print("App observer got notified, added value %(thing)s - modelsize now %(modelsize)4d" % vars())
         
 #
 # Wiring up
@@ -216,4 +211,4 @@
 # Start Gui
 wxapp.MainLoop()
 
-print "DONE"
+print("DONE")
--- Research/hexmvc/architecture2/architecture2.py	(original)
+++ Research/hexmvc/architecture2/architecture2.py	(refactored)
@@ -61,7 +61,7 @@
     
         def Clear(self):
             self.things = []
-            print "simple model cleared"
+            print("simple model cleared")
 
         def AddThing(self, info):
             thing = Thing(info)
@@ -89,7 +89,7 @@
             self.model.things.remove(thing)
             self.observers.MODEL_THING_DELETED(thing)
 
-    print ModelProxySimple(None)
+    print(ModelProxySimple(None))
 
 else:
     
@@ -140,7 +140,7 @@
                 model = Model.get(1)
                 #a_thing = Thing.get(1)
             except:
-                print "Oops - possibly no database - creating one now..."
+                print("Oops - possibly no database - creating one now...")
                 Model.dropTable(True)
                 Model.createTable()
                 Thing.dropTable(True)
@@ -158,7 +158,7 @@
 # SERVER
 
 from bottle import route, run, template, request
-import thread
+import _thread
 
 class Server(object):
     def __init__(self, host, port):
@@ -172,10 +172,10 @@
         return "http://%s:%s" % (self.host, self.port)
         
     def StartServer(self):
-        thread.start_new_thread(self._Serve, ())
+        _thread.start_new_thread(self._Serve, ())
 
     def _Serve(self):
-        print "starting server thread..."
+        print("starting server thread...")
 
         @route('/')
         def index():
@@ -199,7 +199,7 @@
 
 import wx
 import wx.lib.mixins.inspection  # Ctrl-Alt-I 
-import thread, time
+import _thread, time
 import random
 
 # GUI Form is auto generated by wxBuilder tool
@@ -329,7 +329,7 @@
     # Other events
     
     def MODEL_THING_ADDED(self, thing, modelsize):
-        print "App observer got notified, added value %(thing)s - modelsize now %(modelsize)4d" % vars()
+        print("App observer got notified, added value %(thing)s - modelsize now %(modelsize)4d" % vars())
         
 class App(object):
     def __init__(self, model, server, gui):
@@ -384,4 +384,4 @@
     # Start Gui
     wxapp.MainLoop()
     
-    print "DONE"
+    print("DONE")
--- Research/hexmvc/architecture2/architecture2_gui_gen.py	(original)
+++ Research/hexmvc/architecture2/architecture2_gui_gen.py	(refactored)
@@ -17,17 +17,17 @@
 class GuiFrame ( wx.Frame ):
 	
 	def __init__( self, parent ):
-		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"HexMvc Architecture2 Gui", pos = wx.DefaultPosition, size = wx.Size( 500,439 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
+		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = "HexMvc Architecture2 Gui", pos = wx.DefaultPosition, size = wx.Size( 500,439 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
 		
 		self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )
 		self.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_INACTIVECAPTION ) )
 		
 		self.m_menubar1 = wx.MenuBar( 0 )
 		self.m_menu1 = wx.Menu()
-		self.m_menuItem1FileNew = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"New", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem1FileNew = wx.MenuItem( self.m_menu1, wx.ID_ANY, "New", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem1FileNew )
 		
-		self.m_menubar1.Append( self.m_menu1, u"File" ) 
+		self.m_menubar1.Append( self.m_menu1, "File" ) 
 		
 		self.SetMenuBar( self.m_menubar1 )
 		
@@ -36,13 +36,13 @@
 		
 		bSizer10NewLoadSave = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button12 = wx.Button( self, wx.ID_ANY, u"New / Clear", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button12 = wx.Button( self, wx.ID_ANY, "New / Clear", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer10NewLoadSave.Add( self.m_button12, 0, wx.ALL, 5 )
 		
-		self.m_button13 = wx.Button( self, wx.ID_ANY, u"Load", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button13 = wx.Button( self, wx.ID_ANY, "Load", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer10NewLoadSave.Add( self.m_button13, 0, wx.ALL, 5 )
 		
-		self.m_button20 = wx.Button( self, wx.ID_ANY, u"Save", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button20 = wx.Button( self, wx.ID_ANY, "Save", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer10NewLoadSave.Add( self.m_button20, 0, wx.ALL, 5 )
 		
 		bSizer6 = wx.BoxSizer( wx.VERTICAL )
@@ -65,7 +65,7 @@
 		
 		bSizer5 = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button11 = wx.Button( self, wx.ID_ANY, u"Dump Model", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button11 = wx.Button( self, wx.ID_ANY, "Dump Model", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer5.Add( self.m_button11, 0, wx.ALL, 5 )
 		
 		
@@ -73,13 +73,13 @@
 		
 		bSizer8Hyperlinks = wx.BoxSizer( wx.VERTICAL )
 		
-		self.m_hyperlink1 = wx.HyperlinkCtrl( self, wx.ID_ANY, u"/", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink1 = wx.HyperlinkCtrl( self, wx.ID_ANY, "/", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8Hyperlinks.Add( self.m_hyperlink1, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink2 = wx.HyperlinkCtrl( self, wx.ID_ANY, u"/modelsize", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink2 = wx.HyperlinkCtrl( self, wx.ID_ANY, "/modelsize", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8Hyperlinks.Add( self.m_hyperlink2, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink3 = wx.HyperlinkCtrl( self, wx.ID_ANY, u"/dumpthings", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink3 = wx.HyperlinkCtrl( self, wx.ID_ANY, "/dumpthings", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8Hyperlinks.Add( self.m_hyperlink3, 0, wx.ALL, 5 )
 		
 		
@@ -97,7 +97,7 @@
 		
 		bSizer102Add = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button122 = wx.Button( self, wx.ID_ANY, u"Add Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button122 = wx.Button( self, wx.ID_ANY, "Add Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer102Add.Add( self.m_button122, 0, wx.ALL, 5 )
 		
 		self.inputFieldTxt = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )
@@ -108,7 +108,7 @@
 		
 		bSizer101AddInfo = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button121 = wx.Button( self, wx.ID_ANY, u"Add Info to Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button121 = wx.Button( self, wx.ID_ANY, "Add Info to Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer101AddInfo.Add( self.m_button121, 0, wx.ALL, 5 )
 		
 		self.inputFieldTxtZ = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )
@@ -119,7 +119,7 @@
 		
 		bSizer20 = wx.BoxSizer( wx.VERTICAL )
 		
-		self.m_button131 = wx.Button( self, wx.ID_ANY, u"Delete Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button131 = wx.Button( self, wx.ID_ANY, "Delete Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer20.Add( self.m_button131, 0, wx.ALL, 5 )
 		
 		
--- Research/hexmvc/architecture3/AppMainConfigOo.py	(original)
+++ Research/hexmvc/architecture3/AppMainConfigOo.py	(refactored)
@@ -36,7 +36,7 @@
 # Start Gui
 wxapp.MainLoop()
 
-print "DONE"
+print("DONE")
 
 # Stops any background server threads.
 import sys
--- Research/hexmvc/architecture3/AppMainConfigSql.py	(original)
+++ Research/hexmvc/architecture3/AppMainConfigSql.py	(refactored)
@@ -28,7 +28,7 @@
 
 # Start Gui
 wxapp.MainLoop()
-print "DONE"
+print("DONE")
 
 # Stops any background server threads.
 import sys
--- Research/hexmvc/architecture3/Controller.py	(original)
+++ Research/hexmvc/architecture3/Controller.py	(refactored)
@@ -27,7 +27,7 @@
     # Other events
     
     def MODEL_THING_ADDED(self, thing, modelsize):
-        print "App observer got notified, added value %(thing)s - modelsize now %(modelsize)d" % vars()
+        print("App observer got notified, added value %(thing)s - modelsize now %(modelsize)d" % vars())
 
     # Methods that adapters need, which require immediate response vs.
     # using the multicasting / eventing approach.  Typically these are
--- Research/hexmvc/architecture3/ModelOo.py	(original)
+++ Research/hexmvc/architecture3/ModelOo.py	(refactored)
@@ -7,7 +7,7 @@
 
     def Clear(self):
         self.things = []
-        print "simple model cleared"
+        print("simple model cleared")
 
     def AddThing(self, info, id=None):
         thing = Thing(info)
--- Research/hexmvc/architecture3/ModelSqlAdapter.py	(original)
+++ Research/hexmvc/architecture3/ModelSqlAdapter.py	(refactored)
@@ -18,7 +18,7 @@
             model = Model.get(1)
             #a_thing = Thing.get(1)
         except:
-            print "Oops - possibly no database - creating one now..."
+            print("Oops - possibly no database - creating one now...")
             Model.dropTable(True)
             Model.createTable()
             Thing.dropTable(True)
--- Research/hexmvc/architecture3/ServerBottleAdapter.py	(original)
+++ Research/hexmvc/architecture3/ServerBottleAdapter.py	(refactored)
@@ -2,7 +2,7 @@
 from architecture_support import *
 
 from bottle import route, run, template, request, response, get, post, put, delete  # easy_install -U bottle
-import thread
+import _thread
 import wx # for mutex under linux so can update gui via app
 
 class Server(object):
@@ -20,17 +20,17 @@
         return "http://%s:%s" % (self.host, self.port)
         
     def StartServer(self):
-        self.thread_id = thread.start_new_thread(self._Serve, ())
+        self.thread_id = _thread.start_new_thread(self._Serve, ())
 
     def StopServer(self):
-        print "stopping server thread..." # actually cannot kill python threads!?
+        print("stopping server thread...") # actually cannot kill python threads!?
         
     def _Serve(self):
-        print "starting server thread..."
+        print("starting server thread...")
 
         def report_error(inst):
             msg = "Server exception: %s" % inst
-            print msg
+            print(msg)
             return msg
 
         @route('/')
@@ -74,7 +74,7 @@
             """
             try:
                 return self.app.controller.CmdGetThingsAsDict()  # no need to call self.json_from_dict as bottle handles it
-            except Exception, inst:
+            except Exception as inst:
                 return report_error(inst)
 
         @get('/things/:id')
@@ -87,7 +87,7 @@
             """
             try:
                 return self.app.controller.CmdGetThingAsDict(id)  # no need to call self.json_from_dict as bottle handles it
-            except Exception, inst:
+            except Exception as inst:
                 return report_error(inst)
 
         @post('/things')
@@ -100,8 +100,8 @@
             Note: Is there a way to send json to the server? e.g. {"info":"thing info content here"}
             """
             try:
-                print request.headers.get('X-Requested-With') # typically 'XMLHttpRequest'
-                print request.headers.get('Content-Type')
+                print(request.headers.get('X-Requested-With')) # typically 'XMLHttpRequest'
+                print(request.headers.get('Content-Type'))
                 content_type = request.headers.get('Content-Type');
 
                 if content_type == 'application/json':
@@ -111,7 +111,7 @@
 
                 dict = self.app.controller.CmdAddThing(info)  # no need to call self.json_from_dict as bottle handles it
                 return dict
-            except Exception, inst:
+            except Exception as inst:
                 return report_error(inst)
 
         @put('/things')
@@ -125,17 +125,17 @@
             try:
                 content_type = request.headers.get('Content-Type');
                 if content_type == 'application/json':
-                    print 'JSON REQUEST'
+                    print('JSON REQUEST')
                     id = request.json.get("id")
                     info = request.json.get("info")
                 else:
-                    print 'FORM REQUEST'
+                    print('FORM REQUEST')
                     id = request.forms.get("id")
                     info = request.forms.get("info")
 
                 dict = self.app.controller.CmdModifyThing(id, info)  # no need to call self.json_from_dict as bottle handles it
                 return dict
-            except Exception, inst:
+            except Exception as inst:
                 return report_error(inst)
 
         @delete('/things/:id')
@@ -147,7 +147,7 @@
             """
             try:
                 return self.app.controller.CmdDeleteThing(id)
-            except Exception, inst:
+            except Exception as inst:
                 return report_error(inst)
             
             
--- Research/hexmvc/architecture3/ServerMockAdapter.py	(original)
+++ Research/hexmvc/architecture3/ServerMockAdapter.py	(refactored)
@@ -15,8 +15,8 @@
         return "http://%s:%s" % (self.host, self.port)
         
     def StartServer(self):
-    	print "Mock server started"
+    	print("Mock server started")
 
     def StopServer(self):
-        print "Stopped Mock server"
+        print("Stopped Mock server")
         
--- Research/hexmvc/architecture3/UtilJsonStdpythonAdapter.py	(original)
+++ Research/hexmvc/architecture3/UtilJsonStdpythonAdapter.py	(refactored)
@@ -1,6 +1,6 @@
 import simplejson as json  # easy_install simplejson
 
 def JsonFromDictFunction(o): 
-    print "python json.dumps"
+    print("python json.dumps")
     return json.dumps(o)
     
--- Research/hexmvc/architecture3/UtilRandomStdpythonAdapter.py	(original)
+++ Research/hexmvc/architecture3/UtilRandomStdpythonAdapter.py	(refactored)
@@ -1,5 +1,5 @@
 import random
 
 def RandomIntFunction(n,m): 
-    print "python random"
+    print("python random")
     return random.randint(n,m)
--- Research/hexmvc/architecture3/ViewWx.py	(original)
+++ Research/hexmvc/architecture3/ViewWx.py	(refactored)
@@ -17,17 +17,17 @@
 class GuiFrame ( wx.Frame ):
 	
 	def __init__( self, parent ):
-		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"HexMvc Architecture 3 Gui", pos = wx.DefaultPosition, size = wx.Size( 500,439 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
+		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = "HexMvc Architecture 3 Gui", pos = wx.DefaultPosition, size = wx.Size( 500,439 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
 		
 		self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )
 		self.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_INACTIVECAPTION ) )
 		
 		self.m_menubar1 = wx.MenuBar( 0 )
 		self.m_menu1 = wx.Menu()
-		self.m_menuItem1FileNew = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"New", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem1FileNew = wx.MenuItem( self.m_menu1, wx.ID_ANY, "New", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem1FileNew )
 		
-		self.m_menubar1.Append( self.m_menu1, u"File" ) 
+		self.m_menubar1.Append( self.m_menu1, "File" ) 
 		
 		self.SetMenuBar( self.m_menubar1 )
 		
@@ -36,13 +36,13 @@
 		
 		bSizer10NewLoadSave = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button12 = wx.Button( self, wx.ID_ANY, u"New / Clear", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button12 = wx.Button( self, wx.ID_ANY, "New / Clear", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer10NewLoadSave.Add( self.m_button12, 0, wx.ALL, 5 )
 		
-		self.m_button13 = wx.Button( self, wx.ID_ANY, u"Load", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button13 = wx.Button( self, wx.ID_ANY, "Load", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer10NewLoadSave.Add( self.m_button13, 0, wx.ALL, 5 )
 		
-		self.m_button20 = wx.Button( self, wx.ID_ANY, u"Save", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button20 = wx.Button( self, wx.ID_ANY, "Save", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer10NewLoadSave.Add( self.m_button20, 0, wx.ALL, 5 )
 		
 		bSizer6 = wx.BoxSizer( wx.VERTICAL )
@@ -65,7 +65,7 @@
 		
 		bSizer5 = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button11 = wx.Button( self, wx.ID_ANY, u"Dump Model", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button11 = wx.Button( self, wx.ID_ANY, "Dump Model", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer5.Add( self.m_button11, 0, wx.ALL, 5 )
 		
 		
@@ -73,16 +73,16 @@
 		
 		bSizer8Hyperlinks = wx.BoxSizer( wx.VERTICAL )
 		
-		self.m_hyperlink1 = wx.HyperlinkCtrl( self, wx.ID_ANY, u"/", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink1 = wx.HyperlinkCtrl( self, wx.ID_ANY, "/", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8Hyperlinks.Add( self.m_hyperlink1, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink2 = wx.HyperlinkCtrl( self, wx.ID_ANY, u"/modelsize", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink2 = wx.HyperlinkCtrl( self, wx.ID_ANY, "/modelsize", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8Hyperlinks.Add( self.m_hyperlink2, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink3 = wx.HyperlinkCtrl( self, wx.ID_ANY, u"/dumpthings", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink3 = wx.HyperlinkCtrl( self, wx.ID_ANY, "/dumpthings", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8Hyperlinks.Add( self.m_hyperlink3, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink4 = wx.HyperlinkCtrl( self, wx.ID_ANY, u"/addthing", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink4 = wx.HyperlinkCtrl( self, wx.ID_ANY, "/addthing", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8Hyperlinks.Add( self.m_hyperlink4, 0, wx.ALL, 5 )
 		
 		
@@ -100,7 +100,7 @@
 		
 		bSizer102Add = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button122 = wx.Button( self, wx.ID_ANY, u"Add Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button122 = wx.Button( self, wx.ID_ANY, "Add Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer102Add.Add( self.m_button122, 0, wx.ALL, 5 )
 		
 		self.inputFieldTxt = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )
@@ -111,7 +111,7 @@
 		
 		bSizer101AddInfo = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button121 = wx.Button( self, wx.ID_ANY, u"Add Info to Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button121 = wx.Button( self, wx.ID_ANY, "Add Info to Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer101AddInfo.Add( self.m_button121, 0, wx.ALL, 5 )
 		
 		self.inputFieldTxtZ = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )
@@ -122,7 +122,7 @@
 		
 		bSizer20 = wx.BoxSizer( wx.VERTICAL )
 		
-		self.m_button131 = wx.Button( self, wx.ID_ANY, u"Delete Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button131 = wx.Button( self, wx.ID_ANY, "Delete Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer20.Add( self.m_button131, 0, wx.ALL, 5 )
 		
 		
--- Research/hexmvc/architecture3/ViewWxAdapter.py	(original)
+++ Research/hexmvc/architecture3/ViewWxAdapter.py	(refactored)
@@ -3,7 +3,7 @@
 
 import wx
 import wx.lib.mixins.inspection  # Ctrl-Alt-I 
-import thread, time
+import _thread, time
 import random
 
 # GUI Form is auto generated by wxBuilder tool
@@ -105,7 +105,7 @@
             self.m_listBox1.Append(str(thing), thing)
 
     def MODEL_THING_ADDED(self, thing, modelsize):
-        print "MODEL_THING_ADDED"
+        print("MODEL_THING_ADDED")
         self.m_listBox1.Append(str(thing), thing)
 
     def MODEL_THING_UPDATE(self, thing):
@@ -115,7 +115,7 @@
             self.m_listBox1.SetClientData(index, thing)
 
     def MODEL_THING_DELETED(self, thing):
-        print "MODEL_THING_DELETED"
+        print("MODEL_THING_DELETED")
         index = self._FindClientData(self.m_listBox1, thing)
         if index != wx.NOT_FOUND:
             self.m_listBox1.Delete(index)
--- Research/hexmvc/architecture3/AppMainConfigDotnet/Program.py	(original)
+++ Research/hexmvc/architecture3/AppMainConfigDotnet/Program.py	(refactored)
@@ -61,7 +61,7 @@
     app = App(model, server, gui)
     gui.callAfter = app.Boot
 
-except Exception, inst:
-    print inst
+except Exception as inst:
+    print(inst)
 
 Application.Run(form)
--- Research/hexmvc/architecture3/AppMainConfigDotnet/ServerDotnet.py	(original)
+++ Research/hexmvc/architecture3/AppMainConfigDotnet/ServerDotnet.py	(refactored)
@@ -40,7 +40,7 @@
         response = context.Response
         path = self.pathComponents(context)
         method = context.Request.HttpMethod
-        print method, path
+        print(method, path)
         """
         if you call with http://localhost:8081 path='' method=GET
         if you call with http://localhost:8081/fred path='fred' method=GET
--- Research/hexmvc/architecture3/AppMainConfigDotnet/ServerDotnetAdapter.py	(original)
+++ Research/hexmvc/architecture3/AppMainConfigDotnet/ServerDotnetAdapter.py	(refactored)
@@ -16,13 +16,13 @@
         return "http://%s:%s" % (self.host, self.port)
 
     def StopServer(self):
-        print "stopping server thread..."
+        print("stopping server thread...")
         if self.thread_id:
             self.thread_id.Abort()
             self.thread_id = None
 
     def StartServer(self):
-        print "starting server thread..."
+        print("starting server thread...")
         self.thread_id = Thread(ThreadStart(self.serveforever))
         self.thread_id.Start()
 
@@ -33,7 +33,7 @@
 
         def report_error(inst):
             msg = "Server exception: %s" % inst
-            print msg
+            print(msg)
             return msg
         
         if cmd == '':
@@ -60,7 +60,7 @@
             try:
                 response.ContentType = "application/json"
                 return self.json_from_dict(self.app.controller.CmdGetThingsAsDict())
-            except Exception, inst:
+            except Exception as inst:
                 return report_error(inst)
 
         elif cmd == 'things' and len(path) == 2:
@@ -68,7 +68,7 @@
                 id = path[1]
                 response.ContentType = "application/json"
                 return self.json_from_dict(self.app.controller.CmdGetThingAsDict(id))
-            except Exception, inst:
+            except Exception as inst:
                 return report_error(inst)
 
         
--- Research/hexmvc/architecture3/AppMainConfigDotnet/UtilJsonDotnetAdapter.py	(original)
+++ Research/hexmvc/architecture3/AppMainConfigDotnet/UtilJsonDotnetAdapter.py	(refactored)
@@ -4,7 +4,7 @@
 
 # Andy hack
 def JsonFromDictFunction(o): 
-    print "dotnet json.dumps"
+    print("dotnet json.dumps")
     s = str(o)
     return s.replace("\'", "\"")  # json require double quotes, not single
     
--- Research/hexmvc/architecture3/AppMainConfigDotnet/UtilRandomDotnetAdapter.py	(original)
+++ Research/hexmvc/architecture3/AppMainConfigDotnet/UtilRandomDotnetAdapter.py	(refactored)
@@ -1,5 +1,5 @@
 import System.Random
 
 def RandomIntFunction(n,m):
-    print "dot net random"
+    print("dot net random")
     return System.Random().Next(m)
--- Research/hexmvc/architecture3/AppMainConfigDotnet/ViewDotnetWinFormAdapter.py	(original)
+++ Research/hexmvc/architecture3/AppMainConfigDotnet/ViewDotnetWinFormAdapter.py	(refactored)
@@ -26,7 +26,7 @@
         self.app.Shutdown()
 
     def Boot(self):
-        print "BOOT"
+        print("BOOT")
         self._InitHyperlinks()
 
     # Util
@@ -54,7 +54,7 @@
     # Gui Generated Events, override the handler here
         
     def BtnDebug1Click(self, sender, e):
-        print 'self.app.server.StartServer_real'
+        print('self.app.server.StartServer_real')
         self.app.server.StopServer()
 
 #        print "got debug event"
@@ -69,14 +69,14 @@
 
     
     def OnLinkClicked(self, sender, e):
-        print "link clicked", sender.Text
+        print("link clicked", sender.Text)
         System.Diagnostics.Process.Start(self.app.url_server + sender.Text)
     
     def OnAddThing(self, sender, e):
         assert self.random
         info = str(self.random(0,99999)) + " " + self._inputFieldTxt.Text
         self.observers.CMD_ADD_THING(info)
-        print info
+        print(info)
 
     # Non Gui Incoming Events
 
--- Research/hexmvc/bottle tests/bottle3.py	(original)
+++ Research/hexmvc/bottle tests/bottle3.py	(refactored)
@@ -2,11 +2,11 @@
 
 import wx
 from bottle import route, run
-import thread
+import _thread
 
 HOST='localhost'
 PORT="8081"
-LOCALURL = u"http://"+HOST+":"+PORT
+LOCALURL = "http://"+HOST+":"+PORT
 
 class MyForm(wx.Panel):
 
@@ -14,7 +14,7 @@
         wx.Panel.__init__(self,parent,id=3)
         self.inputFieldTxt = wx.TextCtrl(self, -1, size=(200,-1), pos=(5, 10), style=wx.TE_PROCESS_ENTER)
         wx.StaticText(self, -1, "enter text and hit ENTER", size=(170,-1), pos=(5, 35))
-        wx.HyperlinkCtrl(self, wx.ID_ANY, u"view", LOCALURL, pos=(5, 60) )
+        wx.HyperlinkCtrl(self, wx.ID_ANY, "view", LOCALURL, pos=(5, 60) )
 
 class AppFrame(wx.Frame):
     myForm = None
@@ -28,13 +28,13 @@
 
     def onGuiHitEnter(self, evt):
         self.currentData = self.myForm.inputFieldTxt.GetValue().upper()
-        print "wx gui got", self.currentData
+        print("wx gui got", self.currentData)
         
     def StartServer(self):
-        thread.start_new_thread(self._Serve, ())
+        _thread.start_new_thread(self._Serve, ())
         
     def _Serve(self):
-        print "starting server thread..."
+        print("starting server thread...")
         
         @route('/')
         def index():
--- Research/hexmvc/hexagon3/hexagon1.py	(original)
+++ Research/hexmvc/hexagon3/hexagon1.py	(refactored)
@@ -10,21 +10,21 @@
 # UNIT TEST
 
 app.Load()
-print app.model
+print(app.model)
 
 thing1 = app.GetThing(0)
 app.AddInfoToThing(thing1, "once")
-print app.model
+print(app.model)
 
 app.New()
 app.CreateThing("once")
 app.CreateThing("upon a time")
 app.Save()
-print app.model
+print(app.model)
 
 app.New()
-print app.model
+print(app.model)
 
 app.Load()
-print app.model
+print(app.model)
 
--- Research/hexmvc/hexagon3/hexagon2.py	(original)
+++ Research/hexmvc/hexagon3/hexagon2.py	(refactored)
@@ -23,4 +23,4 @@
 # Start Gui
 wxapp.MainLoop()
 
-print "DONE"
+print("DONE")
--- Research/hexmvc/hexagon3/hexagon3.py	(original)
+++ Research/hexmvc/hexagon3/hexagon3.py	(refactored)
@@ -33,7 +33,7 @@
         model = Model.get(1)
         thing = Thing.get(1)
     except:
-        print "Oops - possible no database - creating..."
+        print("Oops - possible no database - creating...")
         Model.dropTable(True)
         Model.createTable()
         Thing.dropTable(True)
@@ -54,4 +54,4 @@
 # Start Gui
 wxapp.MainLoop()
 
-print "DONE"
+print("DONE")
--- Research/hexmvc/hexagon3/hexmodel_sqlobject.py	(original)
+++ Research/hexmvc/hexagon3/hexmodel_sqlobject.py	(refactored)
@@ -54,9 +54,9 @@
     conn = SQLiteConnection('hexmodel_sqlobject.db', debug=False)
     sqlhub.processConnection = conn
 
-    init = raw_input("Create from scratch? (y/n) ")
+    init = input("Create from scratch? (y/n) ")
     if init == 'y':
-        print "Recreating database..."
+        print("Recreating database...")
     
         Model.dropTable(True)
         Model.createTable()
@@ -68,18 +68,18 @@
         thing2 = Thing(info="fred", model=model)
     else:
         model = Model.get(1)
-        thing1 = Thing.get(1); print thing1
-        thing2 = Thing.get(2); print thing2
+        thing1 = Thing.get(1); print(thing1)
+        thing2 = Thing.get(2); print(thing2)
 
     assert len(model.things) == 2
     assert thing1 in model.things
     assert thing2 in model.things
 
     # test deletion    
-    thing3 = Thing(info="tmp", model=model); print thing3
+    thing3 = Thing(info="tmp", model=model); print(thing3)
     assert len(model.things) == 3
     Thing.delete(thing3.id)
     assert len(model.things) == 2
 
-    print "done"
+    print("done")
     
--- Research/hexmvc/hexagon3/hexmvcgui.py	(original)
+++ Research/hexmvc/hexagon3/hexmvcgui.py	(refactored)
@@ -1,6 +1,6 @@
 import wx
 from hexmvcgui_gen import HexMvcGuiFrame1
-import thread, time
+import _thread, time
 import random
 
 class MyFrame(HexMvcGuiFrame1):
@@ -10,7 +10,7 @@
 
     def SetApp(self, app):
         self.app = app
-        print "app has been set"
+        print("app has been set")
         self._InitHyperlinks()
         
     def _InitHyperlinks(self):
@@ -112,22 +112,22 @@
         self.need_abort = False
         self.m_gauge1.Range = 5
         self.m_gauge1.Value = 0
-        thread.start_new_thread(self._DoSomeLongTask, ())
+        _thread.start_new_thread(self._DoSomeLongTask, ())
 
     def StopBackgroundTask1( self, event ):
         self.need_abort = True
 
     def _DoSomeLongTask(self):
-        print "Background Task started"
+        print("Background Task started")
         for i in range(0,5):
             if self.need_abort:
-                print "aborted."
+                print("aborted.")
                 return
             wx.CallAfter(self._AddJunkText)
             wx.CallAfter(self._IncrGuage)
-            print '*',
+            print('*', end=' ')
             time.sleep(1)   # lets events through to the main wx thread and paints/messages get through ok
-        print "Done Background Task."
+        print("Done Background Task.")
         self.m_gauge1.Value = 0
 
     def StartServer( self, event ):
--- Research/hexmvc/hexagon3/hexmvcgui_gen.py	(original)
+++ Research/hexmvc/hexagon3/hexmvcgui_gen.py	(refactored)
@@ -17,7 +17,7 @@
 class HexMvcGuiFrame1 ( wx.Frame ):
 	
 	def __init__( self, parent ):
-		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"HexMvc Gui 1", pos = wx.DefaultPosition, size = wx.Size( 514,413 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
+		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = "HexMvc Gui 1", pos = wx.DefaultPosition, size = wx.Size( 514,413 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
 		
 		self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )
 		self.m_mgr = wx.aui.AuiManager()
@@ -25,16 +25,16 @@
 		
 		self.m_menubar1 = wx.MenuBar( 0 )
 		self.m_menu1 = wx.Menu()
-		self.m_menuItem1 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"New", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem1 = wx.MenuItem( self.m_menu1, wx.ID_ANY, "New", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem1 )
 		
-		self.m_menuItem2 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"Load", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem2 = wx.MenuItem( self.m_menu1, wx.ID_ANY, "Load", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem2 )
 		
-		self.m_menuItem3 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"Save", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem3 = wx.MenuItem( self.m_menu1, wx.ID_ANY, "Save", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem3 )
 		
-		self.m_menubar1.Append( self.m_menu1, u"File" ) 
+		self.m_menubar1.Append( self.m_menu1, "File" ) 
 		
 		self.SetMenuBar( self.m_menubar1 )
 		
@@ -53,26 +53,26 @@
 		
 		bSizer3 = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button3 = wx.Button( self.m_panel1, wx.ID_ANY, u"Dump Model", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button3 = wx.Button( self.m_panel1, wx.ID_ANY, "Dump Model", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button3, 0, wx.ALL, 5 )
 		
-		self.m_button9 = wx.Button( self.m_panel1, wx.ID_ANY, u"Clear", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button9 = wx.Button( self.m_panel1, wx.ID_ANY, "Clear", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button9, 0, wx.ALL, 5 )
 		
-		self.m_button4 = wx.Button( self.m_panel1, wx.ID_ANY, u"Add Junk Text", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button4 = wx.Button( self.m_panel1, wx.ID_ANY, "Add Junk Text", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button4, 0, wx.ALL, 5 )
 		
-		self.m_button5 = wx.Button( self.m_panel1, wx.ID_ANY, u"MessageBox", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button5 = wx.Button( self.m_panel1, wx.ID_ANY, "MessageBox", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button5, 0, wx.ALL, 5 )
 		
 		bSizer7.Add( bSizer3, 0, 0, 5 )
 		
 		bSizer5 = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button11 = wx.Button( self.m_panel1, wx.ID_ANY, u"Background Task 1", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button11 = wx.Button( self.m_panel1, wx.ID_ANY, "Background Task 1", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer5.Add( self.m_button11, 0, wx.ALL, 5 )
 		
-		self.m_button12 = wx.Button( self.m_panel1, wx.ID_ANY, u"Stop", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button12 = wx.Button( self.m_panel1, wx.ID_ANY, "Stop", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer5.Add( self.m_button12, 0, wx.ALL, 5 )
 		
 		self.m_gauge1 = wx.Gauge( self.m_panel1, wx.ID_ANY, 100, wx.DefaultPosition, wx.DefaultSize, wx.GA_HORIZONTAL )
@@ -82,13 +82,13 @@
 		
 		bSizer4 = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button6 = wx.Button( self.m_panel1, wx.ID_ANY, u"New", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button6 = wx.Button( self.m_panel1, wx.ID_ANY, "New", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer4.Add( self.m_button6, 0, wx.ALL, 5 )
 		
-		self.m_button7 = wx.Button( self.m_panel1, wx.ID_ANY, u"Load", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button7 = wx.Button( self.m_panel1, wx.ID_ANY, "Load", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer4.Add( self.m_button7, 0, wx.ALL, 5 )
 		
-		self.m_button8 = wx.Button( self.m_panel1, wx.ID_ANY, u"Save", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button8 = wx.Button( self.m_panel1, wx.ID_ANY, "Save", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer4.Add( self.m_button8, 0, wx.ALL, 5 )
 		
 		bSizer7.Add( bSizer4, 1, wx.EXPAND, 5 )
@@ -99,13 +99,13 @@
 		
 		bSizer2 = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button1 = wx.Button( self.m_panel1, wx.ID_ANY, u"Add Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button1 = wx.Button( self.m_panel1, wx.ID_ANY, "Add Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer2.Add( self.m_button1, 0, wx.ALL, 5 )
 		
-		self.m_button2 = wx.Button( self.m_panel1, wx.ID_ANY, u"Delete Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button2 = wx.Button( self.m_panel1, wx.ID_ANY, "Delete Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer2.Add( self.m_button2, 0, wx.ALL, 5 )
 		
-		self.m_button121 = wx.Button( self.m_panel1, wx.ID_ANY, u"Add Info To Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button121 = wx.Button( self.m_panel1, wx.ID_ANY, "Add Info To Thing", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer2.Add( self.m_button121, 0, wx.ALL, 5 )
 		
 		bSizer7.Add( bSizer2, 1, wx.EXPAND, 5 )
@@ -114,25 +114,25 @@
 		
 		bSizer8 = wx.BoxSizer( wx.VERTICAL )
 		
-		self.m_hyperlink1 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, u"/", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink1 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, "/", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8.Add( self.m_hyperlink1, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink2 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, u"/aa", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink2 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, "/aa", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8.Add( self.m_hyperlink2, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink3 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, u"/hello", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink3 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, "/hello", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8.Add( self.m_hyperlink3, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink4 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, u"/hello/man", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink4 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, "/hello/man", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8.Add( self.m_hyperlink4, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink5 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, u"/ajax", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink5 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, "/ajax", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8.Add( self.m_hyperlink5, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink6 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, u"/ajax_info1", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink6 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, "/ajax_info1", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8.Add( self.m_hyperlink6, 0, wx.ALL, 5 )
 		
-		self.m_hyperlink8 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, u"/xml", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink8 = wx.HyperlinkCtrl( self.m_panel1, wx.ID_ANY, "/xml", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer8.Add( self.m_hyperlink8, 0, wx.ALL, 5 )
 		
 		bSizer6.Add( bSizer8, 0, 0, 5 )
--- Research/hexmvc/hexagon3/hexpersistence_sqlobject.py	(original)
+++ Research/hexmvc/hexagon3/hexpersistence_sqlobject.py	(refactored)
@@ -44,9 +44,9 @@
     conn = SQLiteConnection('hexpersistence_sqlobject.db', debug=False)
     sqlhub.processConnection = conn
 
-    init = raw_input("Create from scratch? (y/n) ")
+    init = input("Create from scratch? (y/n) ")
     if init == 'y':
-        print "Recreating database..."
+        print("Recreating database...")
     
         Model.dropTable(True)
         Model.createTable()
@@ -58,18 +58,18 @@
         thing2 = Thing(info="fred", model=model)
     else:
         model = Model.get(1)
-        thing1 = Thing.get(1); print thing1
-        thing2 = Thing.get(2); print thing2
+        thing1 = Thing.get(1); print(thing1)
+        thing2 = Thing.get(2); print(thing2)
 
     assert len(model.things) == 2
     assert thing1 in model.things
     assert thing2 in model.things
 
     # test deletion    
-    thing3 = Thing(info="tmp", model=model); print thing3
+    thing3 = Thing(info="tmp", model=model); print(thing3)
     assert len(model.things) == 3
     Thing.delete(thing3.id)
     assert len(model.things) == 2
 
-    print "done"
+    print("done")
     
--- Research/hexmvc/hexagon3/hexserver.py	(original)
+++ Research/hexmvc/hexagon3/hexserver.py	(refactored)
@@ -1,5 +1,5 @@
 from bottle import route, run, template, request
-import thread
+import _thread
 
 class Server1:
     def __init__(self, host, port):
@@ -13,10 +13,10 @@
         return "http://%s:%s" % (self.host, self.port)
         
     def StartServer(self):
-        thread.start_new_thread(self._Serve, ())
+        _thread.start_new_thread(self._Serve, ())
         
     def _Serve(self):
-        print "starting server thread..."
+        print("starting server thread...")
         
         @route('/')
         def index():
@@ -45,8 +45,8 @@
                 else:
                     return 'This is a normal request'
             except Exception as inst:
-                print "Exception!," + type(inst)     # the exception instance
-                print inst           # __str__ allows args to printed directly
+                print("Exception!," + type(inst))     # the exception instance
+                print(inst)           # __str__ allows args to printed directly
                 #print inst.args      # arguments stored in .args
                 #print traceback.print_exc()
 
--- Research/hexmvc/hexagon3/junk.py	(original)
+++ Research/hexmvc/hexagon3/junk.py	(refactored)
@@ -1,3 +1,3 @@
-print 6
-raw_input("Press Enter to continue...")
-print 7
+print(6)
+input("Press Enter to continue...")
+print(7)
--- Research/hexmvc/hexagon3/scrapswx.py	(original)
+++ Research/hexmvc/hexagon3/scrapswx.py	(refactored)
@@ -22,7 +22,7 @@
 		
 		bSizer6 = wx.BoxSizer( wx.VERTICAL )
 		
-		self.m_hyperlink2 = wx.HyperlinkCtrl( self, wx.ID_ANY, u"wxFB Website", u"http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
+		self.m_hyperlink2 = wx.HyperlinkCtrl( self, wx.ID_ANY, "wxFB Website", "http://www.wxformbuilder.org", wx.DefaultPosition, wx.DefaultSize, wx.HL_DEFAULT_STYLE )
 		bSizer6.Add( self.m_hyperlink2, 0, wx.ALL, 5 )
 		
 		self.SetSizer( bSizer6 )
--- Research/hexmvc/hexagon3/tests/test_hexmvc01.py	(original)
+++ Research/hexmvc/hexagon3/tests/test_hexmvc01.py	(refactored)
@@ -90,19 +90,19 @@
 def interrogate(item):
     """Print useful information about item."""
     if hasattr(item, '__name__'):
-        print "NAME:    ", item.__name__
+        print("NAME:    ", item.__name__)
     if hasattr(item, '__class__'):
-        print "CLASS:   ", item.__class__.__name__
-    print "ID:      ", id(item)
-    print "TYPE:    ", type(item)
-    print "VALUE:   ", repr(item)
-    print "CALLABLE:",
+        print("CLASS:   ", item.__class__.__name__)
+    print("ID:      ", id(item))
+    print("TYPE:    ", type(item))
+    print("VALUE:   ", repr(item))
+    print("CALLABLE:", end=' ')
     if callable(item):
-        print "Yes"
+        print("Yes")
     else:
-        print "No"
-    if hasattr(item, '__doc__') and getattr(item, '__doc__') <> None:
+        print("No")
+    if hasattr(item, '__doc__') and getattr(item, '__doc__') != None:
         doc = getattr(item, '__doc__')
         doc = doc.strip()   # Remove leading/trailing whitespace.
         firstline = doc.split('\n')[0]
-        print "DOC:     ", firstline
+        print("DOC:     ", firstline)
--- Research/hexmvc/lib/architecture_support.py	(original)
+++ Research/hexmvc/lib/architecture_support.py	(refactored)
@@ -5,6 +5,7 @@
 # Multicasting based on objects
 
 import operator
+from functools import reduce
 
 class multicast(dict):
     "Class multiplexes messages to registered objects"
@@ -17,23 +18,23 @@
     def __call__(self, *args, **kwargs):
         "Invoke method attributes and return results through another multicast"
         return self.__class__( [ (alias, obj(*args, **kwargs) ) \
-                for alias, obj in self.items() if callable(obj) ] )
+                for alias, obj in list(self.items()) if callable(obj) ] )
 
-    def __nonzero__(self):
+    def __bool__(self):
         "A multicast is logically true if all delegate attributes are logically true"
 
-        return operator.truth(reduce(lambda a, b: a and b, self.values(), 1))
+        return operator.truth(reduce(lambda a, b: a and b, list(self.values()), 1))
 
     def __getattr__(self, name):
         "Wrap requested attributes for further processing"
         return self.__class__( [ (alias, getattr(obj, name) ) \
-                for alias, obj in self.items() if hasattr(obj, name) ] )
+                for alias, obj in list(self.items()) if hasattr(obj, name) ] )
 
     def __setattr__(self, name, value):
         """Wrap setting of requested attributes for further
         processing"""
 
-        for o in self.values():
+        for o in list(self.values()):
             o.setdefault(name, value)
 
     # Andy Modifications
@@ -76,15 +77,15 @@
 
 def dump_args(func):
     "This decorator dumps out the arguments passed to a function before calling it"
-    argnames = func.func_code.co_varnames[:func.func_code.co_argcount]
-    fname = func.func_name
+    argnames = func.__code__.co_varnames[:func.__code__.co_argcount]
+    fname = func.__name__
 
     if not dodumpargs:
         return func
 
     def echo_func(*args,**kwargs):
-        print fname, ":", ', '.join(
+        print(fname, ":", ', '.join(
             '%s=%r' % entry
-            for entry in zip(argnames,args) + kwargs.items())
+            for entry in list(zip(argnames,args)) + list(kwargs.items())))
         return func(*args, **kwargs)
     return echo_func
--- Research/hexmvc/orm copycat test/copycat1.py	(original)
+++ Research/hexmvc/orm copycat test/copycat1.py	(refactored)
@@ -23,4 +23,4 @@
 wiki = init_system(Wiki(), "./files")
 #wiki.create_page('My First Page', 'My First Page Content')
 page = wiki.pages['My First Page']
-print page
+print(page)
--- Research/hexmvc/orm sqlobject test/andyormtest1.py	(original)
+++ Research/hexmvc/orm sqlobject test/andyormtest1.py	(refactored)
@@ -110,7 +110,7 @@
 
 # Now SQLOBJECT lets us do other magic things, that leverage relational db technology
 p = Person.get(1)
-print p
+print(p)
 
 #ps = Person.select(Person.q.firstName=="John")
 #print list(ps)
@@ -120,10 +120,10 @@
 #                      clauseTables=['address'])
 ps = Person.select("""address.postcode LIKE '3186'""",
                       clauseTables=['address'])
-print list(ps)
+print(list(ps))
 
-print 'all people'
+print('all people')
 ps = Person.select()
-print list(ps)
+print(list(ps))
 
-print 'Done!'
+print('Done!')
--- Research/hexmvc/puremv_minimal_to_hexmvc/puremvcminimalwx0nostartupcmd.py	(original)
+++ Research/hexmvc/puremv_minimal_to_hexmvc/puremvcminimalwx0nostartupcmd.py	(refactored)
@@ -80,7 +80,7 @@
 
     def handleNotification(self, notification):
         if notification.getName() == AppFacade.DATA_CHANGED:
-            print "handleNotification (mediator) got", notification.getBody()
+            print("handleNotification (mediator) got", notification.getBody())
             mydata = notification.getBody()
             self.viewComponent.inputFieldTxt.SetValue(mydata)
 
@@ -90,7 +90,7 @@
 
 class DataSubmittedCommand(puremvc.patterns.command.SimpleCommand, puremvc.interfaces.ICommand):
     def execute(self, notification):
-        print "submit execute (command)", notification.getBody()
+        print("submit execute (command)", notification.getBody())
         mydata = notification.getBody()
         self.datamodelProxy = self.facade.retrieveProxy(DataModelProxy.NAME)
         self.datamodelProxy.setData(mydata.upper())
@@ -105,7 +105,7 @@
 
     def setData(self, data):
         self.realdata.data = data
-        print "setData (model) to", data
+        print("setData (model) to", data)
         self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data)
 
 class Data:
--- Research/hexmvc/puremv_minimal_to_hexmvc/puremvcminimalwx1_puremvc_stripped_out.py	(original)
+++ Research/hexmvc/puremv_minimal_to_hexmvc/puremvcminimalwx1_puremvc_stripped_out.py	(refactored)
@@ -31,7 +31,7 @@
     #        mydata = notification.getBody()
     #        self.viewComponent.inputFieldTxt.SetValue(mydata)
     def DATA_CHANGED(self, mydata):
-        print "handleNotification (mediator) got", mydata
+        print("handleNotification (mediator) got", mydata)
         self.viewComponent.inputFieldTxt.SetValue(mydata)
 
     def onSubmit(self, evt):
@@ -46,7 +46,7 @@
     #    self.datamodelProxy = self.facade.retrieveProxy(DataModelProxy.NAME)
     #    self.datamodelProxy.setData(mydata.upper())
     def DATA_SUBMITTED(self, mydata):
-        print "submit execute (command)", mydata
+        print("submit execute (command)", mydata)
         self.datamodelProxy.setData(mydata.upper())
 
 class DataModelProxy():
@@ -63,7 +63,7 @@
 
     def setData(self, data):
         self.realdata.data = data
-        print "setData (model) to", data
+        print("setData (model) to", data)
 #        self.sendNotification(AppFacade.DATA_CHANGED, self.realdata.data)
         self.observers.DATA_CHANGED(self.realdata.data)
 
--- Research/hexmvc/puremv_minimal_to_hexmvc/puremvcminimalwx2_as_hexmvc.py	(original)
+++ Research/hexmvc/puremv_minimal_to_hexmvc/puremvcminimalwx2_as_hexmvc.py	(refactored)
@@ -53,7 +53,7 @@
         self.observers = multicast()
         
     def DATA_CHANGED(self, mydata):
-        print "handleNotification (mediator) got", mydata
+        print("handleNotification (mediator) got", mydata)
         self.viewComponent.inputFieldTxt.SetValue(mydata)
 
     def onSubmit(self, evt):
@@ -81,7 +81,7 @@
         return self.realdata.someinfo
     @data.setter
     def data(self, value):
-        print "setData (model) to", value
+        print("setData (model) to", value)
         self.realdata.someinfo = value
         self.observers.DATA_CHANGED(self.data)
 
@@ -95,7 +95,7 @@
         self.mydata = mydata
 
     def execute(self):
-        print "CMD submit execute (command)"
+        print("CMD submit execute (command)")
         self.model.data = self.mydata.upper()
 
 class Controller():
@@ -134,5 +134,5 @@
     # Start Gui
     wxapp.MainLoop()
     
-    print "DONE"     
+    print("DONE")     
    
--- Research/layout force spring/geometry_experiments.py	(original)
+++ Research/layout force spring/geometry_experiments.py	(refactored)
@@ -41,7 +41,7 @@
         def remove_duplicates(lzt):
             d = {}
             for x in lzt: d[tuple(x)]=x
-            return d.values()
+            return list(d.values())
         result = [r for r in result if r != None]
         result = remove_duplicates(result)
         return result
@@ -80,7 +80,7 @@
         point1[Y] -= 1
         point2[Y] += 1
     
-    print point1, point2
+    print(point1, point2)
     return point1[X], point1[Y], point2[X], point2[Y], 
 
 
@@ -113,7 +113,7 @@
         point1[Y] -= 1
         point2[Y] += 1
     
-    print point1, point2
+    print(point1, point2)
     return point1[X], point1[Y], point2[X], point2[Y], 
 
 
@@ -235,14 +235,14 @@
     a = Node('A', 0, 0, 4, 4)
     c = Node('C', 2, 6, 4, 2)
     res = CalcEdgeBounds_USING_TRIG(a,c)
-    print res
+    print(res)
     assert [str(round(f,2)) for f in res ] == ['2.8', '4.0', '3.6', '6.0']
     CalcEdgeBounds(a,c)
     
     # Handle feeding in swapped around parameters - algorithm should be
     # resilient and figure out who is on top
     res = CalcEdgeBounds_USING_TRIG(c,a)
-    print res
+    print(res)
     assert [str(round(f,2)) for f in res ] == ['2.8', '4.0', '3.6', '6.0']
     CalcEdgeBounds(c,a)
     
@@ -250,7 +250,7 @@
     a = Node('A', 2, 0, 4, 4)
     c = Node('C', 0, 6, 4, 2)
     res = CalcEdgeBounds_USING_TRIG(a,c)
-    print res
+    print(res)
     assert [str(round(f,2)) for f in res ] == ['2.4', '4.0', '3.2', '6.0']
     CalcEdgeBounds(a,c)
 
@@ -258,12 +258,12 @@
     a = Node('A', 0, 0, 4, 4)
     c = Node('C', 0, 6, 4, 4)
     res = CalcEdgeBounds_USING_TRIG(a,c,vertical_edge_aware=False)
-    print res
+    print(res)
     assert [str(round(f,2)) for f in res ] == ['2.0', '4.0', '2.0', '6.0']
     CalcEdgeBounds(a,c)
 
     res = CalcEdgeBounds_USING_TRIG(a,c,)
-    print res
+    print(res)
     assert [str(round(f,2)) for f in res ] == ['1.0', '4.0', '3.0', '6.0']
     CalcEdgeBounds(a,c)
 
@@ -274,14 +274,14 @@
     a = Node('A', 0, 0, 4, 4)
     c = Node('C', 6, 1, 4, 4)
     res = CalcEdgeBounds_USING_TRIG(a,c,vertical_edge_aware=False)
-    print res
+    print(res)
     #assert [str(round(f,2)) for f in res ] == ['4.0', '1.8', '6.0', '2.2']  # 1.8 and 2.2 are guesses
     CalcEdgeBounds(a,c)
 
     # two nodes side by side case 2, c slightly higer than a - just swap params to test -  - TRIG version not
     # handling this yet, abandoned as CalcEdgeBounds() handles it nicely.
     res = CalcEdgeBounds_USING_TRIG(c,a,vertical_edge_aware=False)
-    print res
+    print(res)
     #assert [str(round(f,2)) for f in res ] == ['4.0', '1.8', '6.0', '2.2']  # 1.8 and 2.2 are guesses
     CalcEdgeBounds(c,a)
 
@@ -289,7 +289,7 @@
     a = Node('A', 0, 0, 4, 4)
     c = Node('C', 6, 0, 4, 4)
     res = CalcEdgeBounds_USING_TRIG(a,c,vertical_edge_aware=False)
-    print res
+    print(res)
     # would otherwise be (4, 2, 6, 2) with both y's the same
     assert [str(round(f,2)) for f in res ] == ['4.0', '1.0', '6.0', '3.0']
     CalcEdgeBounds(a,c)
@@ -298,6 +298,6 @@
     c = Node('C', 6, 3, 4, 2)
     CalcEdgeBounds(a,c)
     
-    print "-"*80
-        
-    print "done"
+    print("-"*80)
+        
+    print("done")
--- Research/layout force spring/gui.py	(original)
+++ Research/layout force spring/gui.py	(refactored)
@@ -3,7 +3,7 @@
 import wx
 import wx.lib.ogl as ogl
 import time
-import thread
+import _thread
 import random
 
 import sys
@@ -74,7 +74,7 @@
         
         newpos = getpos(shape) # (int(shape.GetX()), int(shape.GetY()))
 
-        print shape.node.id, "moved from", oldpos, "to", newpos
+        print(shape.node.id, "moved from", oldpos, "to", newpos)
         
         # Adjust the GraphNode to match the shape x,y
         shape.node.left, shape.node.top = newpos
@@ -97,7 +97,7 @@
         ogl.ShapeEvtHandler.OnSizingEndDragLeft(self, pt, x, y, keys, attch)
         
         width, height = shape.GetBoundingBoxMin()
-        print shape.node, "resized to", width, height
+        print(shape.node, "resized to", width, height)
         #print shape.node.id, shape.node.left, shape.node.top, "resized to", width, height
         # Adjust the GraphNode to match the shape x,y
         shape.node.width, shape.node.height = width, height
@@ -163,7 +163,7 @@
 
     def OnResizeFrame (self, event):   # ANDY  interesting - GetVirtualSize grows when resize frame
         frame = self.oglcanvas.GetTopLevelParent()
-        print "frame resize", frame.GetClientSize()
+        print("frame resize", frame.GetClientSize())
         self.coordmapper.Recalibrate(frame.GetClientSize()) # may need to call self.CalcVirtSize() if scrolled window
    
     def DeselectAllShapes(self):
@@ -194,7 +194,7 @@
         selected = [s for s in self.oglcanvas.GetDiagram().GetShapeList() if s.Selected()]
         if selected:
             shape = selected[0]
-            print 'delete', shape.node.id
+            print('delete', shape.node.id)
 
             # model
             self.graph.DeleteNodeById(shape.node.id)
@@ -208,31 +208,31 @@
     def NewEdgeMarkFrom(self):
         selected = [s for s in self.oglcanvas.GetDiagram().GetShapeList() if s.Selected()]
         if not selected:
-            print "Please select a node"
+            print("Please select a node")
             return
         
         self.new_edge_from = selected[0].node
-        print "From", self.new_edge_from.id
+        print("From", self.new_edge_from.id)
 
     def NewEdgeMarkTo(self):
         selected = [s for s in self.oglcanvas.GetDiagram().GetShapeList() if s.Selected()]
         if not selected:
-            print "Please select a node"
+            print("Please select a node")
             return
         
         tonode = selected[0].node
-        print "To", tonode.id
+        print("To", tonode.id)
         
         if self.new_edge_from == None:
-            print "Please set from node first"
+            print("Please set from node first")
             return
         
         if self.new_edge_from.id == tonode.id:
-            print "Can't link to self"
+            print("Can't link to self")
             return
         
         if not self.graph.FindNodeById(self.new_edge_from.id):
-            print "From node %s doesn't seem to be in graph anymore!" % self.new_edge_from.id
+            print("From node %s doesn't seem to be in graph anymore!" % self.new_edge_from.id)
             return
         
         edge = self.graph.AddEdge(self.new_edge_from, tonode, weight=None)
@@ -245,7 +245,7 @@
 
         if event.GetWheelRotation() < 0:
             self.stage2()
-            print self.overlap_remover.GetStats()
+            print(self.overlap_remover.GetStats())
         else:
             self.stateofthenation()
 
@@ -270,20 +270,20 @@
         elif keycode == wx.WXK_RIGHT:
             if self.coordmapper.scale > 0.8:
                 self.ChangeScale(-0.2, remap_world_to_layout=event.ShiftDown(), removeoverlaps=not event.ControlDown())
-                print "expansion ", self.coordmapper.scale
+                print("expansion ", self.coordmapper.scale)
             else:
-                print "Max expansion prevented.", self.coordmapper.scale
-            print "LL/raw %d/%d" % (len(self.graph.CountLineOverLineIntersections(ignore_nodes=False)), \
-                                                len(self.graph.CountLineOverLineIntersections(ignore_nodes=True)))
+                print("Max expansion prevented.", self.coordmapper.scale)
+            print("LL/raw %d/%d" % (len(self.graph.CountLineOverLineIntersections(ignore_nodes=False)), \
+                                                len(self.graph.CountLineOverLineIntersections(ignore_nodes=True))))
             
         elif keycode == wx.WXK_LEFT:
             if self.coordmapper.scale < 3:
                 self.ChangeScale(0.2, remap_world_to_layout=event.ShiftDown(), removeoverlaps=not event.ControlDown())
-                print "contraction ", self.coordmapper.scale
+                print("contraction ", self.coordmapper.scale)
             else:
-                print "Min expansion thwarted.", self.coordmapper.scale
-            print "LL/raw %d/%d" % (len(self.graph.CountLineOverLineIntersections(ignore_nodes=False)), \
-                                                len(self.graph.CountLineOverLineIntersections(ignore_nodes=True)))
+                print("Min expansion thwarted.", self.coordmapper.scale)
+            print("LL/raw %d/%d" % (len(self.graph.CountLineOverLineIntersections(ignore_nodes=False)), \
+                                                len(self.graph.CountLineOverLineIntersections(ignore_nodes=True))))
             
         elif keycode == wx.WXK_DELETE:
             self.DeleteSelectedNode()
@@ -357,11 +357,11 @@
 
     def DumpStatus(self):
         #print "-"*50
-        print "scale", self.coordmapper.scale
-        print "line-line intersections", len(self.graph.CountLineOverLineIntersections())
-        print "node-node overlaps", self.overlap_remover.CountOverlaps()
-        print "line-node crossings", self.graph.CountLineOverNodeCrossings()['ALL']/2 #, self.graph.CountLineOverNodeCrossings()
-        print "bounds", self.graph.GetBounds()
+        print("scale", self.coordmapper.scale)
+        print("line-line intersections", len(self.graph.CountLineOverLineIntersections()))
+        print("node-node overlaps", self.overlap_remover.CountOverlaps())
+        print("line-node crossings", self.graph.CountLineOverNodeCrossings()['ALL']/2) #, self.graph.CountLineOverNodeCrossings()
+        print("bounds", self.graph.GetBounds())
         
     def draw(self, translatecoords=True):
         self.stage1(translatecoords=translatecoords)
@@ -590,7 +590,7 @@
         self.LoadGraph(GRAPH_INITIALBOOT)
  
     def OnSaveGraphToConsole(self, event):
-        print self.graph.GraphToString()
+        print(self.graph.GraphToString())
 
     def OnSaveGraph(self, event):
         frame = self.oglcanvas.GetTopLevelParent()
@@ -657,13 +657,13 @@
         
         for i in range(1,50):
             if self.need_abort:
-                print "aborted."
+                print("aborted.")
                 return
             wx.CallAfter(self.stage2)
             #print '*',
             #wx.CallAfter(self.DoStuff)
             time.sleep(2)   # lets events through to the main wx thread and paints/messages get through ok
-        print "Done."
+        print("Done.")
         
         """
         print "Task started"
--- Research/layout force spring/gui_text.py	(original)
+++ Research/layout force spring/gui_text.py	(refactored)
@@ -21,10 +21,10 @@
             self.drawEdge(edge)
 
     def drawNode(self, node):
-        print node
+        print(node)
        
     def drawEdge(self, edge):
-        print "Edge: from (%d, %d) to (%d, %d)" % (edge['source'].left, edge['source'].top, edge['target'].left, edge['target'].top)
+        print("Edge: from (%d, %d) to (%d, %d)" % (edge['source'].left, edge['source'].top, edge['target'].left, edge['target'].top))
 
 
 if __name__ == '__main__':
@@ -47,13 +47,13 @@
 
     def dump():
         for node in g.nodes:
-            print node, "layout info:", (node.layoutPosX, node.layoutPosY)
+            print(node, "layout info:", (node.layoutPosX, node.layoutPosY))
 
-    print "layout pass 1"
+    print("layout pass 1")
     layouter.layout()
     dump()
 
-    print "layout pass 2"
+    print("layout pass 2")
     layouter.layout()
     dump()
 
@@ -80,11 +80,11 @@
     # move some shapes in the real world
     a = g.FindNodeById('A')
     a.left += 100
-    print "Moved", a
+    print("Moved", a)
     
     # Gonna do another layout (after having just done a world draw) so need to update the layout positions
     r.AllToLayoutCoords()
-    print "layout pass 3"
+    print("layout pass 3")
     layouter.layout()
     dump()
 
@@ -92,5 +92,5 @@
     r.AllToWorldCoords()
     r.draw()
 
-    print 'Done'
+    print('Done')
 
--- Research/layout force spring/somepythonbug1.py	(original)
+++ Research/layout force spring/somepythonbug1.py	(refactored)
@@ -13,4 +13,4 @@
 b.Do()
 b.Do(param=[])
 
-print "Done"
+print("Done")
--- Research/misc/colorizePython.py	(original)
+++ Research/misc/colorizePython.py	(refactored)
@@ -3,7 +3,7 @@
 """
 
 # Imports
-import cgi, string, sys, cStringIO
+import cgi, string, sys, io
 import keyword, token, tokenize
 
 
@@ -50,23 +50,25 @@
 
         # parse the source and write it
         self.pos = 0
-        text = cStringIO.StringIO(self.raw)
+        text = io.StringIO(self.raw)
         self.out.write('<pre><font face="Lucida,Courier New">')
         try:
             tokenize.tokenize(text.readline, self)
-        except tokenize.TokenError, ex:
+        except tokenize.TokenError as ex:
             msg = ex[0]
             line = ex[1][0]
             self.out.write("<h3>ERROR: %s</h3>%s\n" % (
                 msg, self.raw[self.lines[line]:]))
         self.out.write('</font></pre>')
 
-    def __call__(self, toktype, toktext, (srow,scol), (erow,ecol), line):
+    def __call__(self, toktype, toktext, xxx_todo_changeme, xxx_todo_changeme1, line):
         """ Token handler.
         """
+        (srow,scol) = xxx_todo_changeme
+        (erow,ecol) = xxx_todo_changeme1
         if 0:
-            print "type", toktype, token.tok_name[toktype], "text", toktext,
-            print "start", srow,scol, "end", erow,ecol, "<br>"
+            print("type", toktype, token.tok_name[toktype], "text", toktext, end=' ')
+            print("start", srow,scol, "end", erow,ecol, "<br>")
 
         # calculate new positions
         oldpos = self.pos
@@ -110,7 +112,7 @@
     FILENAME_PY = FILENAME+'.py'
     FILENAME_HTML = FILENAME+'.html'
     
-    print "Formatting..."
+    print("Formatting...")
 
     # open own source
     source = open(FILENAME_PY).read()
--- Research/misc/prtok.py	(original)
+++ Research/misc/prtok.py	(refactored)
@@ -35,9 +35,9 @@
 def tokeneater(type, tokstr, start, end, line, symdir=symdir):
     if (type==token.NAME):
         TOKSTR = tokstr.upper()  #should show up for this file
-        if symdir.has_key(TOKSTR):
+        if TOKSTR in symdir:
             d = symdir[TOKSTR]
-            if d.has_key(tokstr):
+            if tokstr in d:
                 d[tokstr] += 1
             else:
                 d[tokstr] = 1
@@ -51,30 +51,30 @@
 
         header = '\n====< '+filename+' >===='
         singlecase = []
-        multicase = [key for key in symdir.keys()
+        multicase = [key for key in list(symdir.keys())
                         if len(symdir[key])>1 or singlecase.append(key)]
         for key in multicase:
             if header:
-                print header
-                print '  (Multicase symbols)'
+                print(header)
+                print('  (Multicase symbols)')
                 header = None
-            for name, freq in symdir[key].items():
-                print '%15s:%-3s'% (name, freq),
-            print
-        if header: print header; header = None
-        print '  (Singlecase symbols)'
-        byfreq = [symdir[k].items()[0] for k in singlecase]
+            for name, freq in list(symdir[key].items()):
+                print('%15s:%-3s'% (name, freq), end=' ')
+            print()
+        if header: print(header); header = None
+        print('  (Singlecase symbols)')
+        byfreq = [list(symdir[k].items())[0] for k in singlecase]
         byfreq = [(n,k) for k,n in byfreq]
         byfreq.sort()
         npr = 0
         for freq, key in byfreq:
                 if header:
-                    print header
+                    print(header)
                     header = None
-                print '%15s:%-3s'% (key, freq),
-                if npr%4==3: print
+                print('%15s:%-3s'% (key, freq), end=' ')
+                if npr%4==3: print()
                 npr +=1
-        print
+        print()
 
 """
 ========================================================================
--- Research/misc information and doco/ppcomp.py	(original)
+++ Research/misc information and doco/ppcomp.py	(refactored)
@@ -5,7 +5,7 @@
 IND = '  '
 def ppcomp(s):
     out = []; wrout = out.append # sys.stdout.write
-    sp = [s.strip() for s in rxb.split(`compiler.transformer.parse(s)`)]
+    sp = [s.strip() for s in rxb.split(repr(compiler.transformer.parse(s)))]
     nest = 0
     for t in sp:
         if not t: continue
@@ -42,7 +42,7 @@
     import sys
     s=''
     if len(sys.argv)<2:
-        print 'Enter Python source and end with ^Z'
+        print('Enter Python source and end with ^Z')
         s = sys.stdin.read()
     elif sys.argv[1]=='-f' and len(sys.argv)>2:
         f = file(sys.argv[2])
@@ -50,15 +50,15 @@
         f.close()
     elif sys.argv[1]=='-i':
         s='anything'
-        print 'Enter expression (or just press Enter to quit):'
+        print('Enter expression (or just press Enter to quit):')
         while s:
-            s = raw_input('Expr> ').rstrip()
-            if s: print ppcomp(s)
+            s = input('Expr> ').rstrip()
+            if s: print(ppcomp(s))
     elif sys.argv[1]=='-h':
-        print """
+        print("""
 Usage:  python ppcomp.py [-i | -h | -f filename | expression ]
         (nothing specified reads stdin, -i prompts, -h prints this, else the obvious)
-"""
+""")
     else:
         s = sys.argv[1]
-    if s: print ppcomp(s)
+    if s: print(ppcomp(s))
--- Research/networkx graphs/andylayoutuml.py	(original)
+++ Research/networkx graphs/andylayoutuml.py	(refactored)
@@ -16,18 +16,18 @@
 G.add_edge("there", "again",weight=0.4)
 G.add_edge("there", "please",weight=0.2)
 G.add_edge("hello", "aa",weight=0.2)
-print G.nodes()
-print G.edges()
+print(G.nodes())
+print(G.edges())
 #print G.info()
 
-print dir(lay)
+print(dir(lay))
 res01 = lay.circular_layout(G)
-print "res01", res01
-print
+print("res01", res01)
+print()
 res02 = lay.spring_layout(G)
-print "res02", res02
-print
-print "sorted! "
+print("res02", res02)
+print()
+print("sorted! ")
 
 #P.topological_sort(G)
 #P.topological_sort_recursive(G)
@@ -98,7 +98,7 @@
 
 def calcMinMax(res):
     maxx = maxy = minx = miny = 0
-    for k in res.keys():
+    for k in list(res.keys()):
         arr = res[k]
         x, y = arr[0], arr[1]
         if x > maxx:
@@ -109,8 +109,8 @@
             maxy = y
         if y < miny:
             miny = y
-    print "x ranges from " + str(minx) + " to " + str(maxx)
-    print "y ranges from " + str(miny) + " to " + str(maxy)
+    print("x ranges from " + str(minx) + " to " + str(maxx))
+    print("y ranges from " + str(miny) + " to " + str(maxy))
     
 """
 G2=NX.Graph()
@@ -139,7 +139,7 @@
 
 
 def CollectY(res):
-    ys = [ v[1] for v in res.values() ]
+    ys = [ v[1] for v in list(res.values()) ]
 
     # remove duplicates
     
@@ -150,15 +150,15 @@
     ys.sort()
     ys.reverse()
     return ys
-print CollectY(res02)
+print(CollectY(res02))
 
 def CollectXsAtY(res, y):
-    xs = [ v[0] for v in res.values() if v[1] == y ]
+    xs = [ v[0] for v in list(res.values()) if v[1] == y ]
     xs.sort()
     return xs
 
 def FindName(res, x, y):
-    for (k,v) in res.iteritems():
+    for (k,v) in res.items():
         if v[0] == x and v[1] == y:
             return k
     return None
@@ -185,12 +185,12 @@
     nexty = 200
     newres = {}
     
-    print "ReMap"
+    print("ReMap")
     myres = SortRes(res)
     for (y, xs) in myres:
         for (node, x) in xs:
-            print node, x, y, "   => ",
-            print nextx, nexty
+            print(node, x, y, "   => ", end=' ')
+            print(nextx, nexty)
             newres[node] = (nextx, nexty)
             nextx += sizes[node][0] + SPACING
 
@@ -201,10 +201,10 @@
     return newres
 
 
-print
-print "SortRes02"
-print SortRes(res02)
-print
+print()
+print("SortRes02")
+print(SortRes(res02))
+print()
 
 
 res55 = { 'A' : (0.0, 0.0),
@@ -215,18 +215,18 @@
             'C' : (10, 10) }
 
 import pprint
-print "SortRes55"
+print("SortRes55")
 pprint.pprint( SortRes(res55) )
-print
+print()
 
 
 coords55 = ReMap(res55, sizes55)
-print
-print coords55
+print()
+print(coords55)
 
 sizes55 = {'wxPrintout': (106.0, 36.0), 'MyPrintout': (152.0, 227.0)}
 res55 = {'wxPrintout': [ 0.71233445,  3.11540857], 'MyPrintout': [-0.58540195, -2.45158964]}
 coords55 = ReMap(res55, sizes55)
-print
-print coords55
-
+print()
+print(coords55)
+
--- Research/networkx graphs/atlas.py	(original)
+++ Research/networkx graphs/atlas.py	(refactored)
@@ -58,9 +58,9 @@
 
     G=atlas6()
 
-    print("graph has %d nodes with %d edges"\
-          %(nx.number_of_nodes(G),nx.number_of_edges(G)))
-    print(nx.number_connected_components(G),"connected components")
+    print(("graph has %d nodes with %d edges"\
+          %(nx.number_of_nodes(G),nx.number_of_edges(G))))
+    print((nx.number_connected_components(G),"connected components"))
 
 
     try:
--- Research/networkx graphs/chess_masters.py	(original)
+++ Research/networkx graphs/chess_masters.py	(refactored)
@@ -78,28 +78,28 @@
     ngames=G.number_of_edges()
     nplayers=G.number_of_nodes()
 
-    print("Loaded %d chess games between %d players\n"\
-                   % (ngames,nplayers))
+    print(("Loaded %d chess games between %d players\n"\
+                   % (ngames,nplayers)))
 
     # identify connected components
     # of the undirected version
     Gcc=nx.connected_component_subgraphs(G.to_undirected())
     if len(Gcc)>1:
         print("Note the disconnected component consisting of:")
-        print(Gcc[1].nodes())    
+        print((Gcc[1].nodes()))    
 
     # find all games with B97 opening (as described in ECO)
     openings=set([game_info['ECO'] 
                   for (white,black,game_info) in G.edges(data=True)])
-    print("\nFrom a total of %d different openings,"%len(openings))
+    print(("\nFrom a total of %d different openings,"%len(openings)))
     print('the following games used the Sicilian opening')
     print('with the Najdorff 7...Qb6 "Poisoned Pawn" variation.\n')
 
     for (white,black,game_info) in G.edges(data=True):
         if game_info['ECO']=='B97':
-           print(white,"vs",black)
+           print((white,"vs",black))
            for k,v in list(game_info.items()):
-               print("   ",k,": ",v)
+               print(("   ",k,": ",v))
            print("\n")
 
 
--- Research/ogl tests 01/OGLlike.py	(original)
+++ Research/ogl tests 01/OGLlike.py	(refactored)
@@ -30,7 +30,7 @@
 
 def menuMaker(frame, menus):
     menubar = MenuBar()
-    for m,n in menus.items():
+    for m,n in list(menus.items()):
         menu = Menu()
         menubar.Append(menu,m)
         for x in n:
@@ -54,7 +54,7 @@
         try:
             pickle.dump(self.shapes,open(self.file,'w'))
         except:
-            print "problem saving this diagram"
+            print("problem saving this diagram")
  
     def LoadFile(self,file=None):
         if file is None:
@@ -62,7 +62,7 @@
         try:
             self.shapes = pickle.load(open(file))
         except:
-            print "problem loading this diagram"
+            print("problem loading this diagram")
 
     def AddShape(self, shape, after=None):
         if after:
@@ -148,8 +148,8 @@
         dc.SetBrush(Brush(self.fill[0], SOLID))
 
     def move(self,x,y):
-        self.x = map((lambda v: v+x), self.x)
-        self.y = map((lambda v: v+y), self.y)
+        self.x = list(map((lambda v: v+x), self.x))
+        self.y = list(map((lambda v: v+y), self.y))
 
     def Copy(self):
         return copy.deepcopy(self)
@@ -163,7 +163,7 @@
         Shape.draw(self,dc)
         dc.DrawLine(self.x[0], self.y[0],self.x[1], self.y[1])
         if DEBUG_DRAWLINE:
-            print "DrawLine", self.x[0], self.y[0],self.x[1], self.y[1]
+            print("DrawLine", self.x[0], self.y[0],self.x[1], self.y[1])
 
     def HitTest(self, x, y):
         if x < min(self.x)-3:return False
@@ -241,8 +241,8 @@
             self.y[0] += y
         else:
             # Future possibility (original code)
-            self.x = map((lambda v: v+x), self.x)   # add x to each member of list self.x
-            self.y = map((lambda v: v+y), self.y)   # add y to each member of list self.y
+            self.x = list(map((lambda v: v+x), self.x))   # add x to each member of list self.x
+            self.y = list(map((lambda v: v+y), self.y))   # add y to each member of list self.y
         self.graphic.move(x,y)
 
     def HitTest(self, x, y):
@@ -336,7 +336,7 @@
             mouseY = pt[1] - self.GetScreenPosition().y
             point = (mouseX, mouseY)
             # print "pt=%s mouse=%s,%s" % (pt, mouseX, mouseY)
-            print "%s,%s %s" % (mouseX, mouseY, self.shapeFromPoint(point))
+            print("%s,%s %s" % (mouseX, mouseY, self.shapeFromPoint(point)))
         self.Refresh()
 
     def onPaintEvent(self, event):   
@@ -445,7 +445,7 @@
             x = point[0] - self.currentPoint[0]
             y = point[1] - self.currentPoint[1]
             if DEBUG_DRAG:
-                print 'Dragging %s mouse at %s currentPoint is %s thus moveto difference is %s,%s' % (self.getSelectedShapes(), point, self.currentPoint, x, y)
+                print('Dragging %s mouse at %s currentPoint is %s thus moveto difference is %s,%s' % (self.getSelectedShapes(), point, self.currentPoint, x, y))
             for i in self.getSelectedShapes():
                 i.move(x,y)
             self.currentPoint = point
@@ -740,8 +740,8 @@
                 point = shape.getCentre()
             self.x[0],self.y[0] = point
             if DEBUG_CONNECT:
-                print "from shape output port %s at %s" % (portnum, point),
-                if not self.output: print
+                print("from shape output port %s at %s" % (portnum, point), end=' ')
+                if not self.output: print()
         if self.output:
             # self.x[1],self.y[1] = self.output[SHAPE].getPort('input',self.output[PORT])
 
@@ -750,7 +750,7 @@
             point = shape.getCentre()
             self.x[1],self.y[1] = point
             if DEBUG_CONNECT:
-                print "to shape input port %s at %s" % (portnum, point)
+                print("to shape input port %s at %s" % (portnum, point))
         LineShape.draw(self,dc)
 
 
@@ -895,7 +895,7 @@
         self.label='Code'
                 
     def OnLeftDClick(self,event):
-        exec str(self.code)
+        exec(str(self.code))
 
 class ContainerBlock(Block,Diagram):
 
@@ -908,7 +908,7 @@
         self.fill= ['GREEN']
 
     def OnLeftDClick(self,event):
-        print "OnLeftDClick"
+        print("OnLeftDClick")
         f = CodeFrame(self)
         f.SetTitle(self.label)
 
@@ -950,7 +950,7 @@
             items: list of ConnectionShape instances (really, only one)
         """
         if DEBUG_INODE_CONNECT:
-            print "inode leftup", items, "ConnectionShape.input", items[0].input, "ConnectionShape.output", items[0].output
+            print("inode leftup", items, "ConnectionShape.input", items[0].input, "ConnectionShape.output", items[0].output)
         if len(items)==1 and isinstance(items[0],ConnectionShape):
             connection_shape = items[0]
             if connection_shape.output is None:  # means its not connected to anything
@@ -960,7 +960,7 @@
         """
         Dragging from an input doesn't make sense?
         """
-        print "INode - Dragging from an input doesn't make sense? unless repositioning to re-attach?", self
+        print("INode - Dragging from an input doesn't make sense? unless repositioning to re-attach?", self)
         self.cf.deselect()
         ci = ConnectionShape()
         self.cf.container.shapes.insert(0, ci)
@@ -988,7 +988,7 @@
         Note the subsequent multiple move() calls due to the OnMotion() goes to the
         ConnectionShape not to the ONode.
         """
-        print "ONode initiating a connection from output node", self
+        print("ONode initiating a connection from output node", self)
         self.cf.deselect()
         ci = ConnectionShape()
         self.cf.diagram.shapes.insert(0, ci)
@@ -999,10 +999,10 @@
 
     def leftUp(self,items):
         # Not sure the use of this, I don't think the setInput() ever gets executed
-        print "onode leftup", items
+        print("onode leftup", items)
         if len(items)==1 and isinstance(items[0],ConnectionShape):
             if items[0].input is None:
-                print "onode leftup, setting input", items
+                print("onode leftup, setting input", items)
                 items[0].setInput(self.item,self.index)
 
 
@@ -1102,7 +1102,7 @@
     def acceptProp(self,event):
         """Write the edited value back into the property"""
         idx=self.list.GetFocusedItem()
-        print idx
+        print(idx)
         prop = self.list.GetItem(idx,0).GetText()  # calc property name
 
         if get_type(self.text.GetValue()) == str or self.text.GetNumberOfLines() > 1:
--- Research/ogl tests 01/OGLlike_original.py	(original)
+++ Research/ogl tests 01/OGLlike_original.py	(refactored)
@@ -18,7 +18,7 @@
 
 def menuMaker(frame, menus):
     menubar = wxMenuBar()
-    for m,n in menus.items():
+    for m,n in list(menus.items()):
         menu = wxMenu()
         menubar.Append(menu,m)
         for x in n:
@@ -40,7 +40,7 @@
         try:
             pickle.dump(self.shapes,open(self.file,'w'))
         except:
-            print "problem saving this diagram"
+            print("problem saving this diagram")
  
     def LoadFile(self,file=None):
         if file is None:
@@ -48,7 +48,7 @@
         try:
             self.shapes = pickle.load(open(file))
         except:
-            print "problem loading this diagram"
+            print("problem loading this diagram")
 
     def AddShape(self, shape, after=None):
         if after:
@@ -134,8 +134,8 @@
         dc.SetBrush(wxBrush(self.fill[0], wxSOLID))
 
     def move(self,x,y):
-        self.x = map((lambda v: v+x), self.x)
-        self.y = map((lambda v: v+y), self.y)
+        self.x = list(map((lambda v: v+x), self.x))
+        self.y = list(map((lambda v: v+y), self.y))
 
     def Copy(self):
         return copy.deepcopy(self)
@@ -201,8 +201,8 @@
         self.graphic.y=[y-size,y+size]
 
     def move(self,x,y):
-        self.x = map((lambda v: v+x), self.x)
-        self.y = map((lambda v: v+y), self.y)
+        self.x = list(map((lambda v: v+x), self.x))
+        self.y = list(map((lambda v: v+y), self.y))
         self.graphic.move(x,y)
 
     def HitTest(self, x, y):
@@ -583,7 +583,7 @@
         self.label='Code'
                 
     def OnLeftDClick(self,event):
-        exec str(self.code)
+        exec(str(self.code))
 
 class ContainerBlock(Block,Diagram):
 
@@ -724,7 +724,7 @@
         prop = self.list.GetItem(idx,0).GetText()
         lines = self.text.GetNumberOfLines()
         if lines ==1:
-            exec 'self.item.' + prop +'='+self.text.GetValue()
+            exec('self.item.' + prop +'='+self.text.GetValue())
         else:
             p=setattr(self.item,prop,self.text.GetValue())
             
--- Research/ogl tests 01/OGLlike_pylab.py	(original)
+++ Research/ogl tests 01/OGLlike_pylab.py	(refactored)
@@ -77,7 +77,7 @@
     try:
       pickle.dump(self.shapes,open(file,'w'))
     except:
-      print "problem saving this diagram"
+      print("problem saving this diagram")
 
   def LoadFile(self,file=None):
     if file is None:
@@ -85,7 +85,7 @@
     try:
       self.shapes = pickle.load(open(file))
     except:
-      print "problem loading this diagram"
+      print("problem loading this diagram")
 
   def AddShape ( self, shape, after = None ) :
     if after:
@@ -221,7 +221,7 @@
   def Set_Coordinates ( self, LB = (-100,-100),
                               WH = ( 200, None ),
                               RT = None ) :
-    print LB,WH,RT
+    print(LB,WH,RT)
     if RT :
       if ( len ( RT ) > 1 ) and RT [1] :
         h = RT [1] - LB [1]
@@ -333,27 +333,27 @@
   # *********************************************************
   # *********************************************************
   def Print_All ( self ) :
-    print 'Shapes: ****************************************'
+    print('Shapes: ****************************************')
     for item in self.diagram.shapes:
-      print ' ', str ( item.__class__ ).split('.')[1],
+      print(' ', str ( item.__class__ ).split('.')[1], end=' ')
       if   isinstance ( item, Rectangle ) :
-        print ' : ' + item.Caption  + '  ================================='
+        print(' : ' + item.Caption  + '  =================================')
       elif isinstance ( item, Connection_Line ) :
-        print ''
-        print '    input  =', item.input
-        print '    output =', item.output
+        print('')
+        print('    input  =', item.input)
+        print('    output =', item.output)
       else :
-        print ''
-      print '    x, y, color  =', item._x, ',', item._y, ',', \
-                                  item.fill, ',', item.pen
+        print('')
+      print('    x, y, color  =', item._x, ',', item._y, ',', \
+                                  item.fill, ',', item.pen)
 
 
       for node in self.nodes:
         if node.item == item :
-          print '   ', str ( node.__class__ ).split('.')[1] + \
-                '  ---------------------------------'
-          print '      x, y, color  =', node._x, ',', node._y, ',', \
-                                        node.fill, ',', node.pen
+          print('   ', str ( node.__class__ ).split('.')[1] + \
+                '  ---------------------------------')
+          print('      x, y, color  =', node._x, ',', node._y, ',', \
+                                        node.fill, ',', node.pen)
 
   # *********************************************************
   # *********************************************************
@@ -401,7 +401,7 @@
     #print 'CANVAS UP'
     for item in self.Get_Current_Shapes ( event ):
       if isinstance ( item, INode ) :
-        print 'Canvas up', self.selectedShapes
+        print('Canvas up', self.selectedShapes)
         #shape.OnLeftUp ( event )
         """
         afhankelijk of de eerste of twede keer:
@@ -434,7 +434,7 @@
                  ( 2*x <= x0 + dx ) and \
                  ( 2*y >= y0 - dy ) and \
                  ( 2*y <= y0 + dy ) :
-                print 'GROUPING', item
+                print('GROUPING', item)
         # *********************************************************
 
       shape.leftUp ( self.select() )
@@ -718,8 +718,8 @@
   # *********************************************************
   # *********************************************************
   def move(self,x,y):
-    self._x = map((lambda v: v+x), self._x)
-    self._y = map((lambda v: v+y), self._y)
+    self._x = list(map((lambda v: v+x), self._x))
+    self._y = list(map((lambda v: v+y), self._y))
 
   # *********************************************************
   # *********************************************************
@@ -737,7 +737,7 @@
   # *********************************************************
   def SetX ( self, x ) :
     delta = x - self._x[0]
-    self._x = map ( (lambda f: f+delta), self._x)
+    self._x = list(map ( (lambda f: f+delta), self._x))
   def GetX ( self ) :
     return self._x[0]
 
@@ -745,7 +745,7 @@
   # *********************************************************
   def SetY ( self, y ) :
     delta = y - self._y[0]
-    self._y = map ( (lambda f: f+delta), self._y)
+    self._y = list(map ( (lambda f: f+delta), self._y))
   def GetY ( self ) :
     return self._y[0]
 
@@ -799,8 +799,8 @@
     self.graphic._y = [ y-size, y+size ]
 
   def move ( self, x, y ) :
-    self._x = map((lambda v: v+x), self._x)
-    self._y = map((lambda v: v+y), self._y)
+    self._x = list(map((lambda v: v+x), self._x))
+    self._y = list(map((lambda v: v+y), self._y))
     self.graphic.move(x,y)
 
   def HitTest ( self, x, y ) :
@@ -1240,7 +1240,7 @@
 # ***********************************************************************
 class t_RubberBand_Shape ( Shape ) :
   def __init__ ( self, Container_Canvas, x1=20, y1=20, x2=90, y2=90 ):
-    print x1,x2,y1,y2
+    print(x1,x2,y1,y2)
     Shape.__init__ ( self, Container_Canvas, [x1,x2] ,  [y1,y2] )
     self.Selectable = True
     self.Resizeable = True
@@ -1425,7 +1425,7 @@
       self.Caption = d.GetValue()
 
   def OnRightDown(self,event):
-    print 'right down'
+    print('right down')
 # ***********************************************************************
 
 
--- Research/ogl tests 01/andyOgl01_oldwx.py	(original)
+++ Research/ogl tests 01/andyOgl01_oldwx.py	(refactored)
@@ -107,7 +107,7 @@
 
     def OnLeftClick(self, x, y, keys = 0, attachment = 0):
         shape = self.GetShape()
-        print shape.__class__, shape.GetClassName()
+        print(shape.__class__, shape.GetClassName())
         canvas = shape.GetCanvas()
         dc = wxClientDC(canvas)
         canvas.PrepareDC(dc)
--- Research/ogl tests 01/andyOgl02_oldwx.py	(original)
+++ Research/ogl tests 01/andyOgl02_oldwx.py	(refactored)
@@ -111,7 +111,7 @@
 
     def OnLeftClick(self, x, y, keys = 0, attachment = 0):
         shape = self.GetShape()
-        print shape.__class__, shape.GetClassName()
+        print(shape.__class__, shape.GetClassName())
         canvas = shape.GetCanvas()
         dc = wxClientDC(canvas)
         canvas.PrepareDC(dc)
@@ -239,7 +239,7 @@
         ds1.SetCentreResize(0)  # Specify whether the shape is to be resized from the centre (the centre stands still) or from the corner or side being dragged (the other corner or side stands still).
         # for some reason, the shapes have to be resized to re-format theior container text
         #ds1.SetSize(200, 500)
-        print ds1.GetBoundingBoxMax()
+        print(ds1.GetBoundingBoxMax())
         ds1.SetSize(ds1.GetBoundingBoxMax()[0]+1, ds1.GetBoundingBoxMax()[1])
         ds1.ReformatRegions()
         #self.redraw()
@@ -339,7 +339,7 @@
         height = height * whiteSpaceFactor
         verticalWhiteSpace = (height-rawHeight)/(len(self.shapes)-1.0 or 2.0)
         # self.setSize(wxSize(int(width+50), int(height+50))) # fudge factors to keep some extra space
-        print 'massive size is', int(width+50), int(height+50)
+        print('massive size is', int(width+50), int(height+50))
         # DONT ACTUALLY DO ANYTHING WITH THIS INFO - yet.
 
         # distribute each generation across the width
--- Research/ogl tests 01/images_oldwx.py	(original)
+++ Research/ogl tests 01/images_oldwx.py	(refactored)
@@ -3,7 +3,7 @@
 #
 from wxPython.wx import wxImageFromStream, wxBitmapFromImage
 from wxPython.wx import wxEmptyIcon
-import cStringIO
+import io
 
 
 def getMondrianData():
@@ -20,7 +20,7 @@
     return wxBitmapFromImage(getMondrianImage())
 
 def getMondrianImage():
-    stream = cStringIO.StringIO(getMondrianData())
+    stream = io.StringIO(getMondrianData())
     return wxImageFromStream(stream)
 
 def getMondrianIcon():
@@ -70,7 +70,7 @@
     return wxBitmapFromImage(get_10s_Image())
 
 def get_10s_Image():
-    stream = cStringIO.StringIO(get_10s_Data())
+    stream = io.StringIO(get_10s_Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -106,7 +106,7 @@
     return wxBitmapFromImage(get_01c_Image())
 
 def get_01c_Image():
-    stream = cStringIO.StringIO(get_01c_Data())
+    stream = io.StringIO(get_01c_Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -197,7 +197,7 @@
     return wxBitmapFromImage(get_12h_Image())
 
 def get_12h_Image():
-    stream = cStringIO.StringIO(get_12h_Data())
+    stream = io.StringIO(get_12h_Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -283,7 +283,7 @@
     return wxBitmapFromImage(get_13d_Image())
 
 def get_13d_Image():
-    stream = cStringIO.StringIO(get_13d_Data())
+    stream = io.StringIO(get_13d_Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -1777,7 +1777,7 @@
     return wxBitmapFromImage(getBackgroundImage())
 
 def getBackgroundImage():
-    stream = cStringIO.StringIO(getBackgroundData())
+    stream = io.StringIO(getBackgroundData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -1893,7 +1893,7 @@
     return wxBitmapFromImage(getTestStarImage())
 
 def getTestStarImage():
-    stream = cStringIO.StringIO(getTestStarData())
+    stream = io.StringIO(getTestStarData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -2007,7 +2007,7 @@
     return wxBitmapFromImage(getTestStar2Image())
 
 def getTestStar2Image():
-    stream = cStringIO.StringIO(getTestStar2Data())
+    stream = io.StringIO(getTestStar2Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -2058,7 +2058,7 @@
     return wxBitmapFromImage(getTestMaskImage())
 
 def getTestMaskImage():
-    stream = cStringIO.StringIO(getTestMaskData())
+    stream = io.StringIO(getTestMaskData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -2166,7 +2166,7 @@
     return wxBitmapFromImage(getTest2Image())
 
 def getTest2Image():
-    stream = cStringIO.StringIO(getTest2Data())
+    stream = io.StringIO(getTest2Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3202,7 +3202,7 @@
     return wxBitmapFromImage(getRobinImage())
 
 def getRobinImage():
-    stream = cStringIO.StringIO(getRobinData())
+    stream = io.StringIO(getRobinData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3225,7 +3225,7 @@
     return wxBitmapFromImage(getBulb1Image())
 
 def getBulb1Image():
-    stream = cStringIO.StringIO(getBulb1Data())
+    stream = io.StringIO(getBulb1Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3255,7 +3255,7 @@
     return wxBitmapFromImage(getBulb2Image())
 
 def getBulb2Image():
-    stream = cStringIO.StringIO(getBulb2Data())
+    stream = io.StringIO(getBulb2Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3285,7 +3285,7 @@
     return wxBitmapFromImage(getCalendarImage())
 
 def getCalendarImage():
-    stream = cStringIO.StringIO(getCalendarData())
+    stream = io.StringIO(getCalendarData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3304,7 +3304,7 @@
     return wxBitmapFromImage(getDbDecImage())
 
 def getDbDecImage():
-    stream = cStringIO.StringIO(getDbDecData())
+    stream = io.StringIO(getDbDecData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3323,7 +3323,7 @@
     return wxBitmapFromImage(getDecImage())
 
 def getDecImage():
-    stream = cStringIO.StringIO(getDecData())
+    stream = io.StringIO(getDecData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3340,7 +3340,7 @@
     return wxBitmapFromImage(getPtImage())
 
 def getPtImage():
-    stream = cStringIO.StringIO(getPtData())
+    stream = io.StringIO(getPtData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3359,7 +3359,7 @@
     return wxBitmapFromImage(getDbIncImage())
 
 def getDbIncImage():
-    stream = cStringIO.StringIO(getDbIncData())
+    stream = io.StringIO(getDbIncData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3377,7 +3377,7 @@
     return wxBitmapFromImage(getIncImage())
 
 def getIncImage():
-    stream = cStringIO.StringIO(getIncData())
+    stream = io.StringIO(getIncData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3395,7 +3395,7 @@
     return wxBitmapFromImage(getNewImage())
 
 def getNewImage():
-    stream = cStringIO.StringIO(getNewData())
+    stream = io.StringIO(getNewData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3415,7 +3415,7 @@
     return wxBitmapFromImage(getOpenImage())
 
 def getOpenImage():
-    stream = cStringIO.StringIO(getOpenData())
+    stream = io.StringIO(getOpenData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3436,7 +3436,7 @@
     return wxBitmapFromImage(getCopyImage())
 
 def getCopyImage():
-    stream = cStringIO.StringIO(getCopyData())
+    stream = io.StringIO(getCopyData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3456,7 +3456,7 @@
     return wxBitmapFromImage(getPasteImage())
 
 def getPasteImage():
-    stream = cStringIO.StringIO(getPasteData())
+    stream = io.StringIO(getPasteData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3473,7 +3473,7 @@
     return wxBitmapFromImage(getTog1Image())
 
 def getTog1Image():
-    stream = cStringIO.StringIO(getTog1Data())
+    stream = io.StringIO(getTog1Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3490,7 +3490,7 @@
     return wxBitmapFromImage(getTog2Image())
 
 def getTog2Image():
-    stream = cStringIO.StringIO(getTog2Data())
+    stream = io.StringIO(getTog2Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3530,7 +3530,7 @@
     return wxBitmapFromImage(getSmilesImage())
 
 def getSmilesImage():
-    stream = cStringIO.StringIO(getSmilesData())
+    stream = io.StringIO(getSmilesData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3559,7 +3559,7 @@
     return wxBitmapFromImage(getGridBGImage())
 
 def getGridBGImage():
-    stream = cStringIO.StringIO(getGridBGData())
+    stream = io.StringIO(getGridBGData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3576,7 +3576,7 @@
     return wxBitmapFromImage(getSmallUpArrowImage())
 
 def getSmallUpArrowImage():
-    stream = cStringIO.StringIO(getSmallUpArrowData())
+    stream = io.StringIO(getSmallUpArrowData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3593,7 +3593,7 @@
     return wxBitmapFromImage(getSmallDnArrowImage())
 
 def getSmallDnArrowImage():
-    stream = cStringIO.StringIO(getSmallDnArrowData())
+    stream = io.StringIO(getSmallDnArrowData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3614,7 +3614,7 @@
     return wxBitmapFromImage(getFolder1Image())
 
 def getFolder1Image():
-    stream = cStringIO.StringIO(getFolder1Data())
+    stream = io.StringIO(getFolder1Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3634,7 +3634,7 @@
     return wxBitmapFromImage(getFolder2Image())
 
 def getFolder2Image():
-    stream = cStringIO.StringIO(getFolder2Data())
+    stream = io.StringIO(getFolder2Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3653,7 +3653,7 @@
     return wxBitmapFromImage(getFolder3Image())
 
 def getFolder3Image():
-    stream = cStringIO.StringIO(getFolder3Data())
+    stream = io.StringIO(getFolder3Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3671,7 +3671,7 @@
     return wxBitmapFromImage(getFile1Image())
 
 def getFile1Image():
-    stream = cStringIO.StringIO(getFile1Data())
+    stream = io.StringIO(getFile1Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3689,7 +3689,7 @@
     return wxBitmapFromImage(getFile2Image())
 
 def getFile2Image():
-    stream = cStringIO.StringIO(getFile2Data())
+    stream = io.StringIO(getFile2Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3709,7 +3709,7 @@
     return wxBitmapFromImage(getNoIconImage())
 
 def getNoIconImage():
-    stream = cStringIO.StringIO(getNoIconData())
+    stream = io.StringIO(getNoIconData())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -3878,7 +3878,7 @@
     return wxBitmapFromImage(getWizTest1Image())
 
 def getWizTest1Image():
-    stream = cStringIO.StringIO(getWizTest1Data())
+    stream = io.StringIO(getWizTest1Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -4057,7 +4057,7 @@
     return wxBitmapFromImage(getWizTest2Image())
 
 def getWizTest2Image():
-    stream = cStringIO.StringIO(getWizTest2Data())
+    stream = io.StringIO(getWizTest2Data())
     return wxImageFromStream(stream)
 
 #----------------------------------------------------------------------
@@ -5368,6 +5368,6 @@
     return wxBitmapFromImage(getTuxImage())
 
 def getTuxImage():
-    stream = cStringIO.StringIO(getTuxData())
+    stream = io.StringIO(getTuxData())
     return wxImageFromStream(stream)
 
--- Research/ogl tests 01/ogl_andyshape1.py	(original)
+++ Research/ogl tests 01/ogl_andyshape1.py	(refactored)
@@ -70,7 +70,7 @@
         shape.AddText("Hello there")
 
 
-        print [getpos(shape) for shape in canvas.GetDiagram().GetShapeList()]
+        print([getpos(shape) for shape in canvas.GetDiagram().GetShapeList()])
         
         
         F = 'img_uml01.png'
--- Research/ogl tests 01/ogl_animate1.py	(original)
+++ Research/ogl tests 01/ogl_animate1.py	(refactored)
@@ -44,7 +44,7 @@
         
     def OnRightButtonEvent(self, event):
         if event.ShiftDown():
-            print "aborting"
+            print("aborting")
             self.need_abort = True
         else:
             self.Start()
@@ -62,12 +62,12 @@
             if x > 0 and not self.need_abort:
                 wx.FutureCall(1, self.DoSomeLongTask, (x,y,z))
             else:
-                print "Done."
+                print("Done.")
         else:
-            print "aborted."
+            print("aborted.")
 
     def DoStuff(self):
-        print ".",
+        print(".", end=' ')
         TECHNIQUE = "simple" # "hybrid" # "smart" # "simple"
         shape = self.mycircle
         
--- Research/ogl tests 01/ogl_animate1_threaded.py	(original)
+++ Research/ogl tests 01/ogl_animate1_threaded.py	(refactored)
@@ -3,7 +3,7 @@
 
 import wx
 import wx.lib.ogl as ogl
-import thread
+import _thread
 
 class AppFrame(wx.Frame):
     def __init__(self):
@@ -41,11 +41,11 @@
 
     def Start(self):
         self.need_abort = False
-        thread.start_new_thread(self.DoSomeLongTask, ())
+        _thread.start_new_thread(self.DoSomeLongTask, ())
         
     def OnRightButtonEvent(self, event):
         if event.ShiftDown():
-            print "aborting"
+            print("aborting")
             self.need_abort = True
         else:
             self.Start()
@@ -55,15 +55,15 @@
 
         for i in range(1,40):
             if self.need_abort:
-                print "aborted."
+                print("aborted.")
                 return
             wx.CallAfter(self.DoStuff)
             time.sleep(0.2)   # lets events through to the main wx thread and paints/messages get through ok
-        print "Done."
+        print("Done.")
             
 
     def DoStuff(self):
-        print ".",
+        print(".", end=' ')
         TECHNIQUE = "simple" # "hybrid" # "smart" # "simple"
         shape = self.mycircle
         
--- Research/ogl tests 01/ogl_mousechasing.py	(original)
+++ Research/ogl tests 01/ogl_mousechasing.py	(refactored)
@@ -20,7 +20,7 @@
                         The dragging is done here. 
                         """
                         shape = self.GetShape()
-                        print shape.__class__, shape.GetClassName(), shape.a
+                        print(shape.__class__, shape.GetClassName(), shape.a)
                         canvas = shape.GetCanvas()
                         dc = wx.ClientDC(canvas)
                         canvas.PrepareDC(dc)
--- Research/ogl tests 01/ogl_official_demo1.py	(original)
+++ Research/ogl tests 01/ogl_official_demo1.py	(refactored)
@@ -185,7 +185,7 @@
 
 
     def OnSizingEndDragLeft(self, pt, x, y, keys, attch):
-        print "***", self
+        print("***", self)
         ogl.DividedShape.OnSizingEndDragLeft(self, pt, x, y, keys, attch)
         self.SetRegionSizes()
         self.ReformatRegions()
--- Research/ogl tests 01/ogl_redraw_f_logic.py	(original)
+++ Research/ogl tests 01/ogl_redraw_f_logic.py	(refactored)
@@ -239,9 +239,9 @@
             canvas.GetDiagram().Clear(dc)
             
         elif keycode == 'd':
-            print "GetVirtualSize()", canvas.GetVirtualSize()
-            print "frame.GetClientSize()", canvas.frame.GetClientSize()
-            print "frame.GetSize()", canvas.frame.GetSize()
+            print("GetVirtualSize()", canvas.GetVirtualSize())
+            print("frame.GetClientSize()", canvas.frame.GetClientSize())
+            print("frame.GetSize()", canvas.frame.GetSize())
         
         elif keycode in ['1','2','3','4','5','6','7','8','9']:
             technique = keycode
--- Research/ogl tests 01/ogl_resize_frame1.py	(original)
+++ Research/ogl tests 01/ogl_resize_frame1.py	(refactored)
@@ -170,12 +170,12 @@
             y += 70
 
         self.umlwin.GetDiagram().ShowAll( 1 )
-        print "bounds", self.GetBoundsAllShapes()
-        print "canvas.GetVirtualSize()", self.umlwin.GetVirtualSize()
-        print "canvas.GetSize()", self.umlwin.GetSize()
-        print "frame.GetVirtualSize()", self.frame.GetVirtualSize()
-        print "frame.GetSize()", self.frame.GetSize()
-        print "frame.GetClientSize()", self.frame.GetClientSize()
+        print("bounds", self.GetBoundsAllShapes())
+        print("canvas.GetVirtualSize()", self.umlwin.GetVirtualSize())
+        print("canvas.GetSize()", self.umlwin.GetSize())
+        print("frame.GetVirtualSize()", self.frame.GetVirtualSize())
+        print("frame.GetSize()", self.frame.GetSize())
+        print("frame.GetClientSize()", self.frame.GetClientSize())
         
         # MAGIC solution !!!
         width, height = self.GetBoundsAllShapes()
--- Research/ogl tests 01/ogl_simple1.py	(original)
+++ Research/ogl tests 01/ogl_simple1.py	(refactored)
@@ -36,7 +36,7 @@
                 'Eh??', 'Python')
         dlg.SetValue("Python is the best!")
         if dlg.ShowModal() == wx.ID_OK:
-            print('You entered: %s\n' % dlg.GetValue())
+            print(('You entered: %s\n' % dlg.GetValue()))
 
         dlg.Destroy()
 
--- Research/ogl tests 01/ogl_simple2.py	(original)
+++ Research/ogl tests 01/ogl_simple2.py	(refactored)
@@ -22,7 +22,7 @@
         shape = ogl.RectangleShape( 60, 60 )
         shape.SetX( 30 )
         shape.SetY( 30 )
-        print shape.GetBoundingBoxMax()
+        print(shape.GetBoundingBoxMax())
         canvas.AddShape( shape )
 
         shape = ogl.RectangleShape( 60, 60 )
--- Research/ogl tests 01/ogl_simple3.py	(original)
+++ Research/ogl tests 01/ogl_simple3.py	(refactored)
@@ -50,7 +50,7 @@
         setpos(shape, 100, 60)
         canvas.AddShape( shape )
 
-        print [getpos(shape) for shape in canvas.GetDiagram().GetShapeList()]
+        print([getpos(shape) for shape in canvas.GetDiagram().GetShapeList()])
         
         diagram.ShowAll( 1 )
 
--- Research/ogl tests 01/ogllike_pylab_test.py	(original)
+++ Research/ogl tests 01/ogllike_pylab_test.py	(refactored)
@@ -11,7 +11,7 @@
 
 def menuMaker(frame, menus):
   menubar = wx.MenuBar()
-  for m, n in menus.items():
+  for m, n in list(menus.items()):
     menu = wx.Menu()
     menubar.Append(menu, m)
     for x in n:
@@ -27,11 +27,11 @@
         # ANDY
         if ANDYMAIN:
             topx, topy = ANDYMAIN.canvas.GetViewStart()  # The positions are in logical scroll units, not pixels, so to convert to pixels you will have to multiply by the number of pixels per scroll increment.
-            print topx, topy
+            print(topx, topy)
             px, py = ANDYMAIN.canvas.GetScrollPixelsPerUnit()
-            print topx, topy, px, py, topx * px, topy * py
+            print(topx, topy, px, py, topx * px, topy * py)
             topx, topy = ANDYMAIN.canvas.CalcUnscrolledPosition(topx * px, topy * py)
-            print topx, topy
+            print(topx, topy)
             Shape.__init__(self, [topx + x, topx + x2], [topy + y, topy + y2])
         else:
             Shape.__init__(self, [x, x2], [y, y2])
--- Research/parsing/codegen.py	(original)
+++ Research/parsing/codegen.py	(refactored)
@@ -643,6 +643,6 @@
 """
 
     round1 = to_source(ast.parse(code))
-    print round1
+    print(round1)
     round2 = to_source(ast.parse(round1))
-    print round1 == round2
+    print(round1 == round2)
--- Research/parsing/codegen_with_diagnostics.py	(original)
+++ Research/parsing/codegen_with_diagnostics.py	(refactored)
@@ -105,7 +105,7 @@
         self.new_lines = 0
 
     def write(self, x):
-        print "%-20s %s%s" % (whosdaddy(), self.indent_with * self.indentation, x)
+        print("%-20s %s%s" % (whosdaddy(), self.indent_with * self.indentation, x))
         assert(isinstance(x, str))
         if self.new_lines:
             if self.result:
@@ -690,6 +690,6 @@
         self._secretinfo = 2
 """    
     round1 = to_source(ast.parse(code6))
-    print round1
+    print(round1)
     round2 = to_source(ast.parse(round1))
-    print round1 == round2
+    print(round1 == round2)
--- Research/parsing/misc_parsing_play1.py	(original)
+++ Research/parsing/misc_parsing_play1.py	(refactored)
@@ -21,7 +21,7 @@
 
 
 
-print "-"*88
+print("-"*88)
 
 
 
@@ -38,46 +38,46 @@
 
 class Py2Neko(ast.NodeVisitor):
     def generic_visit(self, node):
-        print type(node).__name__
+        print(type(node).__name__)
         ast.NodeVisitor.generic_visit(self, node)
 
     def visit_Name(self, node):
-        print 'Name :', node.id
+        print('Name :', node.id)
 
     def visit_Num(self, node):
-        print 'Num :', node.__dict__['n']
+        print('Num :', node.__dict__['n'])
 
     def visit_Str(self, node):
-        print "Str :", node.s
+        print("Str :", node.s)
 
     def visit_Print(self, node):
-        print "Print :"
+        print("Print :")
         ast.NodeVisitor.generic_visit(self, node)
 
     def visit_Assign(self, node):
-        print "Assign :"
+        print("Assign :")
         ast.NodeVisitor.generic_visit(self, node)
 
     def visit_Expr(self, node):
-        print "Expr :"
+        print("Expr :")
         ast.NodeVisitor.generic_visit(self, node)
 
     def visit_Str(self, node):
-        print 'Found string "%s"' % node.s
+        print('Found string "%s"' % node.s)
         
     def visit_ClassDef(self, node):
         have_args = []
         def paren_or_comma():
             if have_args:
-                print ', ',
+                print(', ', end=' ')
             else:
                 have_args.append(True)
-                print '(',
+                print('(', end=' ')
 
         #self.newline(extra=2)
         #self.decorators(node)
         #self.newline(node)
-        print 'class %s' % node.name,
+        print('class %s' % node.name, end=' ')
         for base in node.bases:
             paren_or_comma()
             self.visit(base)
@@ -90,14 +90,14 @@
     
     # Andy
     node = ast.parse(source)
-    print ast.dump(node)
+    print(ast.dump(node))
     v = Py2Neko()
     v.visit(node)
 
-    print
-    print "from ast to source code"    
+    print()
+    print("from ast to source code")    
     import codegen   # http://stackoverflow.com/questions/768634/python-parse-a-py-file-read-the-ast-modify-it-then-write-back-the-modified
-    print codegen.to_source(node)
+    print(codegen.to_source(node))
     
     
     
--- Research/python advanced/command_invokers1.py	(original)
+++ Research/python advanced/command_invokers1.py	(refactored)
@@ -29,7 +29,7 @@
 class CmdFred:
     ugg = 1
     def execute(self, context):
-        print "hi from Fred and context is", context
+        print("hi from Fred and context is", context)
 
 invoker = CmdInvoker1(context={'a':1})
 invoker.CmdFred()  # instantiates class CmdFred and calls execute(context, ...) on it
@@ -52,7 +52,7 @@
     def __getattr__(self, klass):
         #print klass, type(klass)
         def broadcaster(*args, **kwargs):
-            o = eval(klass+'(self.context)', dict(globals().items() + [('self', self)])) # http://stackoverflow.com/questions/7349785/eval-calling-lambda-dont-see-self
+            o = eval(klass+'(self.context)', dict(list(globals().items()) + [('self', self)])) # http://stackoverflow.com/questions/7349785/eval-calling-lambda-dont-see-self
             
             #print o, type(o)
             func = getattr(o, 'execute', None)
@@ -69,7 +69,7 @@
         self.context = context
     ugg = 1
     def execute(self):
-        print "hi from Mary and context is", self.context
+        print("hi from Mary and context is", self.context)
     
 invoker = CmdInvoker2(context={'a':2})
 invoker.CmdMary()  # instantiates class CmdMary and calls execute(...) on it
@@ -123,7 +123,7 @@
         self.num = num
         self.num2 = num2
     def execute(self):
-        print "hi from Sam and context is %(context)s and num is %(num)d and num2 is %(num2)d" % self.__dict__
+        print("hi from Sam and context is %(context)s and num is %(num)d and num2 is %(num2)d" % self.__dict__)
  
 invoker.CmdSam(100)  # instantiates class CmdSam with constructor value (100) and calls execute() on it
 invoker.CmdSam(100, 97)
@@ -171,7 +171,7 @@
         self.num = num
         self.num2 = num2
     def execute(self):
-        print "hi from Woody and context is %(context)s and num is %(num)d and num2 is %(num2)d" % self.__dict__
+        print("hi from Woody and context is %(context)s and num is %(num)d and num2 is %(num2)d" % self.__dict__)
  
 invoker.CmdWoody(100)  # instantiates class CmdWoody with constructor value (100) and calls execute() on it
 invoker.CmdWoody(100, 97)
@@ -192,7 +192,7 @@
         self.num2 = num2
     def execute(self):
         assert self.context
-        print "hi from Bob and context is %(context)s and num is %(num)d and num2 is %(num2)d" % self.__dict__
+        print("hi from Bob and context is %(context)s and num is %(num)d and num2 is %(num2)d" % self.__dict__)
 
 invoker.CmdBob(100)  # instantiates class CmdBob with constructor value (100) and calls execute() on it
 invoker.CmdBob(100, 97)
@@ -202,4 +202,4 @@
 c.setContext({'a':44})   # Need to do this if not using the framework
 c.execute()
 
-print "done"
+print("done")
--- Research/python advanced/decorator_dump_params1.py	(original)
+++ Research/python advanced/decorator_dump_params1.py	(refactored)
@@ -2,21 +2,21 @@
 
 def dump_args(func):
     "This decorator dumps out the arguments passed to a function before calling it"
-    argnames = func.func_code.co_varnames[:func.func_code.co_argcount]
-    fname = func.func_name
+    argnames = func.__code__.co_varnames[:func.__code__.co_argcount]
+    fname = func.__name__
     
     if not dodump:
         return func
         
     def echo_func(*args,**kwargs):
-        print fname, ":", ', '.join(
+        print(fname, ":", ', '.join(
             '%s=%r' % entry
-            for entry in zip(argnames,args) + kwargs.items())
+            for entry in list(zip(argnames,args)) + list(kwargs.items())))
         return func(*args, **kwargs)
     return echo_func
 
 @dump_args
 def f1(a,b,c):
-    print a + b + c
+    print(a + b + c)
 
 f1(1, 2, 3)
--- Research/python advanced/decorator_function_call_counter1.py	(original)
+++ Research/python advanced/decorator_function_call_counter1.py	(refactored)
@@ -30,16 +30,16 @@
 
    @countcalls
    def andy1():
-       print "andy1 called"
+       print("andy1 called")
        
    andy1()
    andy1()
    andy1()
    
    # same
-   print countcalls.counts()
-   print andy1.counts()
+   print(countcalls.counts())
+   print(andy1.counts())
 
    #print countcalls.count(andy1)  # this doesn't work - why?
-   print countcalls.counts()
-   print "done"
+   print(countcalls.counts())
+   print("done")
--- Research/python advanced/decorator_function_call_counter2.py	(original)
+++ Research/python advanced/decorator_function_call_counter2.py	(refactored)
@@ -32,23 +32,23 @@
    
    @countcalls
    def f():
-      print 'f called'
+      print('f called')
    
    @countcalls
    def g():
-      print 'g called'
+      print('g called')
    
    f()
    f()
    f()
-   print f.count() # prints 3
+   print(f.count()) # prints 3
    
-   print countcalls.counts() # same as f.counts() or g.counts()
-   print f.counts()
+   print(countcalls.counts()) # same as f.counts() or g.counts()
+   print(f.counts())
    
    g()
-   print g.count() # prints 1
+   print(g.count()) # prints 1
 
-   print countcalls.counts()
+   print(countcalls.counts())
    
-   print "done"
+   print("done")
--- Research/python advanced/interfaces1.py	(original)
+++ Research/python advanced/interfaces1.py	(refactored)
@@ -4,9 +4,7 @@
 
 import abc
 
-class PluginBase(object):
-    __metaclass__ = abc.ABCMeta
-    
+class PluginBase(object, metaclass=abc.ABCMeta):
     @abc.abstractmethod
     def load(self, input):
         """Retrieve data from the input source and return an object."""
@@ -27,7 +25,7 @@
 
 #o = PluginBase()  # Can't instantiate base class
 o = SubclassImplementation()
-print o
+print(o)
 
 class IncompleteImplementation(PluginBase):
     
@@ -37,4 +35,4 @@
 #o = IncompleteImplementation() # Can't instantiate Incomplete Implementation
 #print o
         
-print "done"
+print("done")
--- Research/python advanced/interfaces2.py	(original)
+++ Research/python advanced/interfaces2.py	(refactored)
@@ -4,8 +4,7 @@
 
 import abc
 
-class IPersist(object):
-    __metaclass__ = abc.ABCMeta
+class IPersist(object, metaclass=abc.ABCMeta):
     @abc.abstractmethod
     def load(self, input):
         return
@@ -13,8 +12,7 @@
     def save(self, output, data):
         return
 
-class ISing(object):
-    __metaclass__ = abc.ABCMeta
+class ISing(object, metaclass=abc.ABCMeta):
     @abc.abstractmethod
     def sing(self):
         return
@@ -33,6 +31,6 @@
         return
 
 o = MyClass()
-print o
+print(o)
 
-print "done"
+print("done")
--- Research/python advanced/listdiff.py	(original)
+++ Research/python advanced/listdiff.py	(refactored)
@@ -76,28 +76,28 @@
 b = [2,3,4]
 
 res = listdiff(a,b)
-print res
+print(res)
 assert res == [1,4]
 
 res = listdiff(b,a)
-print res
+print(res)
 assert res == [1, 4]
 
 c = [3,4,5,6,7]
 res = listdiff(a,c)
-print res
+print(res)
 assert res == [1,2,4,5,6,7]
 
 a = [1,2,3]
 b = [2,3,3,4]
 res = listdiff(a,b)
-print res
+print(res)
 assert res == [1,4,3], res
 
 a = ['MainApp', 'MainApp_Context', 'wx.App', 'wx.Appwx.lib.mixins.inspection.InspectionMixin', 'object', 'Log', 'UmlCanvas', 'App', 'ConfigObj']
 b = ['wx.App', 'MainApp', 'wx.Appwx.lib.mixins.inspection.InspectionMixin', 'MainApp', 'object', 'MainApp_Context', 'Log', 'UmlCanvas', 'App', 'ConfigObj']
 res = listdiff(a,b)
-print res
+print(res)
 assert res == ['MainApp']
 
-print 'done'
+print('done')
--- Research/python advanced/multicast.py	(original)
+++ Research/python advanced/multicast.py	(refactored)
@@ -1,6 +1,7 @@
 # from http://code.activestate.com/recipes/52289-multicasting-on-objects/
 
 import operator
+from functools import reduce
 
 class multicast(dict):
     "Class multiplexes messages to registered objects"
@@ -13,23 +14,23 @@
     def __call__(self, *args, **kwargs):
         "Invoke method attributes and return results through another multicast"
         return self.__class__( [ (alias, obj(*args, **kwargs) ) \
-                for alias, obj in self.items() if callable(obj) ] )
+                for alias, obj in list(self.items()) if callable(obj) ] )
 
-    def __nonzero__(self):
+    def __bool__(self):
         "A multicast is logically true if all delegate attributes are logically true"
 
-        return operator.truth(reduce(lambda a, b: a and b, self.values(), 1))
+        return operator.truth(reduce(lambda a, b: a and b, list(self.values()), 1))
 
     def __getattr__(self, name):
         "Wrap requested attributes for further processing"
         return self.__class__( [ (alias, getattr(obj, name) ) \
-                for alias, obj in self.items() if hasattr(obj, name) ] )
+                for alias, obj in list(self.items()) if hasattr(obj, name) ] )
 
     def __setattr__(self, name, value):
         """Wrap setting of requested attributes for further
         processing"""
 
-        for o in self.values():
+        for o in list(self.values()):
             o.setdefault(name, value)
 
     # Andy Modifications
@@ -42,10 +43,10 @@
             del self[id(o)]
 
 if __name__ == "__main__":
-    import StringIO
+    import io
 
-    file1 = StringIO.StringIO()
-    file2 = StringIO.StringIO()
+    file1 = io.StringIO()
+    file2 = io.StringIO()
 
     m = multicast()
     m[id(file1)] = file1
@@ -59,11 +60,11 @@
     m.close()
     assert m.closed
 
-    print "Test complete"
+    print("Test complete")
 
     # Andy's tests
 
-    print "Andy's tests:"
+    print("Andy's tests:")
     
     class Model:
         def __init__(self):
@@ -77,7 +78,7 @@
             
     class Observer1:
         def notifyOfModelValueChange(self, value, new_total_value):
-            print "Observer1 got notified, added value %(value)4d - total now %(new_total_value)4d" % vars()
+            print("Observer1 got notified, added value %(value)4d - total now %(new_total_value)4d" % vars())
                 
     model = Model()
     o1 = Observer1()
@@ -90,7 +91,7 @@
             self.num_calls = 0
         def notifyOfModelValueChange(self, value, new_total_value):
             self.num_calls += 1
-            print "Observer2 got notified %2d times" % self.num_calls
+            print("Observer2 got notified %2d times" % self.num_calls)
 
     o2 = Observer2()
     model.observers.addObserver(o2)                         # Or access the multicast directly. 
--- Research/python advanced/multicast_csharp_style1.py	(original)
+++ Research/python advanced/multicast_csharp_style1.py	(refactored)
@@ -27,7 +27,7 @@
     __str__ = __repr__
     def __len__(self): return NotImplemented
     def __iter__(self):
-        def gen(dictitems=self.__dict__.items()):
+        def gen(dictitems=list(self.__dict__.items())):
             for attr, val in dictitems:
                 if isinstance(val, _EventSlot):
                     yield val
@@ -78,25 +78,25 @@
             model.events.OnChange += self.DisplayValue
             ##model.events.OnChange2 += self.DisplayValue # would raise exeception
         def DisplayValue(self):
-            print self.model.Value
+            print(self.model.Value)
 
 
     model = ValueModel()
     view = SillyView(model)
 
-    print '\n--- Events Demo ---'
+    print('\n--- Events Demo ---')
     # Events in action
     for i in range(5):
         model.Value = 2*i + 1
     # Events introspection
-    print model.events
+    print(model.events)
     for event in model.events:
-        print event
+        print(event)
 ## end of http://code.activestate.com/recipes/410686/ }}}
 
     # Andy's tests
 
-    print "Andy's tests:"
+    print("Andy's tests:")
     
     class AndyEvents(Events):
         __events__ = ('OnChange', )
@@ -113,7 +113,7 @@
             
     class Observer1:
         def notifyOfModelValueChange(self, value, new_total_value):
-            print "Observer1 got notified, added value %(value)4d - total now %(new_total_value)4d" % vars()
+            print("Observer1 got notified, added value %(value)4d - total now %(new_total_value)4d" % vars())
                 
     model = Model()
     o1 = Observer1()
@@ -126,7 +126,7 @@
             self.num_calls = 0
         def notifyOfModelValueChange(self, value, new_total_value):
             self.num_calls += 1
-            print "Observer2 got notified %2d times" % self.num_calls
+            print("Observer2 got notified %2d times" % self.num_calls)
     
     o2 = Observer2()
     model.observers.OnChange += o2.notifyOfModelValueChange # Or access the multicast directly.
--- Research/python advanced/multicast_csharp_style2 - threaded.py	(original)
+++ Research/python advanced/multicast_csharp_style2 - threaded.py	(refactored)
@@ -22,6 +22,7 @@
 """
 
 import operator
+from functools import reduce
 
 class multicast(dict):
     "Class multiplexes messages to registered objects"
@@ -34,7 +35,7 @@
     def __call__(self, *args, **kwargs):
         "Invoke method attributes and return results through another multicast"
         return self.__class__( [ (alias, obj(*args, **kwargs) ) \
-                for alias, obj in self.items() if callable(obj) ] )
+                for alias, obj in list(self.items()) if callable(obj) ] )
     def __callZ__(self, *args, **kwargs):
         import threading
         lock = threading.RLock()
@@ -48,28 +49,28 @@
 
         threadlist = [threading.Thread(
                       target=invoke, args=item)
-                      for item in self.items()]
+                      for item in list(self.items())]
         for thread in threadlist:
             thread.start()
         for thread in threadlist:
             thread.join()
         return self.__class__(result)
     
-    def __nonzero__(self):
+    def __bool__(self):
         "A multicast is logically true if all delegate attributes are logically true"
 
-        return operator.truth(reduce(lambda a, b: a and b, self.values(), 1))
+        return operator.truth(reduce(lambda a, b: a and b, list(self.values()), 1))
 
     def __getattr__(self, name):
         "Wrap requested attributes for further processing"
         return self.__class__( [ (alias, getattr(obj, name) ) \
-                for alias, obj in self.items() if hasattr(obj, name) ] )
+                for alias, obj in list(self.items()) if hasattr(obj, name) ] )
 
     def __setattr__(self, name, value):
         """Wrap setting of requested attributes for further
         processing"""
 
-        for o in self.values():
+        for o in list(self.values()):
             o.setdefault(name, value)
 
     # Andy Modifications
@@ -91,10 +92,10 @@
     #    
 
 if __name__ == "__main__":
-    import StringIO
+    import io
 
-    file1 = StringIO.StringIO()
-    file2 = StringIO.StringIO()
+    file1 = io.StringIO()
+    file2 = io.StringIO()
 
     m = multicast()
     m[id(file1)] = file1
@@ -108,11 +109,11 @@
     m.close()
     assert m.closed
 
-    print "Test complete"
+    print("Test complete")
 
     # Andy's tests
 
-    print "Andy's tests:"
+    print("Andy's tests:")
     
     class Model:
         def __init__(self):
@@ -126,7 +127,7 @@
             
     class Observer1:
         def notifyOfModelValueChange(self, value, new_total_value):
-            print "Observer1 got notified, added value %(value)4d - total now %(new_total_value)4d" % vars()
+            print("Observer1 got notified, added value %(value)4d - total now %(new_total_value)4d" % vars())
                 
     model = Model()
     o1 = Observer1()
@@ -139,7 +140,7 @@
             self.num_calls = 0
         def notifyOfModelValueChange(self, value, new_total_value):
             self.num_calls += 1
-            print "Observer2 got notified %2d times" % self.num_calls
+            print("Observer2 got notified %2d times" % self.num_calls)
 
     o2 = Observer2()
     model.observers.addObserver(o2)                         # Or access the multicast directly. 
--- Research/python advanced/multicast_csharp_style2.py	(original)
+++ Research/python advanced/multicast_csharp_style2.py	(refactored)
@@ -22,6 +22,7 @@
 """
 
 import operator
+from functools import reduce
 
 class multicast(dict):
     "Class multiplexes messages to registered objects"
@@ -34,23 +35,23 @@
     def __call__(self, *args, **kwargs):
         "Invoke method attributes and return results through another multicast"
         return self.__class__( [ (alias, obj(*args, **kwargs) ) \
-                for alias, obj in self.items() if callable(obj) ] )
+                for alias, obj in list(self.items()) if callable(obj) ] )
 
-    def __nonzero__(self):
+    def __bool__(self):
         "A multicast is logically true if all delegate attributes are logically true"
 
-        return operator.truth(reduce(lambda a, b: a and b, self.values(), 1))
+        return operator.truth(reduce(lambda a, b: a and b, list(self.values()), 1))
 
     def __getattr__(self, name):
         "Wrap requested attributes for further processing"
         return self.__class__( [ (alias, getattr(obj, name) ) \
-                for alias, obj in self.items() if hasattr(obj, name) ] )
+                for alias, obj in list(self.items()) if hasattr(obj, name) ] )
 
     def __setattr__(self, name, value):
         """Wrap setting of requested attributes for further
         processing"""
 
-        for o in self.values():
+        for o in list(self.values()):
             o.setdefault(name, value)
 
     # Andy Modifications
@@ -72,10 +73,10 @@
     #    
 
 if __name__ == "__main__":
-    import StringIO
+    import io
 
-    file1 = StringIO.StringIO()
-    file2 = StringIO.StringIO()
+    file1 = io.StringIO()
+    file2 = io.StringIO()
 
     m = multicast()
     m[id(file1)] = file1
@@ -89,11 +90,11 @@
     m.close()
     assert m.closed
 
-    print "Test complete"
+    print("Test complete")
 
     # Andy's tests
 
-    print "Andy's tests:"
+    print("Andy's tests:")
     
     class Model:
         def __init__(self):
@@ -107,7 +108,7 @@
             
     class Observer1:
         def notifyOfModelValueChange(self, value, new_total_value):
-            print "Observer1 got notified, added value %(value)4d - total now %(new_total_value)4d" % vars()
+            print("Observer1 got notified, added value %(value)4d - total now %(new_total_value)4d" % vars())
                 
     model = Model()
     o1 = Observer1()
@@ -120,7 +121,7 @@
             self.num_calls = 0
         def notifyOfModelValueChange(self, value, new_total_value):
             self.num_calls += 1
-            print "Observer2 got notified %2d times" % self.num_calls
+            print("Observer2 got notified %2d times" % self.num_calls)
 
     o2 = Observer2()
     model.observers.addObserver(o2)                         # Or access the multicast directly. 
--- Research/python advanced/multicast_simplified_style2.py	(original)
+++ Research/python advanced/multicast_simplified_style2.py	(refactored)
@@ -79,15 +79,15 @@
 class Fred:
     ugg = 1
     def hi(self):
-        print "hi from Fred"
+        print("hi from Fred")
     def count(self, n):
-      for i in range(n): print i
+      for i in range(n): print(i)
 
 class Mary:
     def hi(self):
-        print "hi from Mary"
+        print("hi from Mary")
     def count(self, n):
-      for i in range(n): print i+100
+      for i in range(n): print(i+100)
   
 observers = multicast()
 observers.add(Fred())
@@ -98,5 +98,5 @@
 
 #observers.someattr = 100
 
-print "done"
+print("done")
 
--- Research/python advanced/properties1.py	(original)
+++ Research/python advanced/properties1.py	(refactored)
@@ -9,11 +9,11 @@
     self.x = x
 
 obj = C(5)
-print "x is currently", obj.x
+print("x is currently", obj.x)
 obj.x = 6    # set
-print obj.x  # get
+print(obj.x)  # get
 
-print "-----"
+print("-----")
 
 #Later, you can change it to allow getter, setter
 class C(object):
@@ -23,19 +23,19 @@
   def get_x(self):
     return self._x
   def set_x(self, x):
-    print "x is being set (old style setter)"
+    print("x is being set (old style setter)")
     self._x = x
   x = property(get_x, set_x)
 
 obj = C(5)
-print "x is currently", obj.x
+print("x is currently", obj.x)
 obj.x = 6    # set
-print obj.x  # get
+print(obj.x)  # get
 
 #You can use class C in almost the same way, but you
 #can add anything else you want to do to get_x, set_x.
 
-print "-----"
+print("-----")
 
 #
 # new-style properties
@@ -50,10 +50,10 @@
     return self._x
   @x.setter
   def x(self, value):
-    print "x is being set (new style)"
+    print("x is being set (new style)")
     self._x = value
 
 c = C(5)
-print "x is currently", c.x
+print("x is currently", c.x)
 c.x = 6
-print c.x
+print(c.x)
--- Research/state chart editor/Adders.py	(original)
+++ Research/state chart editor/Adders.py	(refactored)
@@ -1,4 +1,4 @@
-from Tkinter import *
+from tkinter import *
 from Globals import *
 from Handler import Handler
 from Separator import Separator
--- Research/state chart editor/GUI.py	(original)
+++ Research/state chart editor/GUI.py	(refactored)
@@ -1,9 +1,9 @@
 # GUI.py
 # user interface classes
-from Tkinter import *
+from tkinter import *
 from Globals import *
-import tkFileDialog 
-import tkMessageBox
+import tkinter.filedialog 
+import tkinter.messagebox
 import os
 import string # for EditTransitionDialog
 from State import State
@@ -79,7 +79,7 @@
         # set the scrollbar and update y0 at the same time so that it doesn't need to
         # be updated each time an event occurs.
     def setXScrollbar(self, *args):
-        apply(self.xScrollbar.set, args)
+        self.xScrollbar.set(*args)
         low, hi = self.xScrollbar.get()
         #Because of the borderwidth, need to adjust the position to reflect the
         # real position of the cursor for both x0 and y0.
@@ -88,7 +88,7 @@
         
         # set the scrollbar and update y0
     def setYScrollbar(self, *args):
-        apply(self.yScrollbar.set, args)
+        self.yScrollbar.set(*args)
         low, hi = self.yScrollbar.get()
         self.y0 = low * self.height - self.bd - 1
         self.canvasHeight = (hi - low) * self.height
@@ -551,10 +551,10 @@
             
     def validate(self):
         if self.name.get() == "":
-            tkMessageBox.showinfo("State", "A state must be given a name")
+            tkinter.messagebox.showinfo("State", "A state must be given a name")
             return 0
         elif (self.myState.getName() != self.name.get()) and not self.myStatechart.isFreeName(self.myState.parent, self.name.get()):
-            tkMessageBox.showinfo("State", "State name already chosen")
+            tkinter.messagebox.showinfo("State", "State name already chosen")
             return 0
         return 1
         
@@ -644,15 +644,15 @@
             try:
                 t = string.atof(self.timeEntry.get())
             except ValueError:
-                tkMessageBox.showinfo("Transition", "Incorrect value for time")
+                tkinter.messagebox.showinfo("Transition", "Incorrect value for time")
                 return 0
             if t <= 0:
-                tkMessageBox.showinfo("Transition", "Time value must be positive")
+                tkinter.messagebox.showinfo("Transition", "Time value must be positive")
                 return 0
             return 1
         else: # chose event
             if self.eventEntry.get() == "":
-                tkMessageBox.showinfo("Transition", "An event must be specified")
+                tkinter.messagebox.showinfo("Transition", "An event must be specified")
                 return 0
             return 1
             
@@ -708,22 +708,22 @@
         self.transitionPopup.tk_popup(x, y)
         
     def showError(self, title, text):
-        tkMessageBox.showerror(title, text)
+        tkinter.messagebox.showerror(title, text)
         
     def askYesNoCancel(self, t,m):
-        return tkMessageBox._show(title=t, message=m, type="yesnocancel", icon="warning")
+        return tkinter.messagebox._show(title=t, message=m, type="yesnocancel", icon="warning")
         
     def getStatechartFilename(self):
-        return tkFileDialog.asksaveasfilename(defaultextension="stt", filetypes=[("Statechart",".stt"), ("All files","*")],title="Save as")
+        return tkinter.filedialog.asksaveasfilename(defaultextension="stt", filetypes=[("Statechart",".stt"), ("All files","*")],title="Save as")
         
     def getSVMFilename(self):
-        return tkFileDialog.asksaveasfilename(defaultextension="des", filetypes=[("SVM Description",".des"), ("All files","*")],title="Export to SVM")
+        return tkinter.filedialog.asksaveasfilename(defaultextension="des", filetypes=[("SVM Description",".des"), ("All files","*")],title="Export to SVM")
         
     def getPostscriptFilename(self):
-        return tkFileDialog.asksaveasfilename(defaultextension="ps", filetypes=[("Postscript",".ps"), ("All files","*")],title="Export to Postscript")
+        return tkinter.filedialog.asksaveasfilename(defaultextension="ps", filetypes=[("Postscript",".ps"), ("All files","*")],title="Export to Postscript")
         
     def getStatechartFile(self):
-        return tkFileDialog.askopenfilename(defaultextension="stt", filetypes=[("Statechart",".stt"), ("All files","*")],title="Open")
+        return tkinter.filedialog.askopenfilename(defaultextension="stt", filetypes=[("Statechart",".stt"), ("All files","*")],title="Open")
         
     def editInitCode(self, statechart):
         title = "Initialization Code"
@@ -820,12 +820,12 @@
     
     def Andy01(self):
         res = self.handler.link.stateAdder._addState(120, 120, parent=None)
-        print res
+        print(res)
         
     def Andy02(self):
         for i in range(1,20):
             self.handler.link.stateAdder._addState(random.randint(100,220), 100+random.randint(100,220), parent=None)
-            print i
+            print(i)
         
     def _createWorkspace(self):
         self.workspace = Workspace(self.root, 1200, 1200, 100, 100, self.handler)
--- Research/state chart editor/Link.py	(original)
+++ Research/state chart editor/Link.py	(refactored)
@@ -93,7 +93,7 @@
         return self
 
     def onCanvasShiftMotion(self, event):
-        print "onCanvasShiftMotion"
+        print("onCanvasShiftMotion")
         return self
 
     def onCanvasButtonMotion(self, event):
--- Research/state chart editor/Separator.py	(original)
+++ Research/state chart editor/Separator.py	(refactored)
@@ -1,4 +1,4 @@
-from Tkinter import *
+from tkinter import *
 from Globals import *
 
 class Separator:
--- Research/state chart editor/State.py	(original)
+++ Research/state chart editor/State.py	(refactored)
@@ -1,4 +1,4 @@
-from Tkinter import *
+from tkinter import *
 import sys
 import math
 from Globals import *
@@ -206,7 +206,7 @@
 	minSep = self._getMinSep()
         maxSep = self._getMaxSep()
 	scalingMethods = {"N":self._scaleN,"S":self._scaleS,"E":self._scaleE,"W":self._scaleW,"NW":self._scaleNW,"NE":self._scaleNE,"SW":self._scaleSW,"SE":self._scaleSE}
-	apply(scalingMethods[border], [x, y, minSep, maxSep])
+	scalingMethods[border](*[x, y, minSep, maxSep])
 	self._setRadius()
         self.updateDisplay()
 
--- Research/state chart editor/Transition.py	(original)
+++ Research/state chart editor/Transition.py	(refactored)
@@ -1,4 +1,4 @@
-from Tkinter import *
+from tkinter import *
 from Globals import *
 
 class Transition:
--- Research/winerack ogl and floatcanvas/fc_FloatCanvasDemo.py	(original)
+++ Research/winerack ogl and floatcanvas/fc_FloatCanvasDemo.py	(refactored)
@@ -1385,11 +1385,11 @@
             for i in range(1000):
                 Point = (random.uniform(BigRange[0],BigRange[1]),random.uniform(BigRange[0],BigRange[1]))
                 coords.append( (Point) )
-            print "Drawing the Points"
+            print("Drawing the Points")
             start = time.clock()
             for Point in coords:
                 Canvas.AddPoint(Point, Diameter = 4)
-            print "It took %s seconds to add the points"%(time.clock() - start)
+            print("It took %s seconds to add the points"%(time.clock() - start))
             Canvas.ZoomToBB()
 
         def PropertiesChangeTest(self,event=None):
@@ -1515,11 +1515,11 @@
                 Object.SetFillColor(colors[random.randint(0,len(colors)-1)])
                 Object.SetLineColor(colors[random.randint(0,len(colors)-1)])
                 Object.SetLineWidth(random.randint(1,7))
-                Object.SetLineStyle(FloatCanvas.DrawObject.LineStyleList.keys()[random.randint(0,5)])
+                Object.SetLineStyle(list(FloatCanvas.DrawObject.LineStyleList.keys())[random.randint(0,5)])
             for Object in self.ColorObjectsLine:
                 Object.SetLineColor(colors[random.randint(0,len(colors)-1)])
                 Object.SetLineWidth(random.randint(1,7))
-                Object.SetLineStyle(FloatCanvas.DrawObject.LineStyleList.keys()[random.randint(0,5)])
+                Object.SetLineStyle(list(FloatCanvas.DrawObject.LineStyleList.keys())[random.randint(0,5)])
             for Object in self.ColorObjectsColor:
                 Object.SetColor(colors[random.randint(0,len(colors)-1)])
             for Object in self.ColorObjectsText:
@@ -1724,7 +1724,7 @@
             import string
             file = open(filename,'rt')
             data = file.readlines()
-            data = map(string.strip,data)
+            data = list(map(string.strip,data))
 
             Shorelines = []
             segment = []
@@ -1734,7 +1734,7 @@
                         if segment: Shorelines.append(N.array(segment))
                         segment = []
                     else:
-                        segment.append(map(float,string.split(line)))
+                        segment.append(list(map(float,string.split(line))))
             if segment: Shorelines.append(N.array(segment))
 
             if stats:
@@ -1743,8 +1743,8 @@
                 for segment in Shorelines:
                     NumPoints = NumPoints + len(segment)
                 AvgPoints = NumPoints / NumSegments
-                print "Number of Segments: ", NumSegments
-                print "Average Number of Points per segment: ",AvgPoints
+                print("Number of Segments: ", NumSegments)
+                print("Average Number of Points per segment: ",AvgPoints)
             if AllLines:
                 Lines = []
                 for segment in Shorelines:
--- Research/winerack ogl and floatcanvas/fc_MiniDemo.py	(original)
+++ Research/winerack ogl and floatcanvas/fc_MiniDemo.py	(refactored)
@@ -77,7 +77,7 @@
         wx.lib.colourdb.updateColourDB()
         self.colors = wx.lib.colourdb.getColourList()
 
-        self.LineStyles = FloatCanvas.DrawObject.LineStyleList.keys()
+        self.LineStyles = list(FloatCanvas.DrawObject.LineStyleList.keys())
 
         return None
 
@@ -183,7 +183,7 @@
         self.Canvas.ZoomToBB()
 
     def MoveTest(self,event=None):
-        print "Running: TestHitTestForeground"
+        print("Running: TestHitTestForeground")
         wx.GetApp().Yield()
 
         self.UnBindAllMouseEvents()
--- Research/winerack ogl and floatcanvas/fc_PolyEditor.py	(original)
+++ Research/winerack ogl and floatcanvas/fc_PolyEditor.py	(refactored)
@@ -201,7 +201,7 @@
 
     def SelectPointHit(self, PointSet):
         PointSet.Index = PointSet.FindClosestPoint(PointSet.HitCoords)
-        print "point #%i hit"%PointSet.Index
+        print("point #%i hit"%PointSet.Index)
         #Index = PointSet.Index
         self.PointSelected = True
 
--- Research/winerack ogl and floatcanvas/fc_ProcessDiagram.py	(original)
+++ Research/winerack ogl and floatcanvas/fc_ProcessDiagram.py	(refactored)
@@ -16,7 +16,7 @@
     from wx.lib.floatcanvas import NavCanvas, Resources
     from wx.lib.floatcanvas import FloatCanvas as FC
     from wx.lib.floatcanvas.Utilities import BBox
-    print "using installed version:", wx.lib.floatcanvas.__version__
+    print("using installed version:", wx.lib.floatcanvas.__version__)
 elif ver == 'local':
     ## import a local version
     import sys
--- Research/winerack ogl and floatcanvas/fc_ScaledBitmap2Demo.py	(original)
+++ Research/winerack ogl and floatcanvas/fc_ScaledBitmap2Demo.py	(refactored)
@@ -82,9 +82,9 @@
         self.SetStatusText("%i, %i"%tuple(event.Coords))
 
     def Binding(self, event):
-        print "Writing a png file:"
+        print("Writing a png file:")
         self.Canvas.SaveAsImage("junk.png")
-        print "Writing a jpeg file:"
+        print("Writing a jpeg file:")
         self.Canvas.SaveAsImage("junk.jpg",wx.BITMAP_TYPE_JPEG)
 
 
--- Research/winerack ogl and floatcanvas/myimages.py	(original)
+++ Research/winerack ogl and floatcanvas/myimages.py	(refactored)
@@ -3,7 +3,7 @@
 #
 from wx import ImageFromStream, BitmapFromImage
 from wx import EmptyIcon
-import cStringIO
+import io
 #----------------------------------------------------------------------
 def getwrDeleteData():
     return \
@@ -51,7 +51,7 @@
     return BitmapFromImage(getwrDeleteImage())
 
 def getwrDeleteImage():
-    stream = cStringIO.StringIO(getwrDeleteData())
+    stream = io.StringIO(getwrDeleteData())
     return ImageFromStream(stream)
 
 def getwrDeleteIcon():
@@ -86,7 +86,7 @@
     return BitmapFromImage(getwrRectangleImage())
 
 def getwrRectangleImage():
-    stream = cStringIO.StringIO(getwrRectangleData())
+    stream = io.StringIO(getwrRectangleData())
     return ImageFromStream(stream)
 
 def getwrRectangleIcon():
@@ -127,7 +127,7 @@
     return BitmapFromImage(getwrTriangle1Image())
 
 def getwrTriangle1Image():
-    stream = cStringIO.StringIO(getwrTriangle1Data())
+    stream = io.StringIO(getwrTriangle1Data())
     return ImageFromStream(stream)
 
 def getwrTriangle1Icon():
@@ -169,7 +169,7 @@
     return BitmapFromImage(getwrTriangle2Image())
 
 def getwrTriangle2Image():
-    stream = cStringIO.StringIO(getwrTriangle2Data())
+    stream = io.StringIO(getwrTriangle2Data())
     return ImageFromStream(stream)
 
 def getwrTriangle2Icon():
@@ -208,7 +208,7 @@
     return BitmapFromImage(getwrTriangle3Image())
 
 def getwrTriangle3Image():
-    stream = cStringIO.StringIO(getwrTriangle3Data())
+    stream = io.StringIO(getwrTriangle3Data())
     return ImageFromStream(stream)
 
 def getwrTriangle3Icon():
@@ -249,7 +249,7 @@
     return BitmapFromImage(getwrTriangle4Image())
 
 def getwrTriangle4Image():
-    stream = cStringIO.StringIO(getwrTriangle4Data())
+    stream = io.StringIO(getwrTriangle4Data())
     return ImageFromStream(stream)
 
 def getwrTriangle4Icon():
@@ -292,7 +292,7 @@
     return BitmapFromImage(getwrTriangle5Image())
 
 def getwrTriangle5Image():
-    stream = cStringIO.StringIO(getwrTriangle5Data())
+    stream = io.StringIO(getwrTriangle5Data())
     return ImageFromStream(stream)
 
 def getwrTriangle5Icon():
@@ -335,7 +335,7 @@
     return BitmapFromImage(getwrTriangle6Image())
 
 def getwrTriangle6Image():
-    stream = cStringIO.StringIO(getwrTriangle6Data())
+    stream = io.StringIO(getwrTriangle6Data())
     return ImageFromStream(stream)
 
 def getwrTriangle6Icon():
@@ -378,7 +378,7 @@
     return BitmapFromImage(getwrTriangle7Image())
 
 def getwrTriangle7Image():
-    stream = cStringIO.StringIO(getwrTriangle7Data())
+    stream = io.StringIO(getwrTriangle7Data())
     return ImageFromStream(stream)
 
 def getwrTriangle7Icon():
@@ -421,7 +421,7 @@
     return BitmapFromImage(getwrTriangle8Image())
 
 def getwrTriangle8Image():
-    stream = cStringIO.StringIO(getwrTriangle8Data())
+    stream = io.StringIO(getwrTriangle8Data())
     return ImageFromStream(stream)
 
 def getwrTriangle8Icon():
@@ -448,7 +448,7 @@
     return BitmapFromImage(getopenImage())
 
 def getopenImage():
-    stream = cStringIO.StringIO(getopenData())
+    stream = io.StringIO(getopenData())
     return ImageFromStream(stream)
 
 def getopenIcon():
@@ -508,7 +508,7 @@
     return BitmapFromImage(getsaveImage())
 
 def getsaveImage():
-    stream = cStringIO.StringIO(getsaveData())
+    stream = io.StringIO(getsaveData())
     return ImageFromStream(stream)
 
 def getsaveIcon():
@@ -534,7 +534,7 @@
     return BitmapFromImage(getcloseImage())
 
 def getcloseImage():
-    stream = cStringIO.StringIO(getcloseData())
+    stream = io.StringIO(getcloseData())
     return ImageFromStream(stream)
 
 def getcloseIcon():
--- Research/winerack ogl and floatcanvas/rackdesigner.py	(original)
+++ Research/winerack ogl and floatcanvas/rackdesigner.py	(refactored)
@@ -28,9 +28,9 @@
 # xml - using amara
 def ucode(value):
     if isinstance(value, str): 
-        return unicode(value.strip(), 'iso-8859-1')
+        return str(value.strip(), 'iso-8859-1')
     else:
-        return unicode(str(value).strip(), 'iso-8859-1')
+        return str(str(value).strip(), 'iso-8859-1')
 
 def addElement(doc, element, name):
     return element.xml_append(doc.xml_create_element(name))
@@ -60,29 +60,29 @@
         if isinstance(self, ogl.RectangleShape):
             klass = addElement(xmlDoc, xmlDoc.shapes,
                                 ucode('RectangleShape'))
-            addValueElement(xmlDoc, klass, u'width',
+            addValueElement(xmlDoc, klass, 'width',
                                     ucode(self.GetWidth()))
-            addValueElement(xmlDoc, klass, u'height',
+            addValueElement(xmlDoc, klass, 'height',
                                 ucode(self.GetHeight()))
 
         else:
             klass = addElement(xmlDoc, xmlDoc.shapes,
                                 ucode('PolygonShape'))
             shapePoints = self.GetPoints()
-            points = addElement(xmlDoc, klass, u'points')
+            points = addElement(xmlDoc, klass, 'points')
             for wxp in shapePoints:
                 points.xml_append_fragment('<point><x>%i</x><y>%i</y></point>'%(wxp.x, wxp.y))
                 
-            addValueElement(xmlDoc, klass, u'width',
+            addValueElement(xmlDoc, klass, 'width',
                                 ucode(self.GetOriginalWidth()))
-            addValueElement(xmlDoc, klass, u'height',
+            addValueElement(xmlDoc, klass, 'height',
                                 ucode(self.GetOriginalHeight()))
             
-        addValueElement(xmlDoc, klass, u'x',
+        addValueElement(xmlDoc, klass, 'x',
                                 ucode(self.GetX()))
-        addValueElement(xmlDoc, klass, u'y',
+        addValueElement(xmlDoc, klass, 'y',
                                 ucode(self.GetY()))
-        addValueElement(xmlDoc, klass, u'rackitemid',
+        addValueElement(xmlDoc, klass, 'rackitemid',
                                 ucode(self.GetRackItemId()))
 
 
@@ -101,7 +101,7 @@
                    (0.0, 0.0),
                    ]
                    
-        print points
+        print(points)
 
         self.Create(points)
 
@@ -489,7 +489,7 @@
     
             #self.dbItemRack.shapeinfo = xmlDoc.xml(indent=u'yes')
             # adjust above to your db and remove below
-            print xmlDoc.xml(indent=u'yes')
+            print(xmlDoc.xml(indent='yes'))
         else:
             pass
             # adjust to your db
@@ -623,13 +623,13 @@
             xmlDoc = binderytools.bind_string(self.dbItemRack.shapeinfo)
             if hasattr(xmlDoc.shapes, 'RectangleShape'):
                 for shape in xmlDoc.shapes.RectangleShape:
-                    x = float(unicode(shape.x))
-                    y = float(unicode(shape.y))
-                    width = float(unicode(shape.width))
-                    height = float(unicode(shape.height))
+                    x = float(str(shape.x))
+                    y = float(str(shape.y))
+                    width = float(str(shape.width))
+                    height = float(str(shape.height))
                     newShape = self.designWindow.MyAddShape(RectangleShape(width, height), 
                         x, y, wx.BLACK_PEN, wx.LIGHT_GREY_BRUSH, "")
-                    newShape.SetRackItemId(int(unicode(shape.rackitemid)))
+                    newShape.SetRackItemId(int(str(shape.rackitemid)))
                     if newShape.GetRackItemId() != 0:
                         bin = wx.GetApp().Getds().selectByPrimaryKey(beans.winerackb,
                                                                      newShape.GetRackItemId())
@@ -642,18 +642,18 @@
                     newShape.GetCanvas().Refresh()
             if hasattr(xmlDoc.shapes, 'PolygonShape'):
                 for shape in xmlDoc.shapes.PolygonShape:
-                    x = float(unicode(shape.x))
-                    y = float(unicode(shape.y))
-                    width = float(unicode(shape.width))
-                    height = float(unicode(shape.height))
+                    x = float(str(shape.x))
+                    y = float(str(shape.y))
+                    width = float(str(shape.width))
+                    height = float(str(shape.height))
                     shapePoints = []
                     for point in shape.points.point:
-                        shapePoints.append((float(unicode(point.x)), 
-                                            float(unicode(point.y))))
+                        shapePoints.append((float(str(point.x)), 
+                                            float(str(point.y))))
                     newShape = self.designWindow.MyAddShape(PolygonShape(width, height), 
                         x, y, wx.BLACK_PEN, wx.LIGHT_GREY_BRUSH, "")
                     newShape.Create(shapePoints)
-                    newShape.SetRackItemId(int(unicode(shape.rackitemid)))
+                    newShape.SetRackItemId(int(str(shape.rackitemid)))
                     if newShape.GetRackItemId() != 0:
                         bin = wx.GetApp().Getds().selectByPrimaryKey(beans.winerackb,
                                                                      newShape.GetRackItemId())
--- Research/winerack ogl and floatcanvas/rackdesignerFC.py	(original)
+++ Research/winerack ogl and floatcanvas/rackdesignerFC.py	(refactored)
@@ -17,7 +17,7 @@
 if ver == 'installed': ## import the installed version
     from wx.lib.floatcanvas import NavCanvas, Resources
     from wx.lib.floatcanvas import FloatCanvas as FC
-    print "using installed version:", wx.lib.floatcanvas.__version__
+    print("using installed version:", wx.lib.floatcanvas.__version__)
 elif ver == 'local':
     ## import a local version
     import sys
@@ -32,9 +32,9 @@
 # xml - using amara
 def ucode(value):
     if isinstance(value, str): 
-        return unicode(value.strip(), 'iso-8859-1')
+        return str(value.strip(), 'iso-8859-1')
     else:
-        return unicode(str(value).strip(), 'iso-8859-1')
+        return str(str(value).strip(), 'iso-8859-1')
 
 def addElement(doc, element, name):
     return element.xml_append(doc.xml_create_element(name))
@@ -52,24 +52,24 @@
         if isinstance(self, FC.Rectangle):
             klass = addElement(xmlDoc, xmlDoc.shapes,
                                 ucode('RectangleShape'))
-            addValueElement(xmlDoc, klass, u'width',
+            addValueElement(xmlDoc, klass, 'width',
                                     ucode(self.WH[0]))
-            addValueElement(xmlDoc, klass, u'height',
+            addValueElement(xmlDoc, klass, 'height',
                                 ucode(self.WH[1]))
-            addValueElement(xmlDoc, klass, u'x',
+            addValueElement(xmlDoc, klass, 'x',
                                     ucode(self.XY[0]))
-            addValueElement(xmlDoc, klass, u'y',
+            addValueElement(xmlDoc, klass, 'y',
                                     ucode(self.XY[1]))
 
         else:
             klass = addElement(xmlDoc, xmlDoc.shapes,
                                 ucode('PolygonShape'))
             shapePoints = self.Points.tolist()
-            points = addElement(xmlDoc, klass, u'points')
+            points = addElement(xmlDoc, klass, 'points')
             for wxp in shapePoints:
                 points.xml_append_fragment('<point><x>%i</x><y>%i</y></point>'%(wxp[0], wxp[1]))
                 
-        addValueElement(xmlDoc, klass, u'rackitemid',
+        addValueElement(xmlDoc, klass, 'rackitemid',
                                 ucode(self.RackItemId))
 
 
@@ -505,7 +505,7 @@
     
             #self.dbItemRack.shapeinfo = xmlDoc.xml(indent=u'yes')
             # adjust above to your db and remove below
-            print xmlDoc.xml(indent=u'yes')
+            print(xmlDoc.xml(indent='yes'))
         else:
             pass
             # adjust to your db
@@ -599,11 +599,11 @@
         xmlDoc = binderytools.bind_string(doc_header)
         if hasattr(xmlDoc.shapes, 'RectangleShape'):
             for shape in xmlDoc.shapes.RectangleShape:
-                x = float(unicode(shape.x))
-                y = float(unicode(shape.y))
-                w = float(unicode(shape.width))
-                h = float(unicode(shape.height))
-                rid = (unicode(shape.rackitemid))
+                x = float(str(shape.x))
+                y = float(str(shape.y))
+                w = float(str(shape.width))
+                h = float(str(shape.height))
+                rid = (str(shape.rackitemid))
                 if rid != 0:
                     shapetip = 'some dummy info for rectangle which normally comes from db'
                 else:
@@ -619,12 +619,12 @@
             for shape in xmlDoc.shapes.PolygonShape:
                 shapePoints = []
                 for point in shape.points.point:
-                    shapePoints.append((float(unicode(point.x)), 
-                                        float(unicode(point.y))))
+                    shapePoints.append((float(str(point.x)), 
+                                        float(str(point.y))))
                 Points = N.array(shapePoints,
                                  N.float_)
                                  
-                rid = (unicode(shape.rackitemid))
+                rid = (str(shape.rackitemid))
                 if rid != 0:
                     shapetip = 'some dummy info for triangle which normally comes from db'
                 else:
--- Research/wx doco/ImageViewer0b.py	(original)
+++ Research/wx doco/ImageViewer0b.py	(refactored)
@@ -5,7 +5,7 @@
 # tested with Python24 and wxPython25   vegaseat   24jul2005
 
 import wx
-import  cStringIO
+import  io
 
 class Panel1(wx.Panel):
   """ class Panel1 creates a panel with an image on it, inherits wx.Panel """
@@ -20,7 +20,7 @@
         
         data = open(imageFile, "rb").read()
         # convert to a data stream
-        stream = cStringIO.StringIO(data)
+        stream = io.StringIO(data)
         # convert to a bitmap
         bmp = wx.BitmapFromImage( wx.ImageFromStream( stream ))
         # show the bitmap, (5, 5) are upper left corner coordinates
@@ -33,7 +33,7 @@
         # bitmap upper left corner is in the position tuple (x, y) = (5, 5)
         wx.StaticBitmap(self, -1, jpg1, (10 + jpg1.GetWidth(), 5), (jpg1.GetWidth(), jpg1.GetHeight()))
     except IOError:
-        print "Image file %s not found" % imageFile
+        print("Image file %s not found" % imageFile)
         raise SystemExit
 
 
--- Research/wx doco/ImageViewer1_pil.py	(original)
+++ Research/wx doco/ImageViewer1_pil.py	(refactored)
@@ -60,7 +60,7 @@
     	self.imageBox.Bind(wx.EVT_KEY_DOWN, self.keyEvent)
     	self.imageBox.Bind(wx.EVT_MIDDLE_UP, self.endDrag)
     	self.imageBox.SetBackgroundColour((0,0,0,0))
-    	self.imageBox.Bind(wx.EVT_LEFT_DOWN, self.next)
+    	self.imageBox.Bind(wx.EVT_LEFT_DOWN, self.__next__)
     	self.imageBox.Bind(wx.EVT_RIGHT_DOWN, self.prev)
 
     def nameFromUrl(self,url):
@@ -120,7 +120,7 @@
     	x = (self.imageBox.Size[0] - self.width)/2.0
     	y = (self.imageBox.Size[1] - self.height)/2.0
     	tmp = wx.StaticBitmap(self.imageBox,wx.ID_ANY,bmp,(x,y))
-    	tmp.Bind(wx.EVT_LEFT_DOWN, self.next)
+    	tmp.Bind(wx.EVT_LEFT_DOWN, self.__next__)
     	tmp.Bind(wx.EVT_RIGHT_DOWN, self.prev)
     	tmp.Bind(wx.EVT_MOTION, self.drag)
     	tmp.Bind(wx.EVT_MIDDLE_UP, self.endDrag)
--- Research/wx doco/ImageViewer3.py	(original)
+++ Research/wx doco/ImageViewer3.py	(refactored)
@@ -70,7 +70,7 @@
 
 def GetJpgList(dir):
     jpgs = [f for f in os.listdir(dir) if f[-4:] == ".jpg"]
-    print "JPGS are:", jpgs
+    print("JPGS are:", jpgs)
 
     return [os.path.join(dir, f) for f in jpgs]
 
--- Research/wx doco/ImageViewer7.py	(original)
+++ Research/wx doco/ImageViewer7.py	(refactored)
@@ -73,12 +73,12 @@
         pass
     
     def OnWheel(self, event):    # ANDY
-        print "wheeeeel %s" % event.ControlDown()  # http://www.cs.cofc.edu/~jimmy/wxPython/wx153.htm#topic592
-        
-        print event
+        print("wheeeeel %s" % event.ControlDown())  # http://www.cs.cofc.edu/~jimmy/wxPython/wx153.htm#topic592
+        
+        print(event)
         delta = event.GetWheelDelta() 
         rot = event.GetWheelRotation() 
-        print 'delta', delta, 'rot', rot
+        print('delta', delta, 'rot', rot)
         
         if event.ControlDown():
             INCR = 1.3
@@ -88,7 +88,7 @@
                 self.andyscale /= INCR
             if self.andyscale == 0:
                 self.andyscale = 1.0 
-            print self.andyscale
+            print(self.andyscale)
             self.ClearBackground() 
             self.Refresh()
         else:
@@ -159,8 +159,8 @@
                 # move the map in the view
                 #self.view_offset_x += dx
                 #self.view_offset_y += dy
-                print "PAN %d %d" % (dx, dy)
-                print self.GetViewStart()
+                print("PAN %d %d" % (dx, dy))
+                print(self.GetViewStart())
                 currx, curry = self.GetViewStart()
                 self.Scroll(currx+dx, curry+dy)  # Note The positions are in scroll units, not pixels, so to convert to pixels you will have to multiply by the number of pixels per scroll increment. If either parameter is -1, that position will be ignored (no change in that direction).
                 
@@ -258,7 +258,7 @@
 
         for line in self.lines:
             for coords in line:
-                apply(dc.DrawLine, coords)
+                dc.DrawLine(*coords)
 
 
     def SetXY(self, event):
--- Research/wx doco/ImageViewer7a.py	(original)
+++ Research/wx doco/ImageViewer7a.py	(refactored)
@@ -98,13 +98,13 @@
         pass
     
     def OnWheel(self, event):    # ANDY
-        print "wheeeeel %s" % event.ControlDown()  # http://www.cs.cofc.edu/~jimmy/wxPython/wx153.htm#topic592
+        print("wheeeeel %s" % event.ControlDown())  # http://www.cs.cofc.edu/~jimmy/wxPython/wx153.htm#topic592
         #self.SetCursor(wx.StockCursor(wx.CURSOR_DEFAULT))
         
-        print event
+        print(event)
         delta = event.GetWheelDelta() 
         rot = event.GetWheelRotation() 
-        print 'delta', delta, 'rot', rot
+        print('delta', delta, 'rot', rot)
         
         if event.ControlDown():
             self.zoom(rot < 0)
@@ -128,7 +128,7 @@
         delta = event.GetWheelDelta()
         rot = event.GetWheelRotation()
         linesPer = event.GetLinesPerAction()
-        print delta, rot, linesPer
+        print(delta, rot, linesPer)
         linesPer *= 20   # ANDY trick to override the small ScrollRate
         ws = self.andywheelScroll
         ws = ws + rot
@@ -154,7 +154,7 @@
                 self.andyscale /= INCR
         if self.andyscale == 0:
             self.andyscale = 1.0 
-        print self.andyscale
+        print(self.andyscale)
         self.ClearBackground() 
         self.Refresh()
 
@@ -230,8 +230,8 @@
                 # move the map in the view
                 #self.view_offset_x += dx
                 #self.view_offset_y += dy
-                print "PAN %d %d" % (dx, dy)
-                print self.GetViewStart()
+                print("PAN %d %d" % (dx, dy))
+                print(self.GetViewStart())
                 currx, curry = self.GetViewStart()
                 self.Scroll(currx+dx, curry+dy)  # Note The positions are in scroll units, not pixels, so to convert to pixels you will have to multiply by the number of pixels per scroll increment. If either parameter is -1, that position will be ignored (no change in that direction).
                 
@@ -329,7 +329,7 @@
 
         for line in self.lines:
             for coords in line:
-                apply(dc.DrawLine, coords)
+                dc.DrawLine(*coords)
 
 
     def SetXY(self, event):   # PEN DRAWING
@@ -338,7 +338,7 @@
     def ConvertEventCoords(self, event):    # PEN DRAWING
         newpos = self.CalcUnscrolledPosition(event.GetX()*self.GetScaleX(), event.GetY()*self.GetScaleY())  # ANDY
         #newpos = self.CalcUnscrolledPosition(event.GetX(), event.GetY())
-        print newpos
+        print(newpos)
         return newpos
 
     def OnLeftButtonEvent(self, event):   # PEN DRAWING
--- Research/wx doco/ImageViewer7b.py	(original)
+++ Research/wx doco/ImageViewer7b.py	(refactored)
@@ -33,7 +33,7 @@
         
         if TRIMTO_VIRTUALSIZE:
             self.maxWidth, self.maxHeight = bmp.GetSize()[0], bmp.GetSize()[1]
-        print self.maxWidth, self.maxHeight
+        print(self.maxWidth, self.maxHeight)
         
         mask = wx.Mask(bmp, wx.BLUE)
         bmp.SetMask(mask)
@@ -173,7 +173,7 @@
             self.andyscale = 1.0
             self.bufferedzoom = 1.0
         #print "zoom %f bufferedzoom %f" % (self.andyscale, self.bufferedzoom)
-        print "zoom %f " % self.andyscale
+        print("zoom %f " % self.andyscale)
 
         if TRIMTO_VIRTUALSIZE:
             if BUFFERED:
@@ -217,8 +217,8 @@
             msg = "!!!!!!! "
         else:
             msg = "!       "
-        print msg + "(%s) NeedToClear %s GetVirtualSize %d getWidth %d GetClientSize %d self.GetViewStart() %d self.maxWidth %d " % \
-        (fromwheremsg, self.NeedToClear(), self.GetVirtualSize()[0], self.getWidth(), self.GetClientSize()[0], self.GetViewStart()[0], self.maxWidth)
+        print(msg + "(%s) NeedToClear %s GetVirtualSize %d getWidth %d GetClientSize %d self.GetViewStart() %d self.maxWidth %d " % \
+        (fromwheremsg, self.NeedToClear(), self.GetVirtualSize()[0], self.getWidth(), self.GetClientSize()[0], self.GetViewStart()[0], self.maxWidth))
         
     def OnPaint(self, event):   # ANDY
         if BUFFERED:
@@ -404,7 +404,7 @@
         dc.SetPen(wx.Pen('MEDIUM FOREST GREEN', 4))
         for line in self.lines:
             for coords in line:
-                apply(dc.DrawLine, coords)
+                dc.DrawLine(*coords)
 
 
     def SetXY(self, event):   # PEN DRAWING
--- Research/wx doco/frameshow1.py	(original)
+++ Research/wx doco/frameshow1.py	(refactored)
@@ -43,7 +43,7 @@
         self.SetTopWindow(self.frame)
 
         self.frame.Show(True)
-        print self.umlwin.GetSize()  # should be bigger now.  but it isn't???
+        print(self.umlwin.GetSize())  # should be bigger now.  but it isn't???
         # self.frame.SetSizer(self.sizer)
 
         self.umlwin.InitSizeAndObjs()  # Now that frame is visible and calculated, there should be sensible world coords to use
@@ -86,7 +86,7 @@
         # Only call this once enclosing frame has been set up, so that get correct world coord dimensions
 
         width, height = self.GetSize()
-        print width < MIN_SENSIBLE_CANVAS_SIZE or height < MIN_SENSIBLE_CANVAS_SIZE
+        print(width < MIN_SENSIBLE_CANVAS_SIZE or height < MIN_SENSIBLE_CANVAS_SIZE)
 
         # assert not self.canvas_resizer.canvas_too_small(), "InitSizeAndObjs being called too early - please set up enclosing frame size first"
 
--- Research/wx doco/html_demo.py	(original)
+++ Research/wx doco/html_demo.py	(refactored)
@@ -238,7 +238,7 @@
         if text[-1:] == '\n':
             text = text[:-1]
         # wx.LogMessage(text)
-        print text
+        print(text)
 
     write = WriteText
 
--- Research/wx doco/rclick_popup_menu1.py	(original)
+++ Research/wx doco/rclick_popup_menu1.py	(refactored)
@@ -67,7 +67,7 @@
 
         ### 2. Launcher creates wxMenu. ###
         menu = wxMenu()
-        for (id,title) in menu_title_by_id.items():
+        for (id,title) in list(menu_title_by_id.items()):
             ### 3. Launcher packs menu with Append. ###
             menu.Append( id, title )
             ### 4. Launcher registers menu handlers with EVT_MENU, on the menu. ###
@@ -81,7 +81,7 @@
         # do something
         operation = menu_title_by_id[ event.GetId() ]
         target    = self.list_item_clicked
-        print 'Perform "%(operation)s" on "%(target)s."' % vars()
+        print('Perform "%(operation)s" on "%(target)s."' % vars())
 
 app = App()
 app.MainLoop()
--- Research/wx doco/scroll_window_in_action1.py	(original)
+++ Research/wx doco/scroll_window_in_action1.py	(refactored)
@@ -4,9 +4,9 @@
         wx.Frame.__init__(self, None, -1, 'Scrollbar Example',
         size=(300, 200))
         self.scroll = wx.ScrolledWindow(self, -1)
-        print "GetVirtualSize()", self.GetVirtualSize()
+        print("GetVirtualSize()", self.GetVirtualSize())
         self.scroll.SetScrollbars(1, 1, 600, 400)
-        print "GetVirtualSize()", self.GetVirtualSize()
+        print("GetVirtualSize()", self.GetVirtualSize())
         self.button = wx.Button(self.scroll, -1, "Scroll Me",
         pos=(50, 20))
         self.Bind(wx.EVT_BUTTON, self.OnClickTop, self.button)
@@ -15,13 +15,13 @@
         self.Bind(wx.EVT_BUTTON, self.OnClickBottom, self.button2)
     def OnClickTop(self, event):
         self.scroll.Scroll(600, 400)
-        print "FRAME"
-        print "GetVirtualSize()", self.GetVirtualSize()
-        print "GetSize()", self.GetSize()
-        print "ScrolledWindow ------ "
-        print "GetVirtualSize()", self.scroll.GetVirtualSize()
-        print "GetSize()", self.scroll.GetSize()
-        print '**********'
+        print("FRAME")
+        print("GetVirtualSize()", self.GetVirtualSize())
+        print("GetSize()", self.GetSize())
+        print("ScrolledWindow ------ ")
+        print("GetVirtualSize()", self.scroll.GetVirtualSize())
+        print("GetSize()", self.scroll.GetSize())
+        print('**********')
         
         
     def OnClickBottom(self, event):
--- Research/wx doco/someStyledTextCtrl1.py	(original)
+++ Research/wx doco/someStyledTextCtrl1.py	(refactored)
@@ -48,7 +48,7 @@
 
         """
         free = self._free
-        if c and isinstance(c, (str, unicode)):
+        if c and isinstance(c, str):
             c = c.lower()
         else:
             c = 'black'
--- Research/wx doco/someStyledTextCtrl4_spe1.py	(original)
+++ Research/wx doco/someStyledTextCtrl4_spe1.py	(refactored)
@@ -137,7 +137,7 @@
         return root
     
     def selectNode(self,node):
-        print "clciked!!!"
+        print("clciked!!!")
         """If a tree item is right clicked select the corresponding code"""
         self.GotoLine(node.start)
         self.SetSelection(
@@ -241,8 +241,8 @@
         self.Show()
     
 if __name__ == '__main__':
-    print 'This scintilla supports %d languages.'%len(STC_LANGUAGES)
-    print ', '.join(STC_LANGUAGES)
+    print('This scintilla supports %d languages.'%len(STC_LANGUAGES))
+    print(', '.join(STC_LANGUAGES))
     #app     = wx.PySimpleApp()
     app     = MyApp()
     frame   = Frame("Fold Explorer Demo")
--- Research/wx doco/somedoodle.py	(original)
+++ Research/wx doco/somedoodle.py	(refactored)
@@ -59,13 +59,13 @@
             self.colours)
         self.bindMenuEvents(menuHandler=self.onMenuSetColour,
             updateUIHandler=self.onCheckMenuColours,
-            ids=self.idToColourMap.keys())
+            ids=list(self.idToColourMap.keys()))
         self.menu.Break() # Next menu items go in a new column of the menu
         self.idToThicknessMap = self.addCheckableMenuItems(self.menu,
             self.thicknesses)
         self.bindMenuEvents(menuHandler=self.onMenuSetThickness,
             updateUIHandler=self.onCheckMenuThickness,
-            ids=self.idToThicknessMap.keys())
+            ids=list(self.idToThicknessMap.keys()))
 
     @staticmethod
     def addCheckableMenuItems(menu, items):
--- Research/wx doco/somedoublebufferingdemo.py	(original)
+++ Research/wx doco/somedoublebufferingdemo.py	(refactored)
@@ -104,7 +104,7 @@
         dc.Clear() # make sure you clear the bitmap!
 
         # Here's the actual drawing code.
-        for key, data in self.DrawData.items():
+        for key, data in list(self.DrawData.items()):
             if key == "Rectangles":
                 dc.SetBrush(wx.BLUE_BRUSH)
                 dc.SetPen(wx.Pen('VIOLET', 4))
--- Research/wx doco/somelongthread1_main.py	(original)
+++ Research/wx doco/somelongthread1_main.py	(refactored)
@@ -64,7 +64,7 @@
         setpos(shape, 100, 60)
         canvas.AddShape( shape )
 
-        print [getpos(shape) for shape in canvas.GetDiagram().GetShapeList()]
+        print([getpos(shape) for shape in canvas.GetDiagram().GetShapeList()])
         
         diagram.ShowAll( 1 )
 
--- Research/wx doco/somelongthread4_easy.py	(original)
+++ Research/wx doco/somelongthread4_easy.py	(refactored)
@@ -12,7 +12,7 @@
 """
 
 import wx
-import thread
+import _thread
 from time import sleep
 
 class MainFrame(wx.Frame):
@@ -37,7 +37,7 @@
         self.btn.Enable(False)
         self.gauge.SetValue(0)
         self.label.SetLabel("Running")
-        thread.start_new_thread(self.longRunning, ())
+        _thread.start_new_thread(self.longRunning, ())
 
     def onLongRunDone(self):
         self.gauge.SetValue(100)
--- Research/wx doco/somelongthread4_easy_interruptable.py	(original)
+++ Research/wx doco/somelongthread4_easy_interruptable.py	(refactored)
@@ -14,7 +14,7 @@
 """
 
 import wx
-import thread
+import _thread
 from time import sleep
 
 class MainFrame(wx.Frame):
@@ -48,7 +48,7 @@
         self.working = True
 
         if keycode == wx.WXK_ESCAPE:
-            print "ESC key detected: Abort"
+            print("ESC key detected: Abort")
             self.kill_layout = True
 
         self.working = False
@@ -59,7 +59,7 @@
         self.gauge.SetValue(0)
         self.label.SetLabel("Running")
         self.kill_layout = False
-        thread.start_new_thread(self.longRunning, ())
+        _thread.start_new_thread(self.longRunning, ())
 
     def onLongRunDone(self):
         self.gauge.SetValue(100)
--- Research/wx doco/someplot1.py	(original)
+++ Research/wx doco/someplot1.py	(refactored)
@@ -48,9 +48,9 @@
         self.scaled = self.points
         self.attributes = {}
         self.attributes.update(self._attributes)
-        for name, value in attr.items():
-            if name not in self._attributes.keys():
-                raise KeyError, "Style attribute incorrect. Should be one of %s" %self._attributes.keys()
+        for name, value in list(attr.items()):
+            if name not in list(self._attributes.keys()):
+                raise KeyError("Style attribute incorrect. Should be one of %s" %list(self._attributes.keys()))
             self.attributes[name] = value
 
     def boundingBox(self):
@@ -224,7 +224,7 @@
         yLabel - label shown on y-axis
         """
         if type(objects) not in [list,tuple]:
-            raise TypeError, "objects argument should be list or tuple"
+            raise TypeError("objects argument should be list or tuple")
         self.objects = objects
 
     def boundingBox(self):
@@ -433,7 +433,7 @@
             else:
                 return upper, lower
         else:
-            raise ValueError, str(spec) + ': illegal axis specification'
+            raise ValueError(str(spec) + ': illegal axis specification')
 
 #-------------------------------------------------------------------------------
 
@@ -611,8 +611,8 @@
             start = time.clock()
             for x in range(30):
                 self.client.Draw(_draw4Objects(data1))
-                print x,
-            print "\n30 plots of Draw4 took: %f sec."%(time.clock() - start)
+                print(x, end=' ')
+            print("\n30 plots of Draw4 took: %f sec."%(time.clock() - start))
             #profile end
 
         def OnPlotDraw5(self, event):
--- Research/wx doco/someplot2_scroll.py	(original)
+++ Research/wx doco/someplot2_scroll.py	(refactored)
@@ -47,12 +47,12 @@
  
         first, last = self.xRange
         if first >= last:
-            raise ValueError, "Illegal xRange: %s" % (str(xRange))
+            raise ValueError("Illegal xRange: %s" % (str(xRange)))
         self.dx = last - first
  
         first, last = self.yRange
         if first >= last:
-            raise ValueError, "Illegal yRange: %s" % (str(yRange))
+            raise ValueError("Illegal yRange: %s" % (str(yRange)))
         self.dy = last - first
  
         self._ppx = self.UX/self.dx
@@ -245,7 +245,7 @@
  
     def MouseClick(self, event):
         if not event:
-            print "there!"
+            print("there!")
             return
         self.last_event = event
         self.NewGraph()
--- Research/wx doco/zoom_canvas2d-plugin.py	(original)
+++ Research/wx doco/zoom_canvas2d-plugin.py	(refactored)
@@ -130,10 +130,10 @@
             newNode = self.AddNode(obj, info)
 
             oldLinesFrom, oldLinesTo = self.getAllLinesOfNode( id )                
-            for name, line in oldLinesFrom.items():
+            for name, line in list(oldLinesFrom.items()):
                 self.removeLineFromTo( id, name, line[0][0], line[0][1] )
                 self.addLineFromTo( id, name, line[0][0], line[0][1], newNode, self.nodeShapes[line[0][0]] )
-            for name, line in oldLinesTo.items():
+            for name, line in list(oldLinesTo.items()):
                 self.removeLineFromTo( line[0][0], line[0][1], id, name )
                 self.addLineFromTo( line[0][0], line[0][1], id, name, self.nodeShapes[line[0][0]], newNode )
 
@@ -172,9 +172,9 @@
     def DeleteNode(self, id, deleteConnections = True):        
         if deleteConnections:
             oldLinesFrom, oldLinesTo = self.getAllLinesOfNode( id )                
-            for name, line in oldLinesFrom.items():
+            for name, line in list(oldLinesFrom.items()):
                 self.removeLineFromTo( id, name, line[0][0], line[0][1] )
-            for name, line in oldLinesTo.items():
+            for name, line in list(oldLinesTo.items()):
                 self.removeLineFromTo( line[0][0], line[0][1], id, name )
     
         shape = self.nodeShapes[id]
@@ -262,7 +262,7 @@
         elif mode == 'dynamic':
             self.SetBackgroundColour( wx.Color(*Config.backgroundColorDynamic) )
         
-        for id, shape in self.nodeShapes.items():
+        for id, shape in list(self.nodeShapes.items()):
             shape.SetViewMode( mode )
 
 
@@ -271,7 +271,7 @@
     def OnChangePropertyValue(self, id, name, value, kind = 'static'):
         if kind == 'dynamic':
             def x():
-                for id, shape in self.nodeShapes.items():
+                for id, shape in list(self.nodeShapes.items()):
                     shape.update()
                 
             wx.CallAfter( x )
@@ -289,7 +289,7 @@
         
     def UpdateLines(self, shape, refresh = True):
         fromTo = self.getAllLinesOfNode( shape.node.id )
-        lines = fromTo[0].values() + fromTo[1].values()
+        lines = list(fromTo[0].values()) + list(fromTo[1].values())
         
         allLinesFrom = [ line[1] for line in lines ]
 
@@ -302,12 +302,12 @@
             self.Refresh()
     
     def UpdateAllLines(self, refresh = True):    
-        for shape in self.nodeShapes.values():
+        for shape in list(self.nodeShapes.values()):
             self.UpdateLines(shape, False)
         if refresh: self.Refresh()
 
     def Clear(self):
-        for id in self.nodeShapes.keys():
+        for id in list(self.nodeShapes.keys()):
             self.DeleteNode(id)
 
     def SetZoom(self, zoom):
@@ -344,12 +344,12 @@
             
             lineLabels = { 'Start' : upProp, 'Middle' : '%s - %s' % (upProp, downProp), 'End' : downProp }
             
-            for label, value in lineLabels.iteritems():
+            for label, value in lineLabels.items():
                 rgnId = self.GetRegionId(label)
                 self.FormatText(dc, value, rgnId)
                 
             for rgn in self.GetRegions():
-                if rgn.GetName() in lineLabels.keys():
+                if rgn.GetName() in list(lineLabels.keys()):
                     rgn.SetSize(70,10)
                     rgn.SetFont(wx.Font(8, wx.SWISS, wx.NORMAL, wx.NORMAL))
         
@@ -508,7 +508,7 @@
         return presenterinfo
 
 
-import cPickle as pickle
+import pickle as pickle
 
 class DropData(wx.CustomDataObject):
     def __init__(self):
--- Research/wx form builder/fbpyn1.py	(original)
+++ Research/wx form builder/fbpyn1.py	(refactored)
@@ -32,9 +32,9 @@
         from random import randint
         m_code2 = PythonSTC(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.WANTS_CHARS)
         if dofloat:
-            self.m_mgr.AddPane( m_code2, wx.aui.AuiPaneInfo() .Name( u"pane_code"+`randint(1,1000)` ).Right() .Caption( u"Source Code"+`randint(1,1000)` ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Float().Resizable().FloatingPosition((350,100)).FloatingSize( (350,500) ).DockFixed( False ) )
+            self.m_mgr.AddPane( m_code2, wx.aui.AuiPaneInfo() .Name( "pane_code"+repr(randint(1,1000)) ).Right() .Caption( "Source Code"+repr(randint(1,1000)) ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Float().Resizable().FloatingPosition((350,100)).FloatingSize( (350,500) ).DockFixed( False ) )
         else:
-            self.m_mgr.AddPane( m_code2, wx.aui.AuiPaneInfo() .Name( u"pane_code"+`randint(1,1000)` ).Right() .Caption( u"Source Code"+`randint(1,1000)` ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.DefaultSize ).DockFixed( False ) )
+            self.m_mgr.AddPane( m_code2, wx.aui.AuiPaneInfo() .Name( "pane_code"+repr(randint(1,1000)) ).Right() .Caption( "Source Code"+repr(randint(1,1000)) ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.DefaultSize ).DockFixed( False ) )
         m_code2.SetText(open(r'fbpyn1.py').read())
         m_code2.Colourise(0, m_code2.GetTextLength()) #make sure everything is lexed. or use (0, -1)
         self.andycollapsetodefs(m_code2)
@@ -50,7 +50,7 @@
     def OnFold1( self, event ):
         frame.m_code.ToggleFold(frame.m_code.GetCurrentLine())
         for i in range(0, 30):
-            print i, frame.m_code.GetLineVisible(i)
+            print(i, frame.m_code.GetLineVisible(i))
             
     def OnFoldAll( self, event ):
         frame.m_code.FoldAll()
--- Research/wx form builder/fbpyn1_gen.py	(original)
+++ Research/wx form builder/fbpyn1_gen.py	(refactored)
@@ -19,135 +19,135 @@
 class FramePyIdea_gen ( wx.Frame ):
 	
 	def __init__( self, parent ):
-		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"PyIdea UML", pos = wx.DefaultPosition, size = wx.Size( 500,300 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
+		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = "PyIdea UML", pos = wx.DefaultPosition, size = wx.Size( 500,300 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
 		
 		self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )
 		self.m_mgr = wx.aui.AuiManager()
 		self.m_mgr.SetManagedWindow( self )
 		
 		self.m_code = PythonSTC(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.WANTS_CHARS)
-		self.m_mgr.AddPane( self.m_code, wx.aui.AuiPaneInfo() .Name( u"pane_code" ).Right() .Caption( u"Source Code" ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.DefaultSize ).DockFixed( False ) )
+		self.m_mgr.AddPane( self.m_code, wx.aui.AuiPaneInfo() .Name( "pane_code" ).Right() .Caption( "Source Code" ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.DefaultSize ).DockFixed( False ) )
 		
 		self.m_menubar4 = wx.MenuBar( 0 )
 		self.m_menu2 = wx.Menu()
-		self.m_menuItem15 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"Import Python Source..."+ u"\t" + u"Ctrl+I", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem15 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "Import Python Source..."+ "\t" + "Ctrl+I", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.AppendItem( self.m_menuItem15 )
 		
 		self.m_menu2.AppendSeparator()
 		
-		self.m_menuItem16 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"New"+ u"\t" + u"Ctrl+N", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem16 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "New"+ "\t" + "Ctrl+N", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.AppendItem( self.m_menuItem16 )
 		
-		self.m_menuItem17 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"Open..."+ u"\t" + u"Ctrl-O", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem17 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "Open..."+ "\t" + "Ctrl-O", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.AppendItem( self.m_menuItem17 )
 		
-		self.m_menuItem18 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"Save"+ u"\t" + u"Ctrl-S", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem18 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "Save"+ "\t" + "Ctrl-S", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.AppendItem( self.m_menuItem18 )
 		
-		self.m_menuItem21 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"Save As...", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem21 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "Save As...", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.AppendItem( self.m_menuItem21 )
 		
 		self.m_menu2.AppendSeparator()
 		
-		self.m_menuItem20 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"Print / Print Preview..."+ u"\t" + u"Ctrl-P", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem20 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "Print / Print Preview..."+ "\t" + "Ctrl-P", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.AppendItem( self.m_menuItem20 )
 		
 		self.m_menu2.AppendSeparator()
 		
-		self.m_menuItem19 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"Exit"+ u"\t" + u"Alt+F4", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem19 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "Exit"+ "\t" + "Alt+F4", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.AppendItem( self.m_menuItem19 )
 		
-		self.m_menubar4.Append( self.m_menu2, u"File" ) 
+		self.m_menubar4.Append( self.m_menu2, "File" ) 
 		
 		self.m_menu6 = wx.Menu()
-		self.m_menuItem26 = wx.MenuItem( self.m_menu6, wx.ID_ANY, u"Add Class..."+ u"\t" + u"Ctrl+Ins", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem26 = wx.MenuItem( self.m_menu6, wx.ID_ANY, "Add Class..."+ "\t" + "Ctrl+Ins", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu6.AppendItem( self.m_menuItem26 )
 		
-		self.m_menuItem14 = wx.MenuItem( self.m_menu6, wx.ID_ANY, u"Delete Class"+ u"\t" + u"Ctrl+Del", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem14 = wx.MenuItem( self.m_menu6, wx.ID_ANY, "Delete Class"+ "\t" + "Ctrl+Del", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu6.AppendItem( self.m_menuItem14 )
 		
 		self.m_menu6.AppendSeparator()
 		
-		self.m_menuItem29 = wx.MenuItem( self.m_menu6, wx.ID_ANY, u"Class Properties..."+ u"\t" + u"Ctrl+T", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem29 = wx.MenuItem( self.m_menu6, wx.ID_ANY, "Class Properties..."+ "\t" + "Ctrl+T", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu6.AppendItem( self.m_menuItem29 )
 		
-		self.m_menuItem28 = wx.MenuItem( self.m_menu6, wx.ID_ANY, u"Class Source Code..."+ u"\t" + u"Ctrl+E", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem28 = wx.MenuItem( self.m_menu6, wx.ID_ANY, "Class Source Code..."+ "\t" + "Ctrl+E", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu6.AppendItem( self.m_menuItem28 )
 		
-		self.m_menubar4.Append( self.m_menu6, u"Edit" ) 
+		self.m_menubar4.Append( self.m_menu6, "Edit" ) 
 		
 		self.m_menu7 = wx.Menu()
-		self.m_menuItem81 = wx.MenuItem( self.m_menu7, wx.ID_ANY, u"Layout"+ u"\t" + u"Ctrl+L", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem81 = wx.MenuItem( self.m_menu7, wx.ID_ANY, "Layout"+ "\t" + "Ctrl+L", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu7.AppendItem( self.m_menuItem81 )
 		
-		self.m_menuItem35 = wx.MenuItem( self.m_menu7, wx.ID_ANY, u"Layout Optimal (slower)", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem35 = wx.MenuItem( self.m_menu7, wx.ID_ANY, "Layout Optimal (slower)", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu7.AppendItem( self.m_menuItem35 )
 		
 		self.m_menu7.AppendSeparator()
 		
-		self.m_menuItem31 = wx.MenuItem( self.m_menu7, wx.ID_ANY, u"Decrease Node Spread"+ u"\t" + u"Ctrl+1", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem31 = wx.MenuItem( self.m_menu7, wx.ID_ANY, "Decrease Node Spread"+ "\t" + "Ctrl+1", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu7.AppendItem( self.m_menuItem31 )
 		
-		self.m_menuItem30 = wx.MenuItem( self.m_menu7, wx.ID_ANY, u"Increase Node Spread"+ u"\t" + u"Ctrl+2", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem30 = wx.MenuItem( self.m_menu7, wx.ID_ANY, "Increase Node Spread"+ "\t" + "Ctrl+2", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu7.AppendItem( self.m_menuItem30 )
 		
 		self.m_menu7.AppendSeparator()
 		
-		self.m_menuItem24 = wx.MenuItem( self.m_menu7, wx.ID_ANY, u"UML", wx.EmptyString, wx.ITEM_CHECK )
+		self.m_menuItem24 = wx.MenuItem( self.m_menu7, wx.ID_ANY, "UML", wx.EmptyString, wx.ITEM_CHECK )
 		self.m_menu7.AppendItem( self.m_menuItem24 )
 		self.m_menuItem24.Enable( False )
 		self.m_menuItem24.Check( True )
 		
-		self.m_menuItem22 = wx.MenuItem( self.m_menu7, wx.ID_ANY, u"Ascii Art Uml", wx.EmptyString, wx.ITEM_CHECK )
+		self.m_menuItem22 = wx.MenuItem( self.m_menu7, wx.ID_ANY, "Ascii Art Uml", wx.EmptyString, wx.ITEM_CHECK )
 		self.m_menu7.AppendItem( self.m_menuItem22 )
 		
-		self.m_menuItem23 = wx.MenuItem( self.m_menu7, wx.ID_ANY, u"yUml", wx.EmptyString, wx.ITEM_CHECK )
+		self.m_menuItem23 = wx.MenuItem( self.m_menu7, wx.ID_ANY, "yUml", wx.EmptyString, wx.ITEM_CHECK )
 		self.m_menu7.AppendItem( self.m_menuItem23 )
 		
 		self.m_menu7.AppendSeparator()
 		
-		self.m_menuItem7 = wx.MenuItem( self.m_menu7, wx.ID_ANY, u"Redraw Screen"+ u"\t" + u"Ctrl+R", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem7 = wx.MenuItem( self.m_menu7, wx.ID_ANY, "Redraw Screen"+ "\t" + "Ctrl+R", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu7.AppendItem( self.m_menuItem7 )
 		
-		self.m_menubar4.Append( self.m_menu7, u"View" ) 
+		self.m_menubar4.Append( self.m_menu7, "View" ) 
 		
 		self.m_menu8 = wx.Menu()
-		self.m_menuItem9 = wx.MenuItem( self.m_menu8, wx.ID_ANY, u"Help..."+ u"\t" + u"F1", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem9 = wx.MenuItem( self.m_menu8, wx.ID_ANY, "Help..."+ "\t" + "F1", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu8.AppendItem( self.m_menuItem9 )
 		
-		self.m_menuItem11 = wx.MenuItem( self.m_menu8, wx.ID_ANY, u"Visit PyNSource Website...", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem11 = wx.MenuItem( self.m_menu8, wx.ID_ANY, "Visit PyNSource Website...", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu8.AppendItem( self.m_menuItem11 )
 		
 		self.m_menu8.AppendSeparator()
 		
-		self.m_menuItem12 = wx.MenuItem( self.m_menu8, wx.ID_ANY, u"Check for Updates...", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem12 = wx.MenuItem( self.m_menu8, wx.ID_ANY, "Check for Updates...", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu8.AppendItem( self.m_menuItem12 )
 		
-		self.m_menuItem13 = wx.MenuItem( self.m_menu8, wx.ID_ANY, u"About...", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem13 = wx.MenuItem( self.m_menu8, wx.ID_ANY, "About...", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu8.AppendItem( self.m_menuItem13 )
 		
-		self.m_menubar4.Append( self.m_menu8, u"Help" ) 
+		self.m_menubar4.Append( self.m_menu8, "Help" ) 
 		
 		self.m_menu5 = wx.Menu()
-		self.m_menuItem8 = wx.MenuItem( self.m_menu5, wx.ID_ANY, u"Show Pane", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem8 = wx.MenuItem( self.m_menu5, wx.ID_ANY, "Show Pane", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu5.AppendItem( self.m_menuItem8 )
 		
-		self.m_menuItem2 = wx.MenuItem( self.m_menu5, wx.ID_ANY, u"Add Pane", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem2 = wx.MenuItem( self.m_menu5, wx.ID_ANY, "Add Pane", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu5.AppendItem( self.m_menuItem2 )
 		
-		self.m_menuItem6 = wx.MenuItem( self.m_menu5, wx.ID_ANY, u"Add Pane (float)", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem6 = wx.MenuItem( self.m_menu5, wx.ID_ANY, "Add Pane (float)", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu5.AppendItem( self.m_menuItem6 )
 		
-		self.m_menuItem3 = wx.MenuItem( self.m_menu5, wx.ID_ANY, u"Fold1", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem3 = wx.MenuItem( self.m_menu5, wx.ID_ANY, "Fold1", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu5.AppendItem( self.m_menuItem3 )
 		
-		self.m_menuItem4 = wx.MenuItem( self.m_menu5, wx.ID_ANY, u"Fold All", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem4 = wx.MenuItem( self.m_menu5, wx.ID_ANY, "Fold All", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu5.AppendItem( self.m_menuItem4 )
 		
-		self.m_menuItem5 = wx.MenuItem( self.m_menu5, wx.ID_ANY, u"Hier", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem5 = wx.MenuItem( self.m_menu5, wx.ID_ANY, "Hier", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu5.AppendItem( self.m_menuItem5 )
 		
-		self.m_menubar4.Append( self.m_menu5, u"Debug" ) 
+		self.m_menubar4.Append( self.m_menu5, "Debug" ) 
 		
 		self.SetMenuBar( self.m_menubar4 )
 		
@@ -156,16 +156,16 @@
 		diagram = ogl.Diagram()
 		self.canvas.SetDiagram( diagram )
 		diagram.SetCanvas( self.canvas )
-		self.m_mgr.AddPane( self.canvas, wx.aui.AuiPaneInfo() .Left() .Caption( u"UML" ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.DefaultSize ).DockFixed( False ).CentrePane() )
+		self.m_mgr.AddPane( self.canvas, wx.aui.AuiPaneInfo() .Left() .Caption( "UML" ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.DefaultSize ).DockFixed( False ).CentrePane() )
 		
 		self.m_auiToolBar2 = wx.aui.AuiToolBar( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.aui.AUI_TB_HORZ_LAYOUT ) 
-		self.m_auiToolBar2.AddTool( wx.ID_ANY, u"sssddddd", wx.Bitmap( u"icons22/kcmscsi.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"ssss", wx.EmptyString, None)
-		self.m_auiToolBar2.AddTool( wx.ID_ANY, u"tool", wx.Bitmap( u"icons22/kmoon.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
-		self.m_auiToolBar2.AddTool( wx.ID_ANY, u"tool", wx.Bitmap( u"icons22/kalzium.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
+		self.m_auiToolBar2.AddTool( wx.ID_ANY, "sssddddd", wx.Bitmap( "icons22/kcmscsi.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, "ssss", wx.EmptyString, None)
+		self.m_auiToolBar2.AddTool( wx.ID_ANY, "tool", wx.Bitmap( "icons22/kmoon.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
+		self.m_auiToolBar2.AddTool( wx.ID_ANY, "tool", wx.Bitmap( "icons22/kalzium.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
 		self.m_auiToolBar2.AddSeparator()
-		self.m_auiToolBar2.AddTool( wx.ID_ANY, u"tool", wx.Bitmap( u"icons22/kedit.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
-		self.m_auiToolBar2.AddTool( wx.ID_ANY, u"tool", wx.Bitmap( u"icons22/kcmprocessor.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
-		self.m_auiToolBar2.AddTool( wx.ID_ANY, u"tool", wx.Bitmap( u"icons22/kcmmidi.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
+		self.m_auiToolBar2.AddTool( wx.ID_ANY, "tool", wx.Bitmap( "icons22/kedit.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
+		self.m_auiToolBar2.AddTool( wx.ID_ANY, "tool", wx.Bitmap( "icons22/kcmprocessor.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
+		self.m_auiToolBar2.AddTool( wx.ID_ANY, "tool", wx.Bitmap( "icons22/kcmmidi.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, wx.EmptyString, wx.EmptyString, None)
 		self.m_auiToolBar2.Realize()
 		self.m_mgr.AddPane( self.m_auiToolBar2, wx.aui.AuiPaneInfo().Top().CaptionVisible( False ).CloseButton( False ).MaximizeButton( False ).MinimizeButton( False ).PinButton( False ).PaneBorder( False ).Movable( False ).Dock().Fixed().DockFixed( False ).Floatable( False ).Layer( 1 ) )
 		
--- Research/wx form builder/fbtest01.py	(original)
+++ Research/wx form builder/fbtest01.py	(refactored)
@@ -3,7 +3,7 @@
 	
 class MyFrame1A ( MyFrame1 ):
 	def OnButton1( self, event ):
-		print "button pushed"
+		print("button pushed")
 	
 	def OnHtml2( self, event ):
 		url = "http://www.wxpython.org/docs/api/wx.html.HtmlWindow-class.html"
--- Research/wx form builder/fbtest01_gen.py	(original)
+++ Research/wx form builder/fbtest01_gen.py	(refactored)
@@ -33,19 +33,19 @@
 		self.m_panel1.SetSizer( bSizer4 )
 		self.m_panel1.Layout()
 		bSizer4.Fit( self.m_panel1 )
-		self.m_notebook2.AddPage( self.m_panel1, u"a page", True )
+		self.m_notebook2.AddPage( self.m_panel1, "a page", True )
 		self.m_panel6 = wx.Panel( self.m_notebook2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
 		bSizer5 = wx.BoxSizer( wx.VERTICAL )
 		
 		bSizer6 = wx.BoxSizer( wx.HORIZONTAL )
 		
-		self.m_button5 = wx.Button( self.m_panel6, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button5 = wx.Button( self.m_panel6, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer6.Add( self.m_button5, 0, wx.ALL, 5 )
 		
-		self.m_button6 = wx.Button( self.m_panel6, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button6 = wx.Button( self.m_panel6, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer6.Add( self.m_button6, 0, wx.ALL, 5 )
 		
-		self.m_button7 = wx.Button( self.m_panel6, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button7 = wx.Button( self.m_panel6, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer6.Add( self.m_button7, 0, wx.ALL, 5 )
 		
 		bSizer5.Add( bSizer6, 1, wx.EXPAND, 5 )
@@ -67,14 +67,14 @@
 		self.m_panel6.SetSizer( bSizer5 )
 		self.m_panel6.Layout()
 		bSizer5.Fit( self.m_panel6 )
-		self.m_notebook2.AddPage( self.m_panel6, u"a page", False )
+		self.m_notebook2.AddPage( self.m_panel6, "a page", False )
 		self.m_panel7 = wx.Panel( self.m_notebook2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
 		bSizer8 = wx.BoxSizer( wx.VERTICAL )
 		
 		self.m_panel7.SetSizer( bSizer8 )
 		self.m_panel7.Layout()
 		bSizer8.Fit( self.m_panel7 )
-		self.m_notebook2.AddPage( self.m_panel7, u"a page", False )
+		self.m_notebook2.AddPage( self.m_panel7, "a page", False )
 		
 		bSizer1.Add( self.m_notebook2, 1, wx.EXPAND |wx.ALL, 5 )
 		
@@ -86,10 +86,10 @@
 		
 		bSizer2 = wx.BoxSizer( wx.VERTICAL )
 		
-		self.m_button1 = wx.Button( self.m_panel4, wx.ID_ANY, u"Load Html", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button1 = wx.Button( self.m_panel4, wx.ID_ANY, "Load Html", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer2.Add( self.m_button1, 0, wx.ALL|wx.EXPAND, 5 )
 		
-		self.m_button2 = wx.Button( self.m_panel4, wx.ID_ANY, u"Load Html 2", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button2 = wx.Button( self.m_panel4, wx.ID_ANY, "Load Html 2", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer2.Add( self.m_button2, 0, wx.ALL|wx.EXPAND, 5 )
 		
 		self.m_panel4.SetSizer( bSizer2 )
@@ -108,7 +108,7 @@
 		bSizer3.Add( self.m_slider2, 0, wx.ALL|wx.EXPAND, 5 )
 		
 		m_comboBox1Choices = []
-		self.m_comboBox1 = wx.ComboBox( self.m_scrolledWindow1, wx.ID_ANY, u"Combo!", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, 0 )
+		self.m_comboBox1 = wx.ComboBox( self.m_scrolledWindow1, wx.ID_ANY, "Combo!", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, 0 )
 		bSizer3.Add( self.m_comboBox1, 0, wx.ALL, 5 )
 		
 		self.m_gauge1 = wx.Gauge( self.m_scrolledWindow1, wx.ID_ANY, 100, wx.DefaultPosition, wx.DefaultSize, wx.GA_HORIZONTAL )
@@ -118,7 +118,7 @@
 		self.m_slider3 = wx.Slider( self.m_scrolledWindow1, wx.ID_ANY, 50, 0, 100, wx.DefaultPosition, wx.DefaultSize, wx.SL_HORIZONTAL )
 		bSizer3.Add( self.m_slider3, 0, wx.ALL, 5 )
 		
-		self.m_button3 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button3 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button3, 0, wx.ALL, 5 )
 		
 		self.m_scrolledWindow1.SetSizer( bSizer3 )
--- Research/wx form builder/some_fb2_1.py	(original)
+++ Research/wx form builder/some_fb2_1.py	(refactored)
@@ -8,13 +8,13 @@
 	
 class MyFrame3A ( MyFrame3 ):
 	def OnButton1( self, event ):
-		print "button pushed"
+		print("button pushed")
 	
 	def OnHi( self, event ):
-		print "hi"
+		print("hi")
 
 	def OnSay( self, event ):
-		print "say"
+		print("say")
 
 app = wx.App()
 
--- Research/wx form builder/some_fb2_3.py	(original)
+++ Research/wx form builder/some_fb2_3.py	(refactored)
@@ -7,13 +7,13 @@
 	
 class MyFrame3A ( MyFrame3 ):
 	def OnButton1( self, event ):
-		print "button pushed"
+		print("button pushed")
 	
 	def OnHi( self, event ):
-		print "hi"
+		print("hi")
 
 	def OnSay( self, event ):
-		print "say"
+		print("say")
 
 app = wx.App()
 
--- Research/wx form builder/some_fb2_gen.py	(original)
+++ Research/wx form builder/some_fb2_gen.py	(refactored)
@@ -25,16 +25,16 @@
 		bSizer1 = wx.BoxSizer( wx.VERTICAL )
 		
 		self.m_auiToolBar1 = wx.aui.AuiToolBar( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.aui.AUI_TB_HORZ_LAYOUT ) 
-		self.m_button1 = wx.Button( self.m_auiToolBar1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button1 = wx.Button( self.m_auiToolBar1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		self.m_auiToolBar1.AddControl( self.m_button1 )
 		self.m_bpButton1 = wx.BitmapButton( self.m_auiToolBar1, wx.ID_ANY, wx.NullBitmap, wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
 		self.m_auiToolBar1.AddControl( self.m_bpButton1 )
-		self.m_staticText1 = wx.StaticText( self.m_auiToolBar1, wx.ID_ANY, u"MyLabel", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_staticText1 = wx.StaticText( self.m_auiToolBar1, wx.ID_ANY, "MyLabel", wx.DefaultPosition, wx.DefaultSize, 0 )
 		self.m_staticText1.Wrap( -1 )
 		self.m_auiToolBar1.AddControl( self.m_staticText1 )
 		self.m_slider1 = wx.Slider( self.m_auiToolBar1, wx.ID_ANY, 50, 0, 100, wx.DefaultPosition, wx.DefaultSize, wx.SL_HORIZONTAL )
 		self.m_auiToolBar1.AddControl( self.m_slider1 )
-		self.m_button2 = wx.Button( self.m_auiToolBar1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button2 = wx.Button( self.m_auiToolBar1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		self.m_auiToolBar1.AddControl( self.m_button2 )
 		self.m_auiToolBar1.Realize() 
 		
@@ -42,9 +42,9 @@
 		
 		self.m_auinotebook1 = wx.aui.AuiNotebook( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.aui.AUI_NB_DEFAULT_STYLE )
 		self.m_panel4 = wx.Panel( self.m_auinotebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
-		self.m_auinotebook1.AddPage( self.m_panel4, u"a page", True, wx.NullBitmap )
+		self.m_auinotebook1.AddPage( self.m_panel4, "a page", True, wx.NullBitmap )
 		self.m_panel5 = wx.Panel( self.m_auinotebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
-		self.m_auinotebook1.AddPage( self.m_panel5, u"a page", False, wx.NullBitmap )
+		self.m_auinotebook1.AddPage( self.m_panel5, "a page", False, wx.NullBitmap )
 		
 		bSizer1.Add( self.m_auinotebook1, 1, wx.EXPAND |wx.ALL, 5 )
 		
@@ -53,28 +53,28 @@
 		self.m_statusBar1 = self.CreateStatusBar( 1, wx.ST_SIZEGRIP, wx.ID_ANY )
 		self.m_menubar1 = wx.MenuBar( 0 )
 		self.m_menu1 = wx.Menu()
-		self.m_menuItem1 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem1 = wx.MenuItem( self.m_menu1, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem1 )
 		
-		self.m_menuItem2 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem2 = wx.MenuItem( self.m_menu1, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem2 )
 		
-		self.m_menuItem3 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem3 = wx.MenuItem( self.m_menu1, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem3 )
 		
-		self.m_menubar1.Append( self.m_menu1, u"MyMenu" ) 
+		self.m_menubar1.Append( self.m_menu1, "MyMenu" ) 
 		
 		self.m_menu3 = wx.Menu()
 		self.m_menu11 = wx.Menu()
-		self.m_menuItem4 = wx.MenuItem( self.m_menu11, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem4 = wx.MenuItem( self.m_menu11, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu11.AppendItem( self.m_menuItem4 )
 		
-		self.m_menuItem5 = wx.MenuItem( self.m_menu11, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem5 = wx.MenuItem( self.m_menu11, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu11.AppendItem( self.m_menuItem5 )
 		
-		self.m_menu3.AppendSubMenu( self.m_menu11, u"MyMenu" )
-		
-		self.m_menubar1.Append( self.m_menu3, u"MyMenu" ) 
+		self.m_menu3.AppendSubMenu( self.m_menu11, "MyMenu" )
+		
+		self.m_menubar1.Append( self.m_menu3, "MyMenu" ) 
 		
 		self.SetMenuBar( self.m_menubar1 )
 		
@@ -109,7 +109,7 @@
 		self.m_panel1.SetSizer( bSizer4 )
 		self.m_panel1.Layout()
 		bSizer4.Fit( self.m_panel1 )
-		self.m_notebook1.AddPage( self.m_panel1, u"Ed", False )
+		self.m_notebook1.AddPage( self.m_panel1, "Ed", False )
 		self.m_panel2 = wx.Panel( self.m_notebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
 		bSizer5 = wx.BoxSizer( wx.VERTICAL )
 		
@@ -120,9 +120,9 @@
 		self.m_panel2.SetSizer( bSizer5 )
 		self.m_panel2.Layout()
 		bSizer5.Fit( self.m_panel2 )
-		self.m_notebook1.AddPage( self.m_panel2, u"andycustom", True )
+		self.m_notebook1.AddPage( self.m_panel2, "andycustom", True )
 		self.m_panel3 = wx.Panel( self.m_notebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
-		self.m_notebook1.AddPage( self.m_panel3, u"a page", False )
+		self.m_notebook1.AddPage( self.m_panel3, "a page", False )
 		
 		bSizer2.Add( self.m_notebook1, 1, wx.EXPAND |wx.ALL, 5 )
 		
@@ -142,21 +142,21 @@
 class MyFrame3 ( wx.Frame ):
 	
 	def __init__( self, parent ):
-		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"AUI Andy Demo", pos = wx.DefaultPosition, size = wx.Size( 535,348 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
+		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = "AUI Andy Demo", pos = wx.DefaultPosition, size = wx.Size( 535,348 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
 		
 		self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )
 		self.m_mgr = wx.aui.AuiManager()
 		self.m_mgr.SetManagedWindow( self )
 		
 		self.m_panel6 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
-		self.m_mgr.AddPane( self.m_panel6, wx.aui.AuiPaneInfo() .Left() .Caption( u"Tools" ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.Size( 116,154 ) ).DockFixed( False ).Row( 1 ).BestSize( wx.Size( 100,-1 ) ) )
+		self.m_mgr.AddPane( self.m_panel6, wx.aui.AuiPaneInfo() .Left() .Caption( "Tools" ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.Size( 116,154 ) ).DockFixed( False ).Row( 1 ).BestSize( wx.Size( 100,-1 ) ) )
 		
 		bSizer3 = wx.BoxSizer( wx.VERTICAL )
 		
-		self.m_button3 = wx.Button( self.m_panel6, wx.ID_ANY, u"Import", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button3 = wx.Button( self.m_panel6, wx.ID_ANY, "Import", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button3, 0, wx.ALL|wx.EXPAND, 5 )
 		
-		self.m_button4 = wx.Button( self.m_panel6, wx.ID_ANY, u"Say", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button4 = wx.Button( self.m_panel6, wx.ID_ANY, "Say", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button4, 0, wx.ALL|wx.EXPAND, 5 )
 		
 		self.m_panel6.SetSizer( bSizer3 )
@@ -167,10 +167,10 @@
 		
 		self.m_menubar2 = wx.MenuBar( 0 )
 		self.m_menu4 = wx.Menu()
-		self.m_menuItem6 = wx.MenuItem( self.m_menu4, wx.ID_ANY, u"Hi", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem6 = wx.MenuItem( self.m_menu4, wx.ID_ANY, "Hi", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu4.AppendItem( self.m_menuItem6 )
 		
-		self.m_menubar2.Append( self.m_menu4, u"MyMenu" ) 
+		self.m_menubar2.Append( self.m_menu4, "MyMenu" ) 
 		
 		self.SetMenuBar( self.m_menubar2 )
 		
--- Research/wx form builder/some_fb2_gen_altered.py	(original)
+++ Research/wx form builder/some_fb2_gen_altered.py	(refactored)
@@ -24,16 +24,16 @@
 		bSizer1 = wx.BoxSizer( wx.VERTICAL )
 		
 		self.m_auiToolBar1 = wx.aui.AuiToolBar( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.aui.AUI_TB_HORZ_LAYOUT ) 
-		self.m_button1 = wx.Button( self.m_auiToolBar1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button1 = wx.Button( self.m_auiToolBar1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		self.m_auiToolBar1.AddControl( self.m_button1 )
 		self.m_bpButton1 = wx.BitmapButton( self.m_auiToolBar1, wx.ID_ANY, wx.NullBitmap, wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )
 		self.m_auiToolBar1.AddControl( self.m_bpButton1 )
-		self.m_staticText1 = wx.StaticText( self.m_auiToolBar1, wx.ID_ANY, u"MyLabel", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_staticText1 = wx.StaticText( self.m_auiToolBar1, wx.ID_ANY, "MyLabel", wx.DefaultPosition, wx.DefaultSize, 0 )
 		self.m_staticText1.Wrap( -1 )
 		self.m_auiToolBar1.AddControl( self.m_staticText1 )
 		self.m_slider1 = wx.Slider( self.m_auiToolBar1, wx.ID_ANY, 50, 0, 100, wx.DefaultPosition, wx.DefaultSize, wx.SL_HORIZONTAL )
 		self.m_auiToolBar1.AddControl( self.m_slider1 )
-		self.m_button2 = wx.Button( self.m_auiToolBar1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button2 = wx.Button( self.m_auiToolBar1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		self.m_auiToolBar1.AddControl( self.m_button2 )
 		self.m_auiToolBar1.Realize() 
 		
@@ -41,9 +41,9 @@
 		
 		self.m_auinotebook1 = wx.aui.AuiNotebook( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.aui.AUI_NB_DEFAULT_STYLE )
 		self.m_panel4 = wx.Panel( self.m_auinotebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
-		self.m_auinotebook1.AddPage( self.m_panel4, u"a page", True, wx.NullBitmap )
+		self.m_auinotebook1.AddPage( self.m_panel4, "a page", True, wx.NullBitmap )
 		self.m_panel5 = wx.Panel( self.m_auinotebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
-		self.m_auinotebook1.AddPage( self.m_panel5, u"a page", False, wx.NullBitmap )
+		self.m_auinotebook1.AddPage( self.m_panel5, "a page", False, wx.NullBitmap )
 		
 		bSizer1.Add( self.m_auinotebook1, 1, wx.EXPAND |wx.ALL, 5 )
 		
@@ -52,28 +52,28 @@
 		self.m_statusBar1 = self.CreateStatusBar( 1, wx.ST_SIZEGRIP, wx.ID_ANY )
 		self.m_menubar1 = wx.MenuBar( 0 )
 		self.m_menu1 = wx.Menu()
-		self.m_menuItem1 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem1 = wx.MenuItem( self.m_menu1, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem1 )
 		
-		self.m_menuItem2 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem2 = wx.MenuItem( self.m_menu1, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem2 )
 		
-		self.m_menuItem3 = wx.MenuItem( self.m_menu1, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem3 = wx.MenuItem( self.m_menu1, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu1.AppendItem( self.m_menuItem3 )
 		
-		self.m_menubar1.Append( self.m_menu1, u"MyMenu" ) 
+		self.m_menubar1.Append( self.m_menu1, "MyMenu" ) 
 		
 		self.m_menu3 = wx.Menu()
 		self.m_menu11 = wx.Menu()
-		self.m_menuItem4 = wx.MenuItem( self.m_menu11, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem4 = wx.MenuItem( self.m_menu11, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu11.AppendItem( self.m_menuItem4 )
 		
-		self.m_menuItem5 = wx.MenuItem( self.m_menu11, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem5 = wx.MenuItem( self.m_menu11, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu11.AppendItem( self.m_menuItem5 )
 		
-		self.m_menu3.AppendSubMenu( self.m_menu11, u"MyMenu" )
+		self.m_menu3.AppendSubMenu( self.m_menu11, "MyMenu" )
 		
-		self.m_menubar1.Append( self.m_menu3, u"MyMenu" ) 
+		self.m_menubar1.Append( self.m_menu3, "MyMenu" ) 
 		
 		self.SetMenuBar( self.m_menubar1 )
 		
@@ -111,11 +111,11 @@
 		self.m_panel1.SetSizer( bSizer4 )
 		self.m_panel1.Layout()
 		bSizer4.Fit( self.m_panel1 )
-		self.m_notebook1.AddPage( self.m_panel1, u"Ed", True )
+		self.m_notebook1.AddPage( self.m_panel1, "Ed", True )
 		self.m_panel2 = wx.Panel( self.m_notebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
-		self.m_notebook1.AddPage( self.m_panel2, u"a page", False )
+		self.m_notebook1.AddPage( self.m_panel2, "a page", False )
 		self.m_panel3 = wx.Panel( self.m_notebook1, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
-		self.m_notebook1.AddPage( self.m_panel3, u"a page", False )
+		self.m_notebook1.AddPage( self.m_panel3, "a page", False )
 		
 		bSizer2.Add( self.m_notebook1, 1, wx.EXPAND |wx.ALL, 5 )
 		
@@ -135,21 +135,21 @@
 class MyFrame3 ( wx.Frame ):
 	
 	def __init__( self, parent ):
-		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"AUI Andy Demo", pos = wx.DefaultPosition, size = wx.Size( 535,348 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
+		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = "AUI Andy Demo", pos = wx.DefaultPosition, size = wx.Size( 535,348 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
 		
 		self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )
 		self.m_mgr = wx.aui.AuiManager()
 		self.m_mgr.SetManagedWindow( self )
 		
 		self.m_panel6 = wx.Panel( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )
-		self.m_mgr.AddPane( self.m_panel6, wx.aui.AuiPaneInfo() .Left() .Caption( u"Tools" ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.Size( 116,154 ) ).DockFixed( False ).Row( 1 ).BestSize( wx.Size( 100,-1 ) ) )
+		self.m_mgr.AddPane( self.m_panel6, wx.aui.AuiPaneInfo() .Left() .Caption( "Tools" ).MaximizeButton( False ).MinimizeButton( False ).PinButton( True ).Dock().Resizable().FloatingSize( wx.Size( 116,154 ) ).DockFixed( False ).Row( 1 ).BestSize( wx.Size( 100,-1 ) ) )
 		
 		bSizer3 = wx.BoxSizer( wx.VERTICAL )
 		
-		self.m_button3 = wx.Button( self.m_panel6, wx.ID_ANY, u"Import", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button3 = wx.Button( self.m_panel6, wx.ID_ANY, "Import", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button3, 0, wx.ALL|wx.EXPAND, 5 )
 		
-		self.m_button4 = wx.Button( self.m_panel6, wx.ID_ANY, u"Say", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button4 = wx.Button( self.m_panel6, wx.ID_ANY, "Say", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button4, 0, wx.ALL|wx.EXPAND, 5 )
 		
 		self.m_panel6.SetSizer( bSizer3 )
@@ -160,10 +160,10 @@
 		
 		self.m_menubar2 = wx.MenuBar( 0 )
 		self.m_menu4 = wx.Menu()
-		self.m_menuItem6 = wx.MenuItem( self.m_menu4, wx.ID_ANY, u"Hi", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem6 = wx.MenuItem( self.m_menu4, wx.ID_ANY, "Hi", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu4.AppendItem( self.m_menuItem6 )
 		
-		self.m_menubar2.Append( self.m_menu4, u"MyMenu" ) 
+		self.m_menubar2.Append( self.m_menu4, "MyMenu" ) 
 		
 		self.SetMenuBar( self.m_menubar2 )
 		
--- Research/wx form builder/2019test1/test1_gen.py	(original)
+++ Research/wx form builder/2019test1/test1_gen.py	(refactored)
@@ -26,24 +26,24 @@
 
 		bSizer5 = wx.BoxSizer( wx.HORIZONTAL )
 
-		self.btn_showpopup = wx.Button( self, wx.ID_ANY, u"POPUP FRAME", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.btn_showpopup = wx.Button( self, wx.ID_ANY, "POPUP FRAME", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer5.Add( self.btn_showpopup, 0, wx.ALL, 5 )
 
-		self.m_button2 = wx.Button( self, wx.ID_ANY, u"popup html", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button2 = wx.Button( self, wx.ID_ANY, "popup html", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer5.Add( self.m_button2, 0, wx.ALL, 5 )
 
-		self.m_button3 = wx.Button( self, wx.ID_ANY, u"CCCCC", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button3 = wx.Button( self, wx.ID_ANY, "CCCCC", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer5.Add( self.m_button3, 0, wx.ALL, 5 )
 
 
 		bSizer1.Add( bSizer5, 0, 0, 5 )
 
-		sbSizer1 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"label" ), wx.VERTICAL )
-
-		self.m_button5 = wx.Button( sbSizer1.GetStaticBox(), wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		sbSizer1 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, "label" ), wx.VERTICAL )
+
+		self.m_button5 = wx.Button( sbSizer1.GetStaticBox(), wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		sbSizer1.Add( self.m_button5, 0, wx.ALL, 5 )
 
-		self.m_button4 = wx.Button( sbSizer1.GetStaticBox(), wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button4 = wx.Button( sbSizer1.GetStaticBox(), wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		sbSizer1.Add( self.m_button4, 0, wx.ALL, 5 )
 
 
@@ -51,22 +51,22 @@
 
 		gSizer1 = wx.GridSizer( 0, 2, 0, 0 )
 
-		self.m_button11 = wx.Button( self, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button11 = wx.Button( self, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		gSizer1.Add( self.m_button11, 0, wx.ALL, 5 )
 
-		self.m_button10 = wx.Button( self, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button10 = wx.Button( self, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		gSizer1.Add( self.m_button10, 0, wx.ALL, 5 )
 
-		self.m_button6 = wx.Button( self, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button6 = wx.Button( self, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		gSizer1.Add( self.m_button6, 0, wx.ALL, 5 )
 
-		self.m_button7 = wx.Button( self, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button7 = wx.Button( self, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		gSizer1.Add( self.m_button7, 0, wx.ALL, 5 )
 
-		self.m_button8 = wx.Button( self, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button8 = wx.Button( self, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		gSizer1.Add( self.m_button8, 0, wx.ALL, 5 )
 
-		self.m_button9 = wx.Button( self, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button9 = wx.Button( self, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		gSizer1.Add( self.m_button9, 0, wx.ALL, 5 )
 
 
@@ -79,21 +79,21 @@
 
 		bSizer3 = wx.BoxSizer( wx.HORIZONTAL )
 
-		self.m_button12 = wx.Button( self.m_panel1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button12 = wx.Button( self.m_panel1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button12, 0, wx.ALL, 5 )
 
-		self.m_button13 = wx.Button( self.m_panel1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button13 = wx.Button( self.m_panel1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button13, 0, wx.ALL, 5 )
 
-		self.m_button14 = wx.Button( self.m_panel1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button14 = wx.Button( self.m_panel1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer3.Add( self.m_button14, 0, wx.ALL, 5 )
 
 		bSizer4 = wx.BoxSizer( wx.VERTICAL )
 
-		self.m_button15 = wx.Button( self.m_panel1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button15 = wx.Button( self.m_panel1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer4.Add( self.m_button15, 0, wx.ALIGN_CENTER|wx.ALL, 5 )
 
-		self.m_button16 = wx.Button( self.m_panel1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button16 = wx.Button( self.m_panel1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer4.Add( self.m_button16, 0, wx.ALL, 5 )
 
 
@@ -144,30 +144,30 @@
 
 		self.m_menu1 = wx.Menu()
 		self.m_menu11 = wx.Menu()
-		self.m_menuItem1 = wx.MenuItem( self.m_menu11, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem1 = wx.MenuItem( self.m_menu11, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu11.Append( self.m_menuItem1 )
 
-		self.m_menuItem2 = wx.MenuItem( self.m_menu11, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem2 = wx.MenuItem( self.m_menu11, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu11.Append( self.m_menuItem2 )
 
-		self.m_menuItem3 = wx.MenuItem( self.m_menu11, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem3 = wx.MenuItem( self.m_menu11, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu11.Append( self.m_menuItem3 )
 
-		self.m_menu1.AppendSubMenu( self.m_menu11, u"MyMenu" )
-
-		self.Append( self.m_menu1, u"MyMenu" )
+		self.m_menu1.AppendSubMenu( self.m_menu11, "MyMenu" )
+
+		self.Append( self.m_menu1, "MyMenu" )
 
 		self.m_menu2 = wx.Menu()
-		self.m_menuItem5 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem5 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.Append( self.m_menuItem5 )
 
-		self.m_menuItem6 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem6 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.Append( self.m_menuItem6 )
 
-		self.m_menuItem7 = wx.MenuItem( self.m_menu2, wx.ID_ANY, u"MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
+		self.m_menuItem7 = wx.MenuItem( self.m_menu2, wx.ID_ANY, "MyMenuItem", wx.EmptyString, wx.ITEM_NORMAL )
 		self.m_menu2.Append( self.m_menuItem7 )
 
-		self.Append( self.m_menu2, u"MyMenu" )
+		self.Append( self.m_menu2, "MyMenu" )
 
 
 	def __del__( self ):
@@ -183,16 +183,16 @@
 	def __init__( self, parent ):
 		wx.ToolBar.__init__ ( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.DefaultSize, style = wx.TB_HORIZONTAL )
 
-		self.m_checkBox1 = wx.CheckBox( self, wx.ID_ANY, u"Check Me!", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_checkBox1 = wx.CheckBox( self, wx.ID_ANY, "Check Me!", wx.DefaultPosition, wx.DefaultSize, 0 )
 		self.AddControl( self.m_checkBox1 )
 		m_comboBox1Choices = []
-		self.m_comboBox1 = wx.ComboBox( self, wx.ID_ANY, u"Combo!", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, 0 )
+		self.m_comboBox1 = wx.ComboBox( self, wx.ID_ANY, "Combo!", wx.DefaultPosition, wx.DefaultSize, m_comboBox1Choices, 0 )
 		self.AddControl( self.m_comboBox1 )
 		self.m_bpButton1 = wx.BitmapButton( self, wx.ID_ANY, wx.NullBitmap, wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW|0 )
 		self.AddControl( self.m_bpButton1 )
 		self.m_bpButton2 = wx.BitmapButton( self, wx.ID_ANY, wx.NullBitmap, wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW|0 )
 		self.AddControl( self.m_bpButton2 )
-		self.m_button21 = wx.Button( self, wx.ID_ANY, u"feeling", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button21 = wx.Button( self, wx.ID_ANY, "feeling", wx.DefaultPosition, wx.DefaultSize, 0 )
 		self.AddControl( self.m_button21 )
 
 		self.Realize()
@@ -218,55 +218,55 @@
 		self.m_scrolledWindow1.SetScrollRate( 5, 5 )
 		bSizer14 = wx.BoxSizer( wx.VERTICAL )
 
-		self.m_button30 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button30 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button30, 0, wx.ALL, 5 )
 
-		self.m_button31 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button31 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button31, 0, wx.ALL, 5 )
 
-		self.m_button32 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button32 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button32, 0, wx.ALL, 5 )
 
-		self.m_button33 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button33 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button33, 0, wx.ALL, 5 )
 
-		self.m_button34 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button34 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button34, 0, wx.ALL, 5 )
 
-		self.m_button35 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button35 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button35, 0, wx.ALL, 5 )
 
-		self.m_button36 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button36 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button36, 0, wx.ALL, 5 )
 
-		self.m_button37 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button37 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button37, 0, wx.ALL, 5 )
 
-		self.m_button38 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button38 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button38, 0, wx.ALL, 5 )
 
-		self.m_button39 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button39 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button39, 0, wx.ALL, 5 )
 
-		self.m_button40 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button40 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button40, 0, wx.ALL, 5 )
 
-		self.m_button41 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button41 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button41, 0, wx.ALL, 5 )
 
-		self.m_button42 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button42 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button42, 0, wx.ALL, 5 )
 
-		self.m_button43 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button43 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button43, 0, wx.ALL, 5 )
 
-		self.m_button44 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button44 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button44, 0, wx.ALL, 5 )
 
-		self.m_button45 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button45 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button45, 0, wx.ALL, 5 )
 
-		self.m_button46 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
+		self.m_button46 = wx.Button( self.m_scrolledWindow1, wx.ID_ANY, "MyButton", wx.DefaultPosition, wx.DefaultSize, 0 )
 		bSizer14.Add( self.m_button46, 0, wx.ALL, 5 )
 
 
@@ -292,7 +292,7 @@
 class MyFrame3 ( wx.Frame ):
 
 	def __init__( self, parent ):
-		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"A bit of html", pos = wx.DefaultPosition, size = wx.Size( 500,300 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
+		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = "A bit of html", pos = wx.DefaultPosition, size = wx.Size( 500,300 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
 
 		self.SetSizeHints( wx.DefaultSize, wx.DefaultSize )
 
--- Research/yuml_python/copypng.py	(original)
+++ Research/yuml_python/copypng.py	(refactored)
@@ -1,8 +1,8 @@
 # http://www.codeproject.com/KB/web-image/pnggammastrip.aspx
 
 import sys
-import urllib
-import urllib2
+import urllib.request, urllib.parse, urllib.error
+import urllib.request, urllib.error, urllib.parse
 
 import pnglib
 
--- Research/yuml_python/create_yuml_class_diagram.py	(original)
+++ Research/yuml_python/create_yuml_class_diagram.py	(refactored)
@@ -1,6 +1,6 @@
 
-import urllib
-import urllib2
+import urllib.request, urllib.parse, urllib.error
+import urllib.request, urllib.error, urllib.parse
 
 import png
 
@@ -23,9 +23,9 @@
 def create(yuml, output_filename):
     #baseUrl = 'http://yuml.me/diagram/scruffy/class/'
     baseUrl = 'http://yuml.me/diagram/dir:lr;scruffy/class/'
-    url = baseUrl + urllib.quote(yuml)
+    url = baseUrl + urllib.parse.quote(yuml)
     
-    original_png = urllib2.urlopen(url)
+    original_png = urllib.request.urlopen(url)
     output_file = file(output_filename, 'wb')
 
     add_yuml_to_png(yuml, original_png, output_file)
--- Research/yuml_python/png.py	(original)
+++ Research/yuml_python/png.py	(refactored)
@@ -2,8 +2,8 @@
 
 import struct
 import sys
-import urllib
-import urllib2
+import urllib.request, urllib.parse, urllib.error
+import urllib.request, urllib.error, urllib.parse
 import zlib
 
 def read_signature(stream):
@@ -49,7 +49,7 @@
         Chunk.__init__(self, chunk.size, chunk.chunk_type, chunk.data, chunk.crc)
         keyword_length = self.data.find('\0')
         self.keyword = self.data[:keyword_length]
-        self.text = unicode(self.data[keyword_length+5:], 'utf-8')
+        self.text = str(self.data[keyword_length+5:], 'utf-8')
 
     @staticmethod
     def create(keyword, text):
@@ -65,7 +65,7 @@
         chunk_data += null
         # no translated keyword
         chunk_data += null
-        chunk_data += unicode(text).encode('utf-8')
+        chunk_data += str(text).encode('utf-8')
 
         return Chunk.create('iTXt', chunk_data)
 
@@ -84,4 +84,4 @@
     read_signature(inputFile)
 
     for chunk in all_chunks(inputFile):
-        print chunk
+        print(chunk)
--- Research/yuml_python/write_end_of_png.py	(original)
+++ Research/yuml_python/write_end_of_png.py	(refactored)
@@ -1,3 +1,3 @@
 import sys
 
-print repr(file(sys.argv[1], 'rb').read()[-500:])
+print(repr(file(sys.argv[1], 'rb').read()[-500:]))
