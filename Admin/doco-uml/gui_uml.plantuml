"""
@startuml

header
<font color=red>Note:</font>
16th Jan 2019
After the refactoring of UmlShapeHandler and creation of ShapeMenuMgr
And the removal of the old displaymodel - now just use pure Graph nodes
endheader

class UmlCanvas <<ogl.ShapeCanvas>> {
    umlboxshapes
    <color:Green>new_edge_from
    working
    kill_layout
    -- references to instances --
    app
    frame
    canvas_resizer    <color:Red><u>ref23</u>
    displaymodel  <color:royalBlue><-- self.displaymodel = DisplayModel(self) so that display model can call back and create shapes
    snapshot_mgr
    coordmapper
    layouter
    overlap_remover
    observers  <color:royalBlue><-- my home grown multicast/observer pattern  <color:Red><u>ref61</u>
    log
    ---
    <b>__init__()
    InitSizeAndObjs()
    Clear()  <color:royalBlue> <-- self.GetDiagram().DeleteAllShapes(), called from outside this class
    -- shape creation --
    CreateUmlShape()
    <b>createCommentShape()
    CreateImageShape()
    createNodeShape()
    CreateUmlEdgeShape()
    -- selection and canvas focus --
    focus_canvas()  <color:royalBlue><-- NEW, sets up accelerator table for the X key when shapes lose focus
    SelectNodeNow()
    -- refresh related --
    mega_refresh()  <color:Salmon><- called by a lot of places
    layout_and_position_shapes()
    remove_overlaps()  <color:royalBlue><- called by UmlShapeHandler's <b>OnEndDragLeft</b></color> <color:Red><u>ref22</u>
    delete_shape_view() <color:Salmon><- called by build_view(), CmdNodeDeleteBase, CmdEditUmlClass (edit props), CmdEditComment
    -- bound handlers --
    OnLeftClick()   <color:royalBlue> <-- Override of ShapeCanvas method</color>, calls self.app.run.CmdDeselectAllShapes()
    <b>onKeyPress()</b>     <color:royalBlue><-- handles ESC, and RIGHT/LEFT to expand layout
    <b>onKeyChar()</b>     <color:royalBlue><-- handles popup menu shortcuts D, 1, 2 etc
    OnWheelZoom()
    OnDestroy()
    CmdTrimScrollbars()   <color:royalBlue> <-- Secret developer only command
    -- called by handlers in MainApp or other external --
    <b>CmdRememberLayout1()
    CmdRememberLayout2()
    CmdRestoreLayout1()
    CmdRestoreLayout2()
    <color:Green>NewEdgeMarkFrom()
    <color:Green>NewEdgeMarkTo()
    OnCancelLine
    -- utility --
    new_evthandler_housekeeping()   <color:royalBlue> <-- self.<b>observers</b>.NOTIFY_EVT_HANDLER_CREATED(evthandler)</color>  <color:Red><u>ref61</u>
    AllToLayoutCoords()
    AllToWorldCoords()

    .. def __init__(self, parent, log, frame): ..

    self.Bind(wx.EVT_WINDOW_DESTROY, self.OnDestroy)
    self.Bind(wx.EVT_MOUSEWHEEL, self.OnWheelZoom)
    self.Bind(wx.EVT_KEY_DOWN, self.onKeyPress)
    self.Bind(wx.EVT_CHAR, self.onKeyChar)

    .. def createCommentShape(self, node): ..

    shape = CommentShape(node.width, node.height)

    <i>Wire in the event handler for the new shape
    evthandler = <b>UmlShapeHandler</b>( None, self.frame, self ) <color:royalBlue><-- Each shape gets its own instance
    evthandler.SetShape(shape)
    evthandler.SetPreviousHandler(shape.GetEventHandler())
    shape.SetEventHandler(evthandler)
    self.new_evthandler_housekeeping(evthandler)

    .. def onKeyPress(self, event): ..

    keycode = event.GetKeyCode()
    self.working = True   <color:royalBlue><-- protection against re-entrancy

    if keycode == wx.WXK_ESCAPE:
    \t self.kill_layout = True
    if keycode == wx.WXK_RIGHT:
    \t    self.app.run.CmdLayoutExpand(remove_overlaps=not event.ShiftDown())

    self.working = False

    .. def onKeyChar(self, event): ..
    <i>Handles popup menu shortcuts Q, W, E etc
    <i>But is pre accelerator technology, we are seeking to replace this
    <i>(also uses self.working protection against re-entrancy)

    keycode = chr(event.GetKeyCode())

    if keycode in ["q", "Q"]:
    \t    self.NewEdgeMarkFrom()
    elif keycode in ["w", "W"]:
    \t    self.NewEdgeMarkTo(edge_type="composition")
    elif keycode in ["1", "2", "3", "4", "5", "6", "7", "8"]:
    <i> also handles P D s G h

    .. def CmdRememberLayout1(self): ..
    <i>This is called from MainApp's main menu handler: self.umlcanvas.CmdRememberLayout1()
    self.snapshot_mgr.QuickSave(slot=1)

}

UmlCanvas ..> App: app
UmlCanvas ..> Frame : frame
UmlCanvas ..> DisplayModel : displaymodel
UmlCanvas ..> ogl.Diagram : diagram
UmlCanvas <.. ogl.Diagram : canvas
UmlShapeHandler --|> ShapeEvtHandler

class DisplayModel {
    graph
    umlcanvas
    -- Essential --
    Clear()
    build_graphmodel(pmodel)  <color:royalBlue><- creates UmlGraph of nodes/edges from parse model
    build_view()  <color:royalBlue><- adds umlcanvas OGL Shapes to Graph nodes/edges
    --- Graph Node/Edge creation (no shapes involved) --
    AddUmlNode(id, attrs=[], meths=[])
    AddCommentNode(id, comment)
    AddUmlEdge(from_node, to_node, edge_type)
    -- utility --
    Dump()
    decouple_node_from_shape() <color:royalBlue><- no longer does anything!!
    delete_node_for_shape(shape)
    merge_attrs_and_meths(node, attrs, meths)
}

DisplayModel ..> UmlGraph : graph
DisplayModel ..> UmlCanvas : umlcanvas

class UmlGraph {
    nodes
    edges
    Clear()
}

UmlGraph --|> Graph

class MainApp {
    log
    working
    andyapptitle
    frame
    notebook
    umlcanvas
    asciiart
    multiText
    app
    menuBar
    --
    <b>OnInit()
    InitConfig()
    OnResizeFrame()
    OnWheelZoom_ascii()
    <b>onKeyChar_Ascii_Text_window()
    OnDumpUmlWorkspace()
    OnSaveGraphToConsole()
    OnSaveGraph()
    OnLoadGraphFromText()
    OnLoadGraph()
    OnLoadGraphSample()
    set_app_title()
    OnTabPageChanged()
    RefreshAsciiUmlTab()
    PostAsciiViewSwitch()
    PostOglViewSwitch()
    <b>InitMenus()      <color:royalBlue><-- Builds main menu
    Add()
    AddSubMenu()
    OnPythonMode()
    <b>OnRightButtonMenu()    <color:royalBlue><-- Builds canvas background click popup menu
    OnReportBug()
    OnRememberLayout1()
    OnRememberLayout2()
    OnRestoreLayout1()
    OnRestoreLayout2()
    OnCycleColours()
    OnCycleColoursDefault()
    OnColourSiblings()
    OnColourSiblingsRandom()
    OnFileImport()
    OnViewToggleAscii()
    <b>OnHelp()</b>    <color:royalBlue><-- Displays new popup Frame, uses help frame accelerator table
    <b>Enable_if_node_selected()
    OnDeleteNode()
    <b>OnDeleteNode_update()
    OnInsertComment()
    OnInsertImage()
    OnInsertClass()
    OnEditProperties()
    <b>OnEditProperties_update()
    OnLayout()
    OnDeepLayout()
    OnRefreshUmlWindow()
    MessageBox()
    OnButton()
    OnCloseFrame()

    .. def OnInit(self): ..

    self.frame.Bind( wx.EVT_CLOSE, self.OnCloseFrame )
    self.umlcanvas.Bind( wx.EVT_RIGHT_DOWN, self.OnRightButtonMenu )

    <i>this is not the wx.App but is our local app
    self.app = App(context)

    self.InitMenus()

    .. def InitMenus(self): ..

    self.menuBar = wx.MenuBar()

    <i>Build the entire main menu
    <i>Shortcuts done via item naming technique, not accelerators
    Add(menu2, "&Redraw Screen", "Ctrl-R", self.OnRefreshUmlWindow)

    <i>Disabling/Enabling technology
    menu_item_delete_class = Add( menu2, "&Delete", "Del", self.OnDeleteNode, self.OnDeleteNode_update )
    menu_item_delete_class.Enable( True )

    Add( menu2, "&Edit Class Properties...", "F2", self.OnEditProperties, self.OnEditProperties_update, )

    .. def OnEditProperties_update(self, event): ..

    self.Enable_if_node_selected(event)

    .. def Enable_if_node_selected(self, event): ..

    event.Enable(len(selected) > 0 and self.viewing_uml_tab)

    .. def OnDeleteNode_update(self, event): ..

        self.Enable_if_node_selected(event)

    .. def onKeyChar_Ascii_Text_window(self, event): ..

        keycode = event.GetKeyCode()
        if controlDown and keycode == 1:  # CTRL-A
        \t    self.multiText.SelectAll()

    .. def OnRightButtonMenu(self, event): ..

    <i>builds the main canvas popup menu
    self.popupmenu.Destroy()
    self.popupmenu = wx.Menu()  # Create a menu

    item = self.popupmenu.Append(wx.ID_ANY, "Add Class...")
    self.frame.Bind(wx.EVT_MENU, self.OnInsertClass, item)

    .. def OnHelp(self, event): ..

    <i>Creates a popup frame and wires in an accelerator table to that frame only
    <i>to close help on CMD-W.  This does not affect the main frame's accelerator table
    randomId = wx.NewIdRef()  # was wx.NewId()
    self.Bind(wx.EVT_MENU, self.OnCloseWindow, id=randomId)
    accel_tbl = wx.AcceleratorTable([(wx.ACCEL_CTRL, ord("W"), randomId)])
    self.SetAcceleratorTable(accel_tbl)

    <i>different technique used for closing help frame on ESC
    self.Bind(wx.EVT_CHAR_HOOK, self.OnKeyUP)  # Close on ESC
}

wx.App <|- MainApp
MainApp .> wx.Frame : frame
MainApp .> App : app
MainApp .> UmlCanvas : umlcanvas
class pyNsourceGui <<module>> << (M,orchid) >> #DarkSeaGreen {
    ---
}

pyNsourceGui .. MainApp : contains >
class Context {
    wxapp
    config
    umlcanvas
    displaymodel
    snapshot_mgr
    coordmapper
    layouter
    overlap_remover
    multiText
    asciiart
}
MainApp --> Context


class UmlShapeHandler <<ogl.ShapeEvtHandler>> {
    log
    frame
    umlcanvas
    shapemenu_mgr <color:royalBlue><-- NEW!
    app
    ---
    __init__()
    <b>OnLeftClick()
    <b>OnRightClick()
    OnLeftDoubleClick()
    <b>OnEndDragLeft()</b>  <color:royalBlue><-- shape.GetCanvas().remove_overlaps()</color> <color:Red><u>ref22</u>
    OnMovePost()
    OnSizingEndDragLeft()</b>  <color:royalBlue><-- removes overlaps and also
                               \t\t\t\t <color:royalBlue> shape.GetCanvas().<b>canvas_resizer.</b>resize_virtual_canvas_tofit_bounds()</color>  <color:Red><u>ref23</u>
    OnEndSize()
    <b>focus_shape()</b> <color:royalBlue><-- NEW!
    <b>_SelectNodeNow()
    UpdateStatusBar()

    .. def OnRightClick(self, x, y, keys, attachment): ..

        <i>Popup menu when r.click on shape.
        <i>The popupmenu is already built and waiting, due to the call to BuildPopupMenuItems()
        <i>via the focus_shape() <color:Red><u>ref11</u></color> call, which happens when left or right click on a shape.

        self._SelectNodeNow(x, y, keys, attachment)
        self.frame.PopupMenu(self.shapemenu_mgr.popupmenu, wx.Point(x, y)) <color:royalBlue><-- Displays the popup!

    .. def OnLeftClick(self, x, y, keys=0, attachment=0): ..

        self._SelectNodeNow(x, y, keys, attachment)

    .. def _SelectNodeNow(self, x, y, keys=0, attachment=0): ..

        shape = self.GetShape()
        shape.GetCanvas().SelectNodeNow(shape)
        self.UpdateStatusBar(shape)
        self.focus_shape() <color:Red><u>ref11</u></color>

    .. def focus_shape(self): <color:Red><u>ref11</u></color> ..
        <i>Called by both left and right click on a shape
        <i>We build both a ready to go but dormant popupmenu and update the main frame's accelerator
        <i>table with only the entries that are relevant to this shape.

        self.shapemenu_mgr.BuildPopupMenuItems()
}

class uml_shape_handler <<module>> << (M,orchid) >> #DarkSeaGreen {
    ---
    node_edit_multi_purpose()
}

uml_shape_handler .. UmlShapeHandler : contains >
UmlShapeHandler ..> ShapeMenuMgr : shapemenu_mgr

class ShapeMenuMgr {
    frame
    shapehandler
    popupmenu
    submenu
    accel_entries
    --
    __init__()
    <b>BuildPopupMenuItems() <color:royalBlue><-- The main action happens here
    add_menuitem()
    check_id()
    -- little sub builders --
    add_submenu_to_popup()
    add_separator()
    add_properties()
    add_from()
    add_from_cancel()
    add_association_edge()
    add_generalise_composition_edges()
    add_reset_image_size()
    add_delete()
    add_cancel()
    -- util --
    GetShape()
    focus_shape()
    -- handlers --
    OnNodeProperties()   <color:Red><u>ref55</u>
    OnDrawBegin()
    OnCancelDrawBegin()
    OnDrawEnd1()
    OnDrawEnd2()
    OnDrawEnd3()
    OnResetImageSize()
    OnRightClickDeleteNode()
    OnPopupMenuCancel()

    .. def BuildPopupMenuItems(self): ..

        self.popupmenu = wx.Menu()  # This is the popup menu to which we attach menu items
        self.submenu = wx.Menu()  # This is the sub menu within the popupmenu
        self.accel_entries : List[wx.AcceleratorEntry] = []

        <i>algorithm which dynamically builds the popupmenu and builds accelerator table
        <i>bindings to handlers self.OnDrawBegin, OnNodeProperties,</i>  <color:Red><u>ref55</u>
        <i>OnDrawEnd{1,2,3}, OnResetImageSize, OnRightClickDeleteNode etc.

        accel_tbl = wx.AcceleratorTable(self.accel_entries)    <color:royalBlue><-- Sets up the accelerator table
        self.frame.SetAcceleratorTable(accel_tbl)

}

class shape_menu_mgr <<module>> << (M,orchid) >> #DarkSeaGreen {
    MENU_ID_SHAPE_PROPERTIES
    MENU_ID_BEGIN_LINE
    MENU_ID_CANCEL_LINE
    ---
}

shape_menu_mgr .. ShapeMenuMgr : contains >
ShapeMenuMgr -> UmlShapeHandler : shapehandler

class App {
    context
    controller
    run
    __init__()
    NOTIFY_EVT_HANDLER_CREATED()
    Boot()
    Shutdown()
}

App ..> Controller : controller
App ..> Context: context

class ogl.Diagram {
    _shapeList
    canvas
    GetShapeList()
    AddShape()
    RemoveShape()
    FindShape()
}

class Shape {
    _eventHandler
    _canvas
}

Shape -|> ShapeEvtHandler
Shape -> UmlCanvas : shape's canvas
Shape .> UmlShapeHandler : eventHandler

class ShapeEvtHandler <<ogl>> {
}

ogl.Diagram "shapes" *-- "*" Shape

Note as N1
Handlers are done in

In Main menu
In UmlCanvas
In ShapeEvtHandler which delegates to ShapeMenuMgr
end note




@enduml

SCRAPS

hiding things after the fact or before the fact
successfully hides the classes but they still "exist"
in terms of layout.  Need to totally zap any mention of
them in order to clean up the layout

MainApp ..> UmlCanvas : umlcanvas
MainApp ..> wx.ScrolledWindow : asciiart
MainApp ..> wx.TextCtrl : multiText
MainApp ..> wx.Panel : panel_one
MainApp ..> wx.Panel : panel_two
MainApp ..> wx.BoxSizer : sizer
MainApp ..> wx.Menu : popupmenu
MainApp ..> App : app
MainApp ..> ConfigObj : config
MainApp ..> wx.NewIdRef : next_menu_id
MainApp ..> wx.PrintData : printData

"""
